{"version":3,"sources":["actions/index.js","components/RiffControls/RiffDetail.js","components/RiffControls/RiffList.js","components/YouTubeVideo/YouTubeVideo.js","components/Login/Login.js","components/RiffControls/Record.js","components/RiffControls/EditRiff.js","components/RiffControls/RiffButton.js","components/RiffControls/EditControls.js","components/RiffControls/EditInterface.js","components/ViewInterface/ViewInterface.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["EDIT_MODE","EDIT_NEW_MODE","PLAY_MODE","PAUSE_MODE","setVideoID","payload","type","setPlayerMode","mode","rawLoadAxios","dispatch","id","guser","baseURL","process","REACT_APP_BASE_URL","axios","method","url","responseType","data","token","getAuthResponse","id_token","then","res","mapDispatchToProps","editRiff","gus","connect","state","googleUser","props","className","time","toFixed","duration","onClick","index","riffs","riffsPlaying","console","log","sort","e1","e2","map","riff","key","selected","YouTubeVideo","componentDidMount","window","YT","Player","loadVideo","tag","document","createElement","src","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","rifftubePlayer","destroy","player","videoId","height","width","events","onReady","onPlayerReady","onStateChange","onPlayerStateChange","event","checkForRiffsToLoad","t","forEach","loading","loadRiff","curRiff","riffInterval","setInterval","getCurrentTime","setRiffPlaying","setVolume","vol","getVolume","audio","controls","audioURL","URL","createObjectURL","play","clearInterval","componentDidUpdate","prevProps","getPlayerState","playVideo","pauseVideo","render","Object","keys","filter","i","React","Component","playing","togglePlayerMode","Login","socialId","scope","fetchBasicProfile","responseHandler","setGoogleUser","videoID","buttonText","Record","mediaRecorder","recordingState","navigator","mediaDevices","getUserMedia","stream","mr","MediaRecorder","ondataavailable","e","chunks","push","onstop","blob","Blob","saveTempAudio","setState","catch","err","this","Date","now","startTime","stop","start","EditRiff","durationField","createRef","htmlPayloadField","startTimeField","tempRiff","Fragment","defaultValue","ref","disabled","saveRiff","Number","current","value","cancelEdit","fd","FormData","append","video_id","tempId","headers","response","RiffButton","createTempRiff","bind","EditInterface","loggedIn","isSignedIn","authCheck","DefaultComponent","extractVideoID","match","length","alert","videoIDRef","onSubmit","preventDefault","exact","path","EditControls","ViewInterface","params","getViewRiffs","App","component","Boolean","location","hostname","initialState","store","createStore","action","getUTCMilliseconds","editIndex","body","el","start_time","isText","text","ind","arr","ret","b","Array","applyMiddleware","thunkMiddleware","ReactDOM","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"sRAwBaA,EAAY,YACZC,EAAgB,gBAChBC,EAAY,YACZC,EAAa,aAObC,EAAa,SAAAC,GAAO,MAAK,CACpCC,KAL0B,eAM1BD,YA2CWE,EAAgB,SAAAC,GAAI,MAAK,CACpCF,KAzD6B,kBA0D7BD,QAASG,IAoFLC,EAAe,SAACC,EAAUC,EAAIC,GAClC,IAAIC,EAAUC,8CAAYC,mBAAqBD,8CAAYC,mBAAqB,GAChFC,IAAM,CACJC,OAAQ,OACRC,IAAI,GAAD,OAAKL,EAAL,cACHM,aAAc,cACdC,KAAM,CAAEC,MAAOT,EAAQA,EAAMU,kBAAkBC,SAAW,KAAMZ,QAC/Da,MAAK,SAAAC,GACNf,EAAS,CAAEJ,KAxJY,cAwJOD,QAASoB,EAAIL,KAAMT,WC5IrD,IAIMe,EAAqB,CACzBC,SD6DsB,SAACtB,EAASM,EAAIiB,GACpC,OAAO,SAAAlB,GACLA,EAAS,CACPJ,KA/FmB,YAgGnBD,YAGEM,GAAIF,EAAaC,EAAUC,EAAIiB,MCjExBC,eARS,SAAAC,GAAK,MAAK,CAChCC,WAAYD,EAAMC,cAOoBL,EAAzBG,EApCf,SAAoBG,GAClB,OACE,yBAAKC,UAAU,eACb,6BACE,wBAAIA,UAAU,oBACZ,2CACgBD,EAAME,KAAKC,QAAUH,EAAME,KAAKC,QAAQ,GAAK,MAE7D,yCAAeH,EAAMI,SAASD,QAAQ,IACtC,qCAAWH,EAAM1B,MACjB,mCAAS0B,EAAMrB,KAEjB,4BACE0B,QAAS,kBACPL,EAAML,SACJK,EAAMM,MACS,UAAfN,EAAM1B,MAAqB0B,EAAM3B,QAAqB,KAAX2B,EAAMrB,GACjDqB,EAAMD,cALZ,aCMR,IAKeF,eALS,SAAAC,GAAK,MAAK,CAChCS,MAAOT,EAAMS,MACbC,aAAcV,EAAMU,gBAGkB,KAAzBX,EAvBf,SAAkBG,GAEhB,OADAS,QAAQC,IAAI,UAAWV,EAAMO,OAE3B,yBAAKN,UAAU,iBACZD,EAAMO,MACHP,EAAMO,MAAMI,MAAM,SAACC,EAAGC,GAAJ,OAAYD,EAAGV,KAAOW,EAAGX,QAAQY,KAAI,SAACC,EAAMT,GAAP,OACrD,kBAAC,EAAD,eACEU,IAAKD,EAAKpC,IACNoC,EAFN,CAGET,MAAOA,EACPW,UAAwC,IAA9BjB,EAAMQ,aAAaF,SAGjC,SCHJY,E,2MACJC,kBAAoB,WAGlB,GAAKC,OAAOC,IAAOD,OAAOC,GAAGC,OAY3B,EAAKC,gBAZ8B,CAEnC,IAAMC,EAAMC,SAASC,cAAc,UACnCF,EAAIG,IAAM,qCAGVP,OAAOQ,wBAA0B,EAAKL,UAEtC,IAAMM,EAAiBJ,SAASK,qBAAqB,UAAU,GAC/DD,EAAeE,WAAWC,aAAaR,EAAKK,K,EAOhDN,UAAY,WAAO,IACT5C,EAAO,EAAKqB,MAAZrB,GAEJyC,OAAOa,gBAAgBb,OAAOa,eAAeC,UAEjD,EAAKC,OAAS,IAAIf,OAAOC,GAAGC,OAAO,kBAAmB,CACpDc,QAASzD,EACT0D,OAAQ,IACRC,MAAO,IACPC,OAAQ,CACNC,QAAS,EAAKC,cACdC,cAAe,EAAKC,uBAIxBvB,OAAOa,eAAiB,EAAKE,Q,EAG/BM,cAAgB,SAAAG,K,EAIhBC,oBAAsB,SAAAC,GACpB,EAAK9C,MAAMO,MAAMwC,SAAQ,SAAAhC,GAEP,UAAdA,EAAKzC,OACJyC,EAAK1C,UACL0C,EAAKiC,SACNjC,EAAKb,MAAQ4C,GACb/B,EAAKb,KAAO4C,EAAI,IAEhB,EAAK9C,MAAMiD,SAASlC,EAAKpC,GAAI,EAAKqB,MAAMD,gB,EAI9C4C,oBAAsB,YAYP,IAZqB,EAAXvD,MAerB,EAAK8D,QAAU,EAAKlD,MAAMQ,aAI1B,EAAK2C,aAAeC,aAAY,WAG9B,IAAIN,EAAI1B,OAAOa,eAAeoB,iBAE9B,EAAKR,oBAAoBC,GAGzB,EAAK9C,MAAMO,MAAMwC,SAAQ,SAAChC,EAAMT,GAE5B,EAAK4C,QAAQ5C,KACZwC,EAAI/B,EAAKb,MAAQ4C,EAAI/B,EAAKb,KAAOa,EAAKX,YAEvC,EAAKJ,MAAMsD,eAAehD,GAAO,GACjC,EAAK4C,QAAQ5C,IAAS,EAGJ,UAAdS,EAAKzC,MACP8C,OAAOa,eAAesB,UAAU,EAAKC,YAC9B,EAAKA,QAKlB,EAAKxD,MAAMO,MAAMwC,SAAQ,SAAChC,EAAMT,GAE9B,IAAK,EAAK4C,QAAQ5C,IAAUwC,EAAI/B,EAAKb,MAAQ4C,EAAI/B,EAAKb,KAAO,KAC3D,EAAKF,MAAMsD,eAAehD,GAAO,GACjC,EAAK4C,QAAQ5C,IAAS,EAEJ,UAAdS,EAAKzC,MAAkB,CACnB,EAAKkF,MAET,EAAKA,IAAMpC,OAAOa,eAAewB,YACjCrC,OAAOa,eAAesB,UAAqB,GAAX,EAAKC,MAGvC,IAAIE,EAAQjC,SAASC,cAAc,SAEnC,GADAgC,EAAMC,UAAW,GACZ5C,EAAK1C,QAAS,OACnB,IAAIuF,EAAWC,IAAIC,gBAAgB/C,EAAK1C,SACxCqF,EAAM/B,IAAMiC,EACZF,EAAMK,aAIX,KAEC,EAAK/D,MAAMxB,OAASL,GAEtB,EAAK6B,MAAMzB,cAAcL,KAK3B8F,cAAc,EAAKb,cAEf,EAAKnD,MAAMxB,OAASN,GAEtB,EAAK8B,MAAMzB,cAAcJ,K,EAK/B8F,mBAAqB,SAAAC,GAGnB,EAAKrB,oBAAoB,GAErB,EAAK7C,MAAMrB,KAAOuF,EAAUvF,IAAI,EAAK4C,YAErC,EAAKvB,MAAMxB,OAAS0F,EAAU1F,OAE7B,EAAKwB,MAAMxB,OAASR,GACnB,EAAKgC,MAAMxB,OAASP,GACpB,EAAK+B,MAAMxB,OAASL,GACW,IAAjC,EAAKgE,OAAOgC,iBAIZ,EAAKnE,MAAMxB,OAASN,GACa,IAAjC,EAAKiE,OAAOgC,kBAEZ,EAAKhC,OAAOiC,YALZ,EAAKjC,OAAOkC,e,EAUlBC,OAAS,WACP,OACE,yBAAKrE,UAAU,sBACb,yBAAKtB,GAAG,oBACP4F,OAAOC,KAAK,EAAKxE,MAAMQ,cACrBiE,QAAO,SAAAC,GAAC,OAAI,EAAK1E,MAAMQ,aAAakE,IAAmC,SAA7B,EAAK1E,MAAMO,MAAMmE,GAAGpG,QAC9DwC,KAAI,SAAAE,GAAG,OACN,yBAAKA,IAAK,EAAKhB,MAAMO,MAAMS,GAAKrC,IAC9B,6BACG,EAAKqB,MAAMO,MAAMS,GAAK3C,e,6BA3KZsG,IAAMC,WA2L3BlF,EAAqB,CACzBnB,gBACA+E,eHlD4B,SAAChD,EAAOuE,GAAR,MAAqB,CACjDvG,KAAMuG,EA1IwB,mBACI,uBA0IlCxG,QAASiC,IGiDTwE,iBHzH8B,SAAAtG,GAAI,MAAK,CACvCF,KAzDgC,uBGkLhC2E,SH/CsB,SAACtE,EAAIC,GAC3B,OAAO,SAAAF,GACLD,EAAaC,EAAUC,EAAIC,MGgDhBiB,eAdS,SAAAC,GAAK,MAAK,CAChCtB,KAAMsB,EAAMtB,KACZ+B,MAAOT,EAAMS,MACbC,aAAcV,EAAMU,aACpBT,WAAYD,EAAMC,cAUoBL,EAAzBG,CAA6CqB,G,QC5MtD6D,E,iLACM,IAAD,OACP,OACE,kBAAC,cAAD,CACEC,SAAS,2EACT/E,UAAU,eACVgF,MAAM,gBACNC,mBAAmB,EACnBC,gBAAiB,SAAAvF,GACf,EAAKI,MAAMoF,cAAcxF,EAAK,EAAKI,MAAMqF,UAE3CC,WAAW,0B,GAXCX,IAAMC,WAqBpBlF,EAAqB,CACzB0F,cJiB2B,SAACrF,EAAYsF,GACxC,IAAIxG,EAAUC,8CAAYC,mBAAqBD,8CAAYC,mBAAqB,GAChF,OAAO,SAAAL,GAELA,EAAS,CACPJ,KA/C4B,qBAgD5BD,QAAS0B,IAEXf,IAAM,CACJC,OAAQ,OACRC,IAAI,GAAD,OAAKL,EAAL,cACHO,KAAM,CAAEC,MAAOU,EAAWT,kBAAkBC,SAAU8F,aACrD7F,MAAK,SAAAC,GACNf,EAAS,CAAEJ,KAzBgB,oBAyBSD,QAASoB,EAAIL,aI3BxCS,eARS,SAAAC,GAAK,MAAK,CAChCuF,QAASvF,EAAMuF,WAOuB3F,EAAzBG,CAA6CkF,GC4C7CQ,E,YAvEb,WAAYvF,GAAQ,IAAD,8BACjB,4CAAMA,KAEDF,MAAQ,CACX0F,cAAe,KACfC,gBAAgB,GALD,E,iFASE,IAAD,OACdC,UAAUC,cACZD,UAAUC,aACPC,aAAa,CAAElC,OAAO,IACtBlE,MAAK,SAAAqG,GACJ,IAAMC,EAAK,IAAIC,cAAcF,GAE7BC,EAAGE,gBAAkB,SAAAC,GACnB,EAAKC,OAAOC,KAAKF,EAAE7G,OAGrB0G,EAAGM,OAAS,SAAAH,GACV,IAAII,EAAO,IAAIC,KAAK,EAAKJ,OAAQ,CAAE5H,KAAM,eACzC,EAAK0B,MAAMuG,cAAcF,EAAM,EAAKjG,WAGtC,EAAKoG,SAAS,CAAEhB,cAAeM,OAEhCW,OAAM,SAAAC,GAAG,OAAIjG,QAAQC,IAAI,QAASgG,Q,+BAI/B,IAAD,OAoCP,OAjCIhB,UAAUC,cAAgBgB,KAAK7G,MAAM0F,cAClCmB,KAAK7G,MAAM2F,eAgBZ,4BACE9G,GAAG,UACH0B,QAAS,WACP,EAAKmG,SAAS,CAAEf,gBAAgB,IAChC,EAAKrF,UAAYwG,KAAKC,MAAQ,EAAKC,WAAa,IAChD,EAAKhH,MAAM0F,cAAcuB,SAL7B,QAdA,4BACEpI,GAAG,YACH0B,QAAS,WACP,EAAKmG,SAAS,CAAEf,gBAAgB,IAChC,EAAKS,OAAS,GACd,EAAKY,UAAYF,KAAKC,MACtB,EAAK/G,MAAM0F,cAAcwB,UAN7B,UA0BKtB,UAAUC,eAAiBgB,KAAK7G,MAAM0F,cACzC,oEACG,kF,GAlEMb,IAAMC,WCSrBqC,E,YAEJ,WAAYjH,GACX,IAAD,8BACE,4CAAMA,KACDkH,cAAgBvC,IAAMwC,YAC3B,EAAKC,iBAAmBzC,IAAMwC,YAC9B,EAAKE,eAAiB1C,IAAMwC,YAJ9B,E,sEAOU,IAAD,OAEP,OADA1G,QAAQC,IAAI,cAEV,yBAAKT,UAAU,aACb,yBAAKA,UAAU,mBACiB,UAA7B0G,KAAK3G,MAAMsH,SAAShJ,KACnB,kBAAC,IAAMiJ,SAAP,KACGZ,KAAK3G,MAAMxB,OAASR,GAAc2I,KAAK3G,MAAMsH,SAASjJ,QAEnD,KADF,4CAEF,kBAAC,EAAD,CAAQkI,cAAeI,KAAK3G,MAAMuG,gBACjCI,KAAK3G,MAAMsH,SAASjJ,QACnB,4BACEgC,QAAS,WACP,IAAIqD,EAAQjC,SAASC,cAAc,SACnCgC,EAAMC,UAAW,EACjB,IAAIC,EAAWC,IAAIC,gBACjB,EAAK9D,MAAMsH,SAASjJ,SAEtBqF,EAAM/B,IAAMiC,EACZF,EAAMK,SARV,QAaE,KACJ,6BACA,sCACS,IACP,2BACEpF,GAAG,mBACH6I,aAAcb,KAAK3G,MAAMsH,SAASpH,KAClCuH,IAAKd,KAAKU,kBAGd,4BACEK,UAAWf,KAAK3G,MAAMsH,SAASjJ,QAC/BgC,QAAS,WACP,EAAKL,MAAM2H,SACT,EAAK3H,MAAMD,WAAWT,kBAAkBC,SACxC,CACElB,QAAS,EAAK2B,MAAMsH,SAASjJ,QAC7B6B,KAAM0H,OAAO,EAAKP,eAAeQ,QAAQC,QAE3C,EAAK9H,MAAMsH,YATjB,SAiBF,kBAAC,IAAMC,SAAP,KACE,8CACA,8BAAU5I,GAAG,kBAAkB8I,IAAKd,KAAKS,iBAAkBI,aAAcb,KAAK3G,MAAMsH,SAASjJ,UAE7F,yCACY,IACV,2BACEM,GAAG,sBACH6I,aAAcb,KAAK3G,MAAMsH,SAASlH,UAAY,EAC9CqH,IAAKd,KAAKO,iBAGd,sCACS,IACP,2BACEvI,GAAG,mBACH6I,aAAcb,KAAK3G,MAAMsH,SAASpH,KAClCuH,IAAKd,KAAKU,kBAGd,4BACEhH,QAAS,WACP,EAAKL,MAAM2H,SACT,EAAK3H,MAAMD,WAAWT,kBAAkBC,SACxC,CACElB,QAAS,EAAK+I,iBAAiBS,QAAQC,MACvC1H,SAAUwH,OACR,EAAKV,cAAcW,QAAQC,OAE7B5H,KAAM0H,OAAO,EAAKP,eAAeQ,QAAQC,QAE3C,EAAK9H,MAAMsH,YAXjB,SAoBJ,4BACEjH,QAAS,WACP,EAAKL,MAAM+H,eAFf,gB,GAtGapD,IAAMC,WAyHvBlF,EAAqB,CACzBnB,gBACAoJ,SNpBsB,SAACtI,EAAOhB,EAAS0C,GACvC,IAAIlC,EAAUC,8CAAYC,mBAAqBD,8CAAYC,mBAAqB,GAChF,OAAO,SAAAL,GACLA,EAAS,CAAEJ,KA3GU,YA2GOD,YAE5B,IAAI2J,EAAK,IAAIC,SACbD,EAAGE,OAAO,QAAS7I,GACnB2I,EAAGE,OAAqB,SAAdnH,EAAKzC,KAAkB,OAAS,OAAQD,EAAQA,SAC1D2J,EAAGE,OAAO,OAAQnH,EAAKzC,MACvB0J,EAAGE,OACD,WACc,SAAdnH,EAAKzC,KAAkBD,EAAQ+B,SAAWW,EAAKX,UAEjD4H,EAAGE,OAAO,aAAc7J,EAAQ6B,MAChC8H,EAAGE,OAAO,WAAYnH,EAAKoH,UAC3BH,EAAGE,OAAO,SAAUnH,EAAKqH,QAGzBJ,EAAGE,OAAO,KAAMnH,EAAKpC,IAErBK,IAAM,CACJC,OAAQ,OACRC,IAAI,GAAD,OAAKL,EAAL,cACHO,KAAM4I,EACNK,QAAS,CAAE,eAAgB,yBAE1B7I,MAAK,SAAAC,GAEJf,EAAS,CAAEJ,KAlIc,oBAkIWD,QAASoB,EAAIL,UAElDqH,OAAM,SAAAC,GACLhI,EAAS,CAAEJ,KApIc,oBAoIWD,QAASqI,EAAI4B,gBMVvD/B,cN1C2B,SAAClI,EAAS+B,GAAV,MAAwB,CACnD9B,KA/E6B,kBAgF7BD,UACA+B,aMwCA2H,WN1BwB,iBAAO,CAC/BzJ,KAtGyB,iBMkIZuB,eAbS,SAAAC,GAAK,MAAK,CAChCtB,KAAMsB,EAAMtB,KACZ8I,SAAUxH,EAAMwH,SAChBvH,WAAYD,EAAMC,cAUoBL,EAAzBG,CAA6CoH,GCvItDsB,E,iLAEF,OACE,4BAAQlI,QAASsG,KAAK3G,MAAMwI,eAAeC,KAAK,KAAM9B,KAAK3G,MAAM1B,OAC9DqI,KAAK3G,MAAM1B,U,GAJKqG,IAAMC,WAUzBlF,EAAqB,CACzB8I,ePuI4B,SAAAlK,GAAI,MAAK,CACrCA,KAAe,UAATA,EAnJ8B,yBACD,2BOatBuB,cAAQ,KAAMH,EAAdG,CAAkC0I,GCSjD,IAIe1I,eAJO,SAAAC,GAAK,MAAK,CAC9BtB,KAAMsB,EAAMtB,QAG0B,KAAzBqB,EAtBf,SAAsBG,GACpB,OACE,yBAAKC,UAAU,iBACb,6BACE,wBAAIA,UAAU,kBAAd,gBACA,kBAAC,EAAD,CAAY3B,KAAK,UACjB,kBAAC,EAAD,CAAYA,KAAK,SAEhB0B,EAAMxB,OAASR,GAAagC,EAAMxB,OAASP,EAC1C,kBAAC,EAAD,MACE,MAEN,wBAAIgC,UAAU,mBAAd,iBACA,kBAAC,EAAD,UCbAyI,E,YAEJ,WAAY1I,GACX,IAAD,8BACE,4CAAMA,KAIR2I,SAAW,WAET,QAAI,EAAK3I,MAAMD,YACN,EAAKC,MAAMD,WAAW6I,cARjC,EAaAC,UAAY,SAACjE,EAAWkE,GAEtB,OAAO,EAAKH,WAAa,kBAAC/D,EAAD,MAAgB,kBAACkE,EAAD,OAf3C,EAkBAC,eAAiB,SAAA7J,GAEf,IACI8J,EAAQ9J,EAAI8J,MADH,+EAEb,GAAIA,GAA6B,KAApBA,EAAM,GAAGC,OACpB,OAAOD,EAAM,GAEbE,MAAM,gCAvBR,EAAKC,WAAaxE,IAAMwC,YAF1B,E,sEA8BC,IAAD,OACE,OACE,kBAAC,IAAMI,SAAP,KACE,6BACE,0BACE6B,SAAU,SAAAnD,GACR,EAAKjG,MAAM5B,WACT,EAAK2K,eAAe,EAAKI,WAAWtB,QAAQC,QAE9C7B,EAAEoD,mBAGJ,0DACA,2BACE/K,KAAK,OACLkJ,aAAcb,KAAK3G,MAAMqF,QACzBoC,IAAKd,KAAKwC,aAEZ,4BACE7K,KAAK,SACL+B,QAAS,SAAA4F,GACP,EAAKjG,MAAM5B,WACT,EAAK2K,eAAe,EAAKI,WAAWtB,QAAQC,UAJlD,iBAYF,kBAAC,EAAD,CAAcnJ,GAAIgI,KAAK3G,MAAMqF,WAG/B,kBAAC,IAAD,CACEiE,OAAK,EACLC,KAAK,IACLjF,OAAQqC,KAAKkC,UAAUJ,KAAK9B,KAAM6C,EAAczE,U,GArE9BJ,IAAMC,WAiF5BlF,EAAqB,CACzBtB,cAGayB,eATS,SAAAC,GAAK,MAAK,CAChCuF,QAASvF,EAAMuF,QACftF,WAAYD,EAAMC,cAOoBL,EAAzBG,CAA6C6I,GCzFtDe,E,2MACFtI,kBAAoB,WAEhB,EAAKnB,MAAM5B,WAAY,EAAK4B,MAAMgJ,MAAMU,OAAOrE,SAE/C,EAAKrF,MAAM2J,aAAc,EAAK3J,MAAMgJ,MAAMU,OAAOrE,U,EAGrDf,OAAS,WAEL,OACI,6BACI,oCAAU,EAAKtE,MAAMgJ,MAAMU,OAAOrE,SAClC,kBAAC,EAAD,CAAc1G,GAAI,EAAKqB,MAAMgJ,MAAMU,OAAOrE,Y,6BAb9BV,IAAMC,WAsB1BlF,EAAqB,CACzBtB,aACAuL,aViCwB,SAACtE,GAC3B,IAAIxG,EAAUC,8CAAYC,mBAAqBD,8CAAYC,mBAAqB,GAChF,OAAO,SAAAL,GAKLM,IAAM,CACJC,OAAQ,OACRC,IAAI,GAAD,OAAKL,EAAL,mBACHO,KAAM,CAAEiG,aACP7F,MAAK,SAAAC,GACNf,EAAS,CAAEJ,KA1CgB,oBA0CSD,QAASoB,EAAIL,aU1CxCS,cAAQ,KAAMH,EAAdG,CAAkC4J,G,QCClCG,E,iLAxBX,OACE,kBAAC,IAAD,KACE,yBAAK3J,UAAU,OACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,iBACb,0CAGJ,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CACEqJ,OAAK,EAACC,KAAK,IACXM,UAAWnB,IAEb,kBAAC,IAAD,CACEa,KAAK,iBACLM,UAAWJ,W,GAlBP9E,IAAMC,WCMJkF,QACW,cAA7B1I,OAAO2I,SAASC,UAEe,UAA7B5I,OAAO2I,SAASC,UAEhB5I,OAAO2I,SAASC,SAAShB,MACvB,2D,6kBCKN,IAAIiB,EAAe,CACjB5E,QAAS,cACTtF,WAAY,KACZQ,MAAO,GACP+G,SAAU,KACV9I,KAAML,EACNqC,aAAc,I,kBChBV0J,GAAQC,cDmBC,WAAmC,IAAlCrK,EAAiC,uDAAzBmK,EAAcG,EAAW,uCAG/C,OAFA3J,QAAQC,IAAI,WAAY0J,EAAQtK,GAExBsK,EAAO9L,MACb,IbNwB,eaOtB,MAAO,CACL+G,QAAS+E,EAAO/L,QAChB0B,WAAYD,EAAMC,WAClBQ,MAAO,GACP+G,SAAU,KACV9I,KAAML,EACNqC,aAAc,IAElB,Ib3C8B,qBa4C5B,OAAO,EAAP,GACKV,EADL,CAEEC,WAAYqK,EAAO/L,UAEvB,Ib9CkC,yBa+ClC,Ib9CiC,wBa+C/B,OAAO,EAAP,GACKyB,EADL,CAEEwH,SAAU,CACRhJ,KbnD4B,2BamDtB8L,EAAO9L,KAAkC,QAAU,OACzD4B,KAAMkB,OAAOa,eAAeoB,iBAC5B8E,SAAUrI,EAAMuF,QAChB+C,QAAQ,IAAIxB,MAAOyD,sBAErB7L,KAAMP,IAGV,IbxDqB,YayDnB,OAAO,EAAP,GACK6B,EADL,CAEEwH,SAAS,EAAD,GAAOxH,EAAMS,MAAM6J,EAAO/L,UAClCiM,UAAWF,EAAO/L,QAClBG,KAAMR,IAEV,Ib/C2B,kBagDzB,OAAO,EAAP,GACK8B,EADL,CAEEtB,KAAM4L,EAAO/L,UAEjB,Ib5D2B,kBa6DzB,OAAO,EAAP,GACKyB,EADL,CAEEwH,SAAS,EAAD,GACHxH,EAAMwH,SADH,CAENlH,SAAUgK,EAAOhK,SACjB/B,QAAS+L,EAAO/L,YAGtB,Ib3EuB,ca4ErB,OAAO,EAAP,GACKyB,EADL,CAEEwH,SAAU,KACVgD,UAAW,KACX9L,KAAML,IAEV,Ib1E4B,mBa2E1B,OAAO,EAAP,GACK2B,EADL,CAEEU,aAAa,EAAD,GACPV,EAAMU,aADC,eAET4J,EAAO/L,SAAU,MAGxB,IbjFgC,uBakF9B,OAAO,EAAP,GACKyB,EADL,CAEEU,aAAa,EAAD,GACPV,EAAMU,aADC,eAET4J,EAAO/L,SAAU,MAGxB,Ib/E8B,qBagF5B,OAAO,EAAP,GACKyB,EADL,CAEEtB,KAAMsB,EAAMtB,OAASN,EAAYC,EAAaD,IAElD,IbhF6B,oBaiF3B,OAAO,EAAP,GACK4B,EADL,CAEES,MAAM,GAAD,mBACAT,EAAMS,OADN,YAEA6J,EAAO/L,QAAQkM,KAAKzJ,KAAI,SAAA0J,GAAE,YACxBA,EADwB,CAE3BtK,KAAMsK,EAAGC,WACTpM,QAASmM,EAAGE,OAASF,EAAGG,KAAO,KAC/BrM,KAAMkM,EAAGE,OAAS,OAAS,iBAInC,IbjH6B,oBakH3B,GAA4B,QAAxBN,EAAO/L,QAAQC,KAAgB,CACjC,IAAIiC,EAAK,YAAOT,EAAMS,OACtBA,EAAMwC,SAAQ,SAACyH,EAAII,EAAKC,GAClBL,EAAGpC,SAAWgC,EAAO/L,QAAQ+J,SAC/ByC,EAAID,GAAJ,KAAgBJ,EAAhB,CAAoB7L,GAAIyL,EAAO/L,QAAQM,SAG3C,IAAImM,EAAG,KAAQhL,EAAR,CAAeS,UACtB,OAAOuK,EACF,OAAOhL,EAChB,Ib9HqB,Ya+HnB,IACIS,EADAQ,EAAI,KAAQjB,EAAMwH,SAAd,GAA2B8C,EAAO/L,SAW1C,OARIyB,EAAMtB,OAASP,EACjBsC,EAAK,sBAAOT,EAAMS,OAAb,CAAoBQ,KAGzBR,EAAK,YAAOT,EAAMS,QACZT,EAAMwK,WAAavJ,EAGpB,EAAP,GACKjB,EADL,CAEES,QACA+G,SAAU,KACV9I,KAAMN,IAGV,IbvIqB,YawInB,IAAI4M,EAAG,KAAQhL,GAEf,OADAgL,EAAIvK,MAAM6J,EAAO/L,SAAS2E,SAAU,EAC7B8H,EACT,Ib1IuB,ca2IrB,IAAMC,EAAI,IAAIzE,KAAK,IAAI0E,MAAMZ,EAAO/L,SAAU,CAAEC,KAAM,eAClDiC,EAAK,YAAOT,EAAMS,OACtBA,EAAMwC,SAAQ,SAAAyH,GACRA,EAAG7L,KAAOyL,EAAOzL,KACnB6L,EAAGnM,QAAU0M,EACbP,EAAGxH,SAAU,MAGjB,IAAI8H,EAAG,KAAQhL,EAAR,CAAeS,UAMtB,OAHIT,EAAMtB,OAASR,GAAa8B,EAAMwH,SAAS3I,KAAOyL,EAAOzL,KAC3DmM,EAAIxD,SAAJ,KAAoBwD,EAAIxD,SAAxB,CAAkCjJ,QAAS0M,KAEtCD,EAET,QACE,OAAOhL,KCpK0BmL,aAAgBC,OAEvDC,IAAS7G,OACP,kBAAC,IAAD,CAAU4F,MAAOA,IACf,kBAAC,EAAD,OAEFzI,SAAS2J,eAAe,SF8GpB,kBAAmB1F,WACrBA,UAAU2F,cAAcC,MAAM9L,MAAK,SAAA+L,GACjCA,EAAaC,kB","file":"static/js/main.6f545ce6.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const GOOGLE_USER_SIGNIN = 'GOOGLE_USER_SIGNIN';\n\nexport const CREATE_TEMP_AUDIO_RIFF = 'CREATE_TEMP_AUDIO_RIFF';\nexport const CREATE_TEMP_TEXT_RIFF = 'CREATE_TEMP_TEXT_RIFF';\n\nexport const EDIT_RIFF = 'EDIT_RIFF';\n\nexport const CANCEL_EDIT = 'CANCEL_EDIT';\nexport const SAVE_RIFF = 'SAVE_RIFF';\n\nexport const SAVE_RIFF_SUCCESS = 'SAVE_RIFF_SUCCESS';\nexport const SAVE_RIFF_FAILURE = 'SAVE_RIFF_FAILURE';\n\nexport const SAVE_TEMP_AUDIO = 'SAVE_TEMP_AUDIO';\n\nexport const SET_RIFF_PLAYING = 'SET_RIFF_PLAYING';\nexport const SET_RIFF_NOT_PLAYING = 'SET_RIFF_NOT_PLAYING';\n\nexport const LOAD_RIFF = 'LOAD_RIFF';\nexport const RIFF_LOADED = 'RIFF_LOADED';\n\nexport const SET_PLAYER_MODE = 'SET_PLAYER_MODE';\nexport const EDIT_MODE = 'EDIT_MODE';\nexport const EDIT_NEW_MODE = 'EDIT_NEW_MODE';\nexport const PLAY_MODE = 'PLAY_MODE';\nexport const PAUSE_MODE = 'PAUSE_MODE';\nexport const TOGGLE_PLAYER_MODE = 'TOGGLE_PLAYER_MODE';\n\nexport const SET_VIDEO_ID = 'SET_VIDEO_ID';\n\nexport const RECEIVE_RIFF_LIST = 'RECEIVE_RIFF_LIST';\n\nexport const setVideoID = payload => ({\n  type: SET_VIDEO_ID,\n  payload\n});\n\n/*export const setGoogleUser = googleUser => ({\n  type: GOOGLE_USER_SIGNIN,\n  payload: googleUser\n});*/\n\nexport const setGoogleUser = (googleUser, videoID) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    //console.log( \"get url\", `${baseURL}/get-riffs` );\n    dispatch({\n      type: GOOGLE_USER_SIGNIN,\n      payload: googleUser\n    });\n    axios({\n      method: 'post',\n      url: `${baseURL}/get-riffs`,\n      data: { token: googleUser.getAuthResponse().id_token, videoID }\n    }).then(res => {\n      dispatch({ type: RECEIVE_RIFF_LIST, payload: res.data });\n    });\n  };\n};\n\nexport const getViewRiffs = (videoID) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    //console.log( \"get url\", `${baseURL}/get-riffs` );\n    /*dispatch({\n      type: null\n    });*/\n    axios({\n      method: 'post',\n      url: `${baseURL}/get-view-riffs`,\n      data: { videoID }\n    }).then(res => {\n      dispatch({ type: RECEIVE_RIFF_LIST, payload: res.data });\n    });\n  };\n};\n\nexport const setPlayerMode = mode => ({\n  type: SET_PLAYER_MODE,\n  payload: mode\n});\n\nexport const togglePlayerMode = mode => ({\n  type: TOGGLE_PLAYER_MODE\n});\n\n/*export const saveRiff = payload => ({\n  type: SAVE_RIFF,\n  payload\n});*/\n\nexport const saveTempAudio = (payload, duration) => ({\n  type: SAVE_TEMP_AUDIO,\n  payload,\n  duration\n});\n\nexport const editRiff = (payload, id, gus) => {\n  return dispatch => {\n    dispatch({\n      type: EDIT_RIFF,\n      payload\n    });\n\n    if (id) rawLoadAxios(dispatch, id, gus);\n  };\n};\n\nexport const cancelEdit = () => ({\n  type: CANCEL_EDIT\n});\n\nexport const saveRiff = (token, payload, riff) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    dispatch({ type: SAVE_RIFF, payload });\n\n    let fd = new FormData();\n    fd.append('token', token);\n    fd.append(riff.type === 'text' ? 'text' : 'blob', payload.payload);\n    fd.append('type', riff.type);\n    fd.append(\n      'duration',\n      riff.type === 'text' ? payload.duration : riff.duration\n    );\n    fd.append('start_time', payload.time);\n    fd.append('video_id', riff.video_id);\n    fd.append('tempId', riff.tempId);\n\n    // this may be null, and that's ok\n    fd.append('id', riff.id);\n\n    axios({\n      method: 'post',\n      url: `${baseURL}/save-riff`,\n      data: fd,\n      headers: { 'Content-Type': 'multipart/form-data' }\n    })\n      .then(res => {\n        // res.data.data\n        dispatch({ type: SAVE_RIFF_SUCCESS, payload: res.data });\n      })\n      .catch(err => {\n        dispatch({ type: SAVE_RIFF_FAILURE, payload: err.response });\n      });\n  };\n};\n\nexport const createTempRiff = type => ({\n  type: type === 'audio' ? CREATE_TEMP_AUDIO_RIFF : CREATE_TEMP_TEXT_RIFF\n});\n\nexport const setRiffPlaying = (index, playing) => ({\n  type: playing ? SET_RIFF_PLAYING : SET_RIFF_NOT_PLAYING,\n  payload: index\n});\n\nexport const loadRiff = (id, guser) => {\n  return dispatch => {\n    rawLoadAxios(dispatch, id, guser);\n  };\n};\n\nconst rawLoadAxios = (dispatch, id, guser) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  axios({\n    method: 'post',\n    url: `${baseURL}/load-riff`,\n    responseType: 'arraybuffer',\n    data: { token: guser ? guser.getAuthResponse().id_token : null, id } // modified to make guser optional\n  }).then(res => {\n    dispatch({ type: RIFF_LOADED, payload: res.data, id });\n  });\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { editRiff } from '../../actions/index.js';\n\n/* this component is where a user can edit their riff */\nfunction RiffDetail(props) {\n  return (\n    <div className=\"riff-detail\">\n      <div>\n        <ul className=\"riff-detail-list\">\n          <li>\n            start time: { props.time.toFixed ? props.time.toFixed(2) : null }\n          </li>\n          <li>duration: {props.duration.toFixed(2)}</li>\n          <li>type: {props.type}</li>\n          <li>No. {props.id}</li>\n        </ul>\n        <button\n          onClick={() =>\n            props.editRiff(\n              props.index,\n              props.type === 'audio' && !props.payload ? props.id : null,\n              props.googleUser\n            )\n          }\n        >\n          Edit\n        </button>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  editRiff\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RiffDetail);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport RiffDetail from './RiffDetail.js';\n\n/* this component maps over all of the user's riffs for this video */\nfunction RiffList(props) {\n  console.log('display', props.riffs);\n  return (\n    <div className=\"list-of-riffs\">\n      {props.riffs\n        ? props.riffs.sort( (e1,e2) => (e1.time - e2.time) ).map((riff, index) => (\n            <RiffDetail\n              key={riff.id}\n              {...riff}\n              index={index}\n              selected={props.riffsPlaying[index] === true}\n            />\n          ))\n        : null}\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  riffs: state.riffs,\n  riffsPlaying: state.riffsPlaying\n});\n\nexport default connect(mapStateToProps, null)(RiffList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  setPlayerMode,\n  setRiffPlaying,\n  loadRiff,\n  togglePlayerMode,\n  EDIT_MODE,\n  EDIT_NEW_MODE,\n  PLAY_MODE,\n  PAUSE_MODE\n} from '../../actions/index.js';\n\n// based on https://stackoverflow.com/questions/54017100/how-to-integrate-youtube-iframe-api-in-reactjs-solution\n\nclass YouTubeVideo extends React.Component {\n  componentDidMount = () => {\n    // On mount, check to see if the API script is already loaded\n\n    if (!window.YT || !window.YT.Player) {\n      // If not, load the script asynchronously\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n\n      // onYouTubeIframeAPIReady will load the video after the script is loaded\n      window.onYouTubeIframeAPIReady = this.loadVideo;\n\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    } // If script is already there, load the video directly\n    else {\n      this.loadVideo();\n    }\n  };\n\n  loadVideo = () => {\n    const { id } = this.props;\n\n    if (window.rifftubePlayer) window.rifftubePlayer.destroy();\n\n    this.player = new window.YT.Player('rifftube-player', {\n      videoId: id,\n      height: 390,\n      width: 640,\n      events: {\n        onReady: this.onPlayerReady,\n        onStateChange: this.onPlayerStateChange\n      }\n    });\n\n    window.rifftubePlayer = this.player; // store global reference (used to get current playback time when needed)\n  };\n\n  onPlayerReady = event => {\n    //event.target.playVideo();\n  };\n\n  checkForRiffsToLoad = t => {\n    this.props.riffs.forEach(riff => {\n      if (\n        riff.type === 'audio' &&\n        !riff.payload &&\n        !riff.loading &&\n        riff.time >= t &&\n        riff.time < t + 10\n      )\n        this.props.loadRiff(riff.id, this.props.googleUser);\n    });\n  };\n\n  onPlayerStateChange = ({ data }) => {\n    /*\n        -1 (unstarted)\n        0 (ended)\n        1 (playing)\n        2 (paused)\n        3 (buffering)\n        5 (video cued).\n        */\n\n    // the following conditional leaves out some 'else's that should never occur\n\n    if (data === 1) {\n      // playing\n      // needed I think... for pausing during a riff\n      this.curRiff = this.props.riffsPlaying;\n\n      /*******************************************************/\n      // this timer is responsible for showing and hiding riffs\n      this.riffInterval = setInterval(() => {\n        //console.log( \"interval\", this.curRiff, this.props.riffsPlaying );\n\n        let t = window.rifftubePlayer.getCurrentTime();\n\n        this.checkForRiffsToLoad(t);\n\n        // first stop any zombie riffs\n        this.props.riffs.forEach((riff, index) => {\n          if (\n            this.curRiff[index] &&\n            (t < riff.time || t > riff.time + riff.duration)\n          ) {\n            this.props.setRiffPlaying(index, false);\n            this.curRiff[index] = false;\n            //document.querySelector( '#riff-content' ).innerHTML = '';\n\n            if (riff.type === 'audio')\n              window.rifftubePlayer.setVolume(this.vol);\n              delete this.vol;\n          }\n        });\n\n        // next start any that should be playing\n        this.props.riffs.forEach((riff, index) => {\n          // the riff will start playing within half a second, or will be skipped\n          if (!this.curRiff[index] && t > riff.time && t < riff.time + 0.5) {\n            this.props.setRiffPlaying(index, true);\n            this.curRiff[index] = true;\n\n            if (riff.type === 'audio') {\n              if ( !this.vol )\n              {\n                this.vol = window.rifftubePlayer.getVolume();\n                window.rifftubePlayer.setVolume(this.vol * 0.5);\n              }\n\n              let audio = document.createElement('audio');\n              audio.controls = false;\n              if (!riff.payload) return; // DEBUG - SHOULD BE REMOVED\n              var audioURL = URL.createObjectURL(riff.payload);\n              audio.src = audioURL;\n              audio.play();\n            }\n          }\n        });\n      }, 100); // 100/1000 = 1/10 s\n\n      if (this.props.mode === PAUSE_MODE) {\n        // change mode state\n        this.props.setPlayerMode(PLAY_MODE);\n      }\n    } // not playing\n    else {\n      // stop riff-check interval when not playing\n      clearInterval(this.riffInterval);\n\n      if (this.props.mode === PLAY_MODE) {\n        // change mode state\n        this.props.setPlayerMode(PAUSE_MODE);\n      }\n    }\n  };\n\n  componentDidUpdate = prevProps => {\n    //console.log( \"youtube vid component upate\" );\n\n    this.checkForRiffsToLoad(0); // check if any riffs at < 10s in need loading\n\n    if (this.props.id !== prevProps.id) this.loadVideo();\n\n    if (this.props.mode !== prevProps.mode) {\n      if (\n        (this.props.mode === EDIT_MODE ||\n          this.props.mode === EDIT_NEW_MODE ||\n          this.props.mode === PAUSE_MODE) &&\n        this.player.getPlayerState() === 1\n      ) {\n        this.player.pauseVideo();\n      } else if (\n        this.props.mode === PLAY_MODE &&\n        this.player.getPlayerState() !== 1\n      ) {\n        this.player.playVideo();\n      }\n    }\n  };\n\n  render = () => {\n    return (\n      <div className=\"rifftube-container\">\n        <div id=\"rifftube-player\" />\n        {Object.keys(this.props.riffsPlaying)\n          .filter(i => this.props.riffsPlaying[i] && this.props.riffs[i].type === 'text')\n          .map(key => (\n            <div key={this.props.riffs[key].id}>\n              <div>\n                {this.props.riffs[key].payload}\n              </div>\n            </div>\n          ))}\n      </div>\n    );\n  };\n}\n\nconst mapStateToProps = state => ({\n  mode: state.mode,\n  riffs: state.riffs,\n  riffsPlaying: state.riffsPlaying,\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  setPlayerMode,\n  setRiffPlaying,\n  togglePlayerMode,\n  loadRiff\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(YouTubeVideo);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { GoogleLogin } from 'react-google-login-component';\nimport { setGoogleUser } from '../../actions/index.js';\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <GoogleLogin\n        socialId=\"941154439836-s6iglcrdckcj6od74kssqsom58j96hd8.apps.googleusercontent.com\"\n        className=\"google-login\"\n        scope=\"profile email\"\n        fetchBasicProfile={false}\n        responseHandler={gus => {\n          this.props.setGoogleUser(gus, this.props.videoID);\n        }}\n        buttonText=\"Login With Google\"\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  videoID: state.videoID\n});\n\nconst mapDispatchToProps = {\n  setGoogleUser\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\n\nclass Record extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      mediaRecorder: null,\n      recordingState: false\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.mediaDevices) {\n      navigator.mediaDevices\n        .getUserMedia({ audio: true })\n        .then(stream => {\n          const mr = new MediaRecorder(stream);\n\n          mr.ondataavailable = e => {\n            this.chunks.push(e.data);\n          };\n\n          mr.onstop = e => {\n            var blob = new Blob(this.chunks, { type: 'audio/webm' }); // was 'audio/webm;codecs=opus'\n            this.props.saveTempAudio(blob, this.duration);\n          };\n\n          this.setState({ mediaRecorder: mr });\n        })\n        .catch(err => console.log('Error', err));\n    }\n  }\n\n  render() {\n    var ret; // var for the value to be returned\n\n    if (navigator.mediaDevices && this.state.mediaRecorder) {\n      if (!this.state.recordingState) {\n        ret = (\n          <button\n            id=\"recordBtn\"\n            onClick={() => {\n              this.setState({ recordingState: true });\n              this.chunks = [];\n              this.startTime = Date.now();\n              this.state.mediaRecorder.start();\n            }}\n          >\n            record\n          </button>\n        );\n      } else {\n        ret = (\n          <button\n            id=\"stopBtn\"\n            onClick={() => {\n              this.setState({ recordingState: false });\n              this.duration = (Date.now() - this.startTime) / 1000;\n              this.state.mediaRecorder.stop();\n            }}\n          >\n            stop\n          </button>\n        );\n      }\n    } else if (navigator.mediaDevices && !this.state.mediaRecorder)\n      ret = <span>mediaRecorder failed to initialize</span>;\n    else ret = <span>navigator.mediaDevices not supported. sorry.</span>;\n\n    return ret;\n  }\n}\n\nexport default Record;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Record from './Record.js';\nimport {\n  saveRiff,\n  setPlayerMode,\n  saveTempAudio,\n  cancelEdit,\n  EDIT_MODE\n} from '../../actions/index.js';\n\nclass EditRiff extends React.Component {\n\n  constructor(props)\n  {\n    super(props);\n    this.durationField = React.createRef();\n    this.htmlPayloadField = React.createRef();\n    this.startTimeField = React.createRef();\n  }\n\n  render() {\n    console.log('ed rif red');\n    return (\n      <div className=\"edit-riff\">\n        <div className=\"edit-riff-inner\">\n          {this.props.tempRiff.type === 'audio' ? (\n            <React.Fragment>\n              {this.props.mode === EDIT_MODE && !this.props.tempRiff.payload ? (\n                <span>Loading...</span>\n              ) : null}\n              <Record saveTempAudio={this.props.saveTempAudio} />\n              {this.props.tempRiff.payload ? (\n                <button\n                  onClick={() => {\n                    var audio = document.createElement('audio');\n                    audio.controls = false;\n                    var audioURL = URL.createObjectURL(\n                      this.props.tempRiff.payload\n                    );\n                    audio.src = audioURL;\n                    audio.play();\n                  }}\n                >\n                  Play\n                </button>\n              ) : null}\n              <br />\n              <div>\n                Start:{' '}\n                <input\n                  id=\"riff-start-field\"\n                  defaultValue={this.props.tempRiff.time}\n                  ref={this.startTimeField}\n                />\n              </div>\n              <button\n                disabled={!this.props.tempRiff.payload}\n                onClick={() => {\n                  this.props.saveRiff(\n                    this.props.googleUser.getAuthResponse().id_token,\n                    {\n                      payload: this.props.tempRiff.payload,\n                      time: Number(this.startTimeField.current.value)\n                    },\n                    this.props.tempRiff\n                  );\n                }}\n              >\n                Save\n              </button>\n            </React.Fragment>\n          ) : (\n            <React.Fragment>\n              <div>HTML payload:</div>\n              <textarea id=\"riff-edit-field\" ref={this.htmlPayloadField} defaultValue={this.props.tempRiff.payload} />\n\n              <div>\n                Duration:{' '}\n                <input\n                  id=\"riff-duration-field\"\n                  defaultValue={this.props.tempRiff.duration || 2}\n                  ref={this.durationField}\n                />\n              </div>\n              <div>\n                Start:{' '}\n                <input\n                  id=\"riff-start-field\"\n                  defaultValue={this.props.tempRiff.time}\n                  ref={this.startTimeField}\n                />\n              </div>\n              <button\n                onClick={() => {\n                  this.props.saveRiff(\n                    this.props.googleUser.getAuthResponse().id_token,\n                    {\n                      payload: this.htmlPayloadField.current.value,\n                      duration: Number(\n                        this.durationField.current.value\n                      ),\n                      time: Number(this.startTimeField.current.value)\n                    },\n                    this.props.tempRiff\n                  );\n                }}\n              >\n                Save\n              </button>\n            </React.Fragment>\n          )}\n\n          <button\n            onClick={() => {\n              this.props.cancelEdit();\n            }}\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  mode: state.mode,\n  tempRiff: state.tempRiff,\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  setPlayerMode,\n  saveRiff,\n  saveTempAudio,\n  cancelEdit\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditRiff);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createTempRiff } from '../../actions/index.js';\n\nclass RiffButton extends React.Component {\n  render() {\n    return (\n      <button onClick={this.props.createTempRiff.bind(null, this.props.type)}>\n        {this.props.type}\n      </button>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  createTempRiff\n};\n\nexport default connect(null, mapDispatchToProps)(RiffButton);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport RiffList from './RiffList.js';\nimport EditRiff from './EditRiff.js';\nimport RiffButton from './RiffButton.js';\nimport { EDIT_MODE, EDIT_NEW_MODE } from '../../actions/index.js';\n\n/*This component houses all of the riff buttons and the rifflist*/\nfunction EditControls(props) {\n  return (\n    <div className=\"control-panel\">\n      <div>\n        <h2 className=\"add-riff-title\">Add New Riff</h2>\n        <RiffButton type=\"audio\" />\n        <RiffButton type=\"text\" />\n\n        {props.mode === EDIT_MODE || props.mode === EDIT_NEW_MODE ? (\n          <EditRiff />\n        ) : null}\n      </div>\n      <h2 className=\"riff-list-title\">Control Panel</h2>\n      <RiffList />\n    </div>\n  );\n}\n\nlet mapStateToProps = state => ({\n  mode: state.mode\n});\n\nexport default connect(mapStateToProps, null)(EditControls);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport RiffList from './RiffList.js';\nimport YouTubeVideo from '../YouTubeVideo/YouTubeVideo';\nimport Login from '../Login/Login';\nimport EditControls from './EditControls';\nimport { setVideoID } from '../../actions';\n\nclass EditInterface extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n    this.videoIDRef = React.createRef();\n  }\n\n  loggedIn = () =>\n  {\n    if (this.props.googleUser)\n      return this.props.googleUser.isSignedIn();\n\n    return false;\n  };\n\n  authCheck = (Component, DefaultComponent) =>\n  {\n    return this.loggedIn() ? <Component /> : <DefaultComponent />;\n  };\n  /* extracts the youtube id from a url. got help from: https://ctrlq.org/code/19797-regex-youtube-id */\n  extractVideoID = url =>\n  {\n    var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#\\&\\?]*).*/;\n    var match = url.match(regExp);\n    if (match && match[7].length === 11) {\n      return match[7];\n    } else {\n      alert('Could not extract video ID.');\n    }\n  };\n\n  render()\n  {\n    return (\n      <React.Fragment>\n        <div>\n          <form\n            onSubmit={e => {\n              this.props.setVideoID(\n                this.extractVideoID(this.videoIDRef.current.value)\n              );\n              e.preventDefault();\n            }}\n          >\n            <label>YouTube URL/ID:&nbsp;&nbsp;</label>\n            <input\n              type=\"text\"\n              defaultValue={this.props.videoID}\n              ref={this.videoIDRef}\n            />\n            <button\n              type=\"button\"\n              onClick={e => {\n                this.props.setVideoID(\n                  this.extractVideoID(this.videoIDRef.current.value)\n                );\n              }}\n            >\n              Change Video\n            </button>\n          </form>\n\n          <YouTubeVideo id={this.props.videoID} />\n        </div>\n\n        <Route\n          exact\n          path=\"/\"\n          render={this.authCheck.bind(this, EditControls, Login)}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  videoID: state.videoID,\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  setVideoID\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditInterface);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport YouTubeVideo from '../YouTubeVideo/YouTubeVideo';\nimport { setVideoID, getViewRiffs } from '../../actions';\n\nclass ViewInterface extends React.Component {\n    componentDidMount = () =>\n    {\n        this.props.setVideoID( this.props.match.params.videoID );\n\n        this.props.getViewRiffs( this.props.match.params.videoID );\n    };\n\n    render = () =>\n    {\n        return (\n            <div>\n                <h1>View {this.props.match.params.videoID}</h1>\n                <YouTubeVideo id={this.props.match.params.videoID} />\n            </div>\n        );\n    }\n}\n\n/*const mapStateToProps = state => ({\n  });*/\n  \n  const mapDispatchToProps = {\n    setVideoID,\n    getViewRiffs\n  };\n\nexport default connect(null, mapDispatchToProps)(ViewInterface);","import React from 'react';\nimport { connect } from 'react-redux';\nimport EditInterface from './components/RiffControls/EditInterface';\nimport ViewInterface from './components/ViewInterface/ViewInterface';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"top-section\">\n            <div className=\"title-and-url\">\n              <h1>RiffTube</h1>\n            </div>\n          </div>\n          <div className=\"main-section\">\n            <Route\n              exact path=\"/\"\n              component={EditInterface}\n            />\n            <Route\n              path=\"/view/:videoID\"\n              component={ViewInterface}\n            />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  SET_VIDEO_ID,\n  GOOGLE_USER_SIGNIN,\n  SAVE_RIFF,\n  CREATE_TEMP_AUDIO_RIFF,\n  CREATE_TEMP_TEXT_RIFF,\n  SET_PLAYER_MODE,\n  SAVE_TEMP_AUDIO,\n  CANCEL_EDIT,\n  EDIT_RIFF,\n  SET_RIFF_NOT_PLAYING,\n  SET_RIFF_PLAYING,\n  LOAD_RIFF,\n  RIFF_LOADED,\n  EDIT_MODE,\n  EDIT_NEW_MODE,\n  PLAY_MODE,\n  PAUSE_MODE,\n  TOGGLE_PLAYER_MODE,\n  RECEIVE_RIFF_LIST,\n  SAVE_RIFF_SUCCESS\n} from '../actions/index.js';\n\nlet initialState = {\n  videoID: 'lYIRO97dhII',\n  googleUser: null,\n  riffs: [],\n  tempRiff: null,\n  mode: PAUSE_MODE,\n  riffsPlaying: {}\n};\n\nexport default (state = initialState, action) => {\n  console.log('dispatch', action, state);\n\n  switch (action.type) {\n    case SET_VIDEO_ID:\n      return {\n        videoID: action.payload,\n        googleUser: state.googleUser,\n        riffs: [],\n        tempRiff: null,\n        mode: PAUSE_MODE,\n        riffsPlaying: {}\n      };\n    case GOOGLE_USER_SIGNIN:\n      return {\n        ...state,\n        googleUser: action.payload\n      };\n    case CREATE_TEMP_AUDIO_RIFF:\n    case CREATE_TEMP_TEXT_RIFF:\n      return {\n        ...state,\n        tempRiff: {\n          type: action.type === CREATE_TEMP_AUDIO_RIFF ? 'audio' : 'text',\n          time: window.rifftubePlayer.getCurrentTime(),\n          video_id: state.videoID,\n          tempId: new Date().getUTCMilliseconds() // used to get perm id from server\n        },\n        mode: EDIT_NEW_MODE\n      };\n\n    case EDIT_RIFF:\n      return {\n        ...state,\n        tempRiff: { ...state.riffs[action.payload] }, // copy specified riff to tempRiff\n        editIndex: action.payload,\n        mode: EDIT_MODE\n      };\n    case SET_PLAYER_MODE:\n      return {\n        ...state,\n        mode: action.payload\n      };\n    case SAVE_TEMP_AUDIO:\n      return {\n        ...state,\n        tempRiff: {\n          ...state.tempRiff,\n          duration: action.duration,\n          payload: action.payload\n        }\n      };\n    case CANCEL_EDIT:\n      return {\n        ...state,\n        tempRiff: null,\n        editIndex: null,\n        mode: PAUSE_MODE\n      };\n    case SET_RIFF_PLAYING:\n      return {\n        ...state,\n        riffsPlaying: {\n          ...state.riffsPlaying,\n          [action.payload]: true\n        }\n      };\n    case SET_RIFF_NOT_PLAYING:\n      return {\n        ...state,\n        riffsPlaying: {\n          ...state.riffsPlaying,\n          [action.payload]: false\n        }\n      };\n    case TOGGLE_PLAYER_MODE: // not needed at the moment\n      return {\n        ...state,\n        mode: state.mode === PLAY_MODE ? PAUSE_MODE : PLAY_MODE\n      };\n    case RECEIVE_RIFF_LIST:\n      return {\n        ...state,\n        riffs: [\n          ...state.riffs,\n          ...action.payload.body.map(el => ({\n            ...el,\n            time: el.start_time,\n            payload: el.isText ? el.text : null,\n            type: el.isText ? 'text' : 'audio'\n          }))\n        ]\n      };\n    case SAVE_RIFF_SUCCESS:\n      if (action.payload.type === 'add') {\n        let riffs = [...state.riffs];\n        riffs.forEach((el, ind, arr) => {\n          if (el.tempId === action.payload.tempId)\n            arr[ind] = { ...el, id: action.payload.id };\n            //el.id = action.payload.id;\n        });\n        let ret = { ...state, riffs };\n        return ret;\n      } else return state;\n    case SAVE_RIFF: {\n      let riff = { ...state.tempRiff, ...action.payload };\n      let riffs;\n      // editing a new riff:\n      if (state.mode === EDIT_NEW_MODE)\n        riffs = [...state.riffs, riff];\n      // EDIT_MODE (existing riff):\n      else {\n        riffs = [...state.riffs];\n        riffs[state.editIndex] = riff;\n      }\n\n      return {\n        ...state,\n        riffs,\n        tempRiff: null,\n        mode: PLAY_MODE // should be an option\n      };\n    }\n    case LOAD_RIFF:\n      let ret = { ...state };\n      ret.riffs[action.payload].loading = true;\n      return ret;\n    case RIFF_LOADED: {\n      const b = new Blob(new Array(action.payload), { type: 'audio/webm' });\n      let riffs = [...state.riffs];\n      riffs.forEach(el => {\n        if (el.id === action.id) {\n          el.payload = b;\n          el.loading = false;\n        }\n      });\n      let ret = { ...state, riffs };\n\n      // if this is being edited currently, tempRiff needs to be updated as well\n      if (state.mode === EDIT_MODE && state.tempRiff.id === action.id)\n        ret.tempRiff = { ...ret.tempRiff, payload: b };\n\n      return ret;\n    }\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport rootReducer from './reducers';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\n\nimport thunkMiddleware from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}