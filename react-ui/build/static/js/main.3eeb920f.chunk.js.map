{"version":3,"sources":["actions/index.js","components/RiffControls/RiffDetail.js","components/RiffControls/RiffList.js","components/YouTubeVideo/YouTubeVideo.js","components/Login/Login.js","components/RiffControls/Record.js","components/RiffControls/EditRiff.js","components/RiffControls/RiffButton.js","components/RiffControls/EditControls.js","components/RiffControls/EditInterface.js","components/ViewInterface/ViewInterface.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["EDIT_MODE","EDIT_NEW_MODE","PLAY_MODE","PAUSE_MODE","setPlayerMode","mode","type","payload","rawLoadAxios","dispatch","id","guser","axios","method","url","responseType","data","token","getAuthResponse","id_token","then","res","mapDispatchToProps","editRiff","gus","connect","state","googleUser","props","className","start_time","toFixed","duration","onClick","index","riffs","riffsPlaying","console","log","sort","e1","e2","time","map","riff","key","selected","YouTubeVideo","componentDidMount","window","YT","Player","loadVideo","tag","document","createElement","src","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","rifftubePlayer","destroy","player","videoId","height","width","events","onReady","onPlayerReady","onStateChange","onPlayerStateChange","event","checkForRiffsToLoad","t","forEach","loading","loadRiff","curRiff","riffInterval","setInterval","getCurrentTime","setRiffPlaying","setVolume","vol","getVolume","audio","controls","audioURL","URL","createObjectURL","play","clearInterval","componentDidUpdate","prevProps","getPlayerState","playVideo","pauseVideo","render","Object","keys","filter","i","React","Component","playing","togglePlayerMode","videoID","Login","socialId","scope","fetchBasicProfile","responseHandler","setGoogleUser","buttonText","Record","mediaRecorder","recordingState","navigator","mediaDevices","getUserMedia","stream","mr","MediaRecorder","ondataavailable","e","chunks","push","onstop","blob","Blob","saveTempAudio","setState","catch","err","this","Date","now","startTime","stop","start","EditRiff","durationField","createRef","htmlPayloadField","startTimeField","tempRiff","Fragment","defaultValue","ref","disabled","saveRiff","current","value","Number","videoIDRef","cancelEdit","fd","FormData","append","video_id","tempId","headers","response","RiffButton","createTempRiff","bind","EditInterface","loggedIn","isSignedIn","authCheck","DefaultComponent","extractVideoID","match","length","alert","onSubmit","setVideoID","preventDefault","exact","path","EditControls","ViewInterface","App","component","Boolean","location","hostname","initialState","store","createStore","action","getUTCMilliseconds","editIndex","body","el","isText","text","ret","b","Array","applyMiddleware","thunkMiddleware","ReactDOM","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3eeb920f.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const GOOGLE_USER_SIGNIN = 'GOOGLE_USER_SIGNIN';\n\nexport const CREATE_TEMP_AUDIO_RIFF = 'CREATE_TEMP_AUDIO_RIFF';\nexport const CREATE_TEMP_TEXT_RIFF = 'CREATE_TEMP_TEXT_RIFF';\n\nexport const EDIT_RIFF = 'EDIT_RIFF';\n\nexport const CANCEL_EDIT = 'CANCEL_EDIT';\nexport const SAVE_RIFF = 'SAVE_RIFF';\n\nexport const SAVE_RIFF_SUCCESS = 'SAVE_RIFF_SUCCESS';\nexport const SAVE_RIFF_FAILURE = 'SAVE_RIFF_FAILURE';\n\nexport const SAVE_TEMP_AUDIO = 'SAVE_TEMP_AUDIO';\n\nexport const SET_RIFF_PLAYING = 'SET_RIFF_PLAYING';\nexport const SET_RIFF_NOT_PLAYING = 'SET_RIFF_NOT_PLAYING';\n\nexport const LOAD_RIFF = 'LOAD_RIFF';\nexport const RIFF_LOADED = 'RIFF_LOADED';\n\nexport const SET_PLAYER_MODE = 'SET_PLAYER_MODE';\nexport const EDIT_MODE = 'EDIT_MODE';\nexport const EDIT_NEW_MODE = 'EDIT_NEW_MODE';\nexport const PLAY_MODE = 'PLAY_MODE';\nexport const PAUSE_MODE = 'PAUSE_MODE';\nexport const TOGGLE_PLAYER_MODE = 'TOGGLE_PLAYER_MODE';\n\nexport const SET_VIDEO_ID = 'SET_VIDEO_ID';\n\nexport const RECEIVE_RIFF_LIST = 'RECEIVE_RIFF_LIST';\n\nexport const setVideoID = payload => ({\n  type: SET_VIDEO_ID,\n  payload\n});\n\n/*export const setGoogleUser = googleUser => ({\n  type: GOOGLE_USER_SIGNIN,\n  payload: googleUser\n});*/\n\nexport const setGoogleUser = (googleUser, videoID) => {\n  return dispatch => {\n    dispatch({\n      type: GOOGLE_USER_SIGNIN,\n      payload: googleUser\n    });\n    axios({\n      method: 'post',\n      url: '/get-riffs', //process.env.REACT_APP_GETRIFFS_URL,\n      data: { token: googleUser.getAuthResponse().id_token, videoID }\n    }).then(res => {\n      dispatch({ type: RECEIVE_RIFF_LIST, payload: res.data });\n    });\n  };\n};\n\nexport const setPlayerMode = mode => ({\n  type: SET_PLAYER_MODE,\n  payload: mode\n});\n\nexport const togglePlayerMode = mode => ({\n  type: TOGGLE_PLAYER_MODE\n});\n\n/*export const saveRiff = payload => ({\n  type: SAVE_RIFF,\n  payload\n});*/\n\nexport const saveTempAudio = (payload, duration) => ({\n  type: SAVE_TEMP_AUDIO,\n  payload,\n  duration\n});\n\nexport const editRiff = (payload, id, gus) => {\n  return dispatch => {\n    dispatch({\n      type: EDIT_RIFF,\n      payload\n    });\n\n    if (id) rawLoadAxios(dispatch, id, gus);\n  };\n};\n\nexport const cancelEdit = () => ({\n  type: CANCEL_EDIT\n});\n\nexport const saveRiff = (token, payload, riff) => {\n  return dispatch => {\n    dispatch({ type: SAVE_RIFF, payload });\n\n    let fd = new FormData();\n    fd.append('token', token);\n    fd.append(riff.type === 'text' ? 'text' : 'blob', payload.payload);\n    fd.append('type', riff.type);\n    fd.append(\n      'duration',\n      riff.type === 'text' ? payload.duration : riff.duration\n    );\n    fd.append('start_time', riff.time);\n    fd.append('video_id', riff.video_id);\n    fd.append('tempId', riff.tempId);\n\n    // this may be null, and that's ok\n    fd.append('id', riff.id);\n\n    axios({\n      method: 'post',\n      url: '/save-riff', //process.env.REACT_APP_SAVERIFF_URL,\n      data: fd,\n      headers: { 'Content-Type': 'multipart/form-data' }\n    })\n      .then(res => {\n        // res.data.data\n        dispatch({ type: SAVE_RIFF_SUCCESS, payload: res.data });\n      })\n      .catch(err => {\n        dispatch({ type: SAVE_RIFF_FAILURE, payload: err.response });\n      });\n  };\n};\n\nexport const createTempRiff = type => ({\n  type: type === 'audio' ? CREATE_TEMP_AUDIO_RIFF : CREATE_TEMP_TEXT_RIFF\n});\n\nexport const setRiffPlaying = (index, playing) => ({\n  type: playing ? SET_RIFF_PLAYING : SET_RIFF_NOT_PLAYING,\n  payload: index\n});\n\nexport const loadRiff = (id, guser) => {\n  return dispatch => {\n    rawLoadAxios(dispatch, id, guser);\n  };\n};\n\nconst rawLoadAxios = (dispatch, id, guser) => {\n  axios({\n    method: 'post',\n    url: '/load-riff', //process.env.REACT_APP_LOADRIFF_URL,\n    responseType: 'arraybuffer',\n    data: { token: guser.getAuthResponse().id_token, id }\n  }).then(res => {\n    dispatch({ type: RIFF_LOADED, payload: res.data, id });\n  });\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { editRiff } from '../../actions/index.js';\n\n/* this component is where a user can edit their riff */\nfunction RiffDetail(props) {\n  return (\n    <div className=\"riff-detail\">\n      <div>\n        <ul className=\"riff-detail-list\">\n          <li>No. {props.id}</li>\n          <li>\n            start time: {props.start_time ? props.start_time.toFixed(2) : null}\n          </li>\n          <li>type: {props.type}</li>\n          <li>duration: {props.duration ? props.duration.toFixed(2) : null}</li>\n        </ul>\n        <button\n          onClick={() =>\n            props.editRiff(\n              props.index,\n              props.type === 'audio' && !props.payload ? props.id : null,\n              props.googleUser\n            )\n          }\n        >\n          Edit\n        </button>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  editRiff\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RiffDetail);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport RiffDetail from './RiffDetail.js';\n\n/* this component maps over all of the user's riffs for this video */\nfunction RiffList(props) {\n  console.log('display', props.riffs);\n  return (\n    <div className=\"list-of-riffs\">\n      {props.riffs\n        ? props.riffs.sort( (e1,e2) => e1.time < e2.time ).map((riff, index) => (\n            <RiffDetail\n              key={riff.id}\n              {...riff}\n              index={index}\n              selected={props.riffsPlaying[index] === true}\n            />\n          ))\n        : null}\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  riffs: state.riffs,\n  riffsPlaying: state.riffsPlaying\n});\n\nexport default connect(mapStateToProps, null)(RiffList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  setPlayerMode,\n  setRiffPlaying,\n  loadRiff,\n  togglePlayerMode,\n  EDIT_MODE,\n  EDIT_NEW_MODE,\n  PLAY_MODE,\n  PAUSE_MODE\n} from '../../actions/index.js';\n\n// based on https://stackoverflow.com/questions/54017100/how-to-integrate-youtube-iframe-api-in-reactjs-solution\n\nclass YouTubeVideo extends React.Component {\n  componentDidMount = () => {\n    // On mount, check to see if the API script is already loaded\n\n    if (!window.YT || !window.YT.Player) {\n      // If not, load the script asynchronously\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n\n      // onYouTubeIframeAPIReady will load the video after the script is loaded\n      window.onYouTubeIframeAPIReady = this.loadVideo;\n\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    } // If script is already there, load the video directly\n    else {\n      this.loadVideo();\n    }\n  };\n\n  loadVideo = () => {\n    const { id } = this.props;\n\n    if (window.rifftubePlayer) window.rifftubePlayer.destroy();\n\n    this.player = new window.YT.Player('rifftube-player', {\n      videoId: id,\n      height: 390,\n      width: 640,\n      events: {\n        onReady: this.onPlayerReady,\n        onStateChange: this.onPlayerStateChange\n      }\n    });\n\n    window.rifftubePlayer = this.player; // store global reference (used to get current playback time when needed)\n  };\n\n  onPlayerReady = event => {\n    //event.target.playVideo();\n  };\n\n  checkForRiffsToLoad = t => {\n    this.props.riffs.forEach(riff => {\n      if (\n        riff.type === 'audio' &&\n        !riff.payload &&\n        !riff.loading &&\n        riff.time >= t &&\n        riff.time < t + 10\n      )\n        this.props.loadRiff(riff.id, this.props.googleUser);\n    });\n  };\n\n  onPlayerStateChange = ({ data }) => {\n    /*\n        -1 (unstarted)\n        0 (ended)\n        1 (playing)\n        2 (paused)\n        3 (buffering)\n        5 (video cued).\n        */\n\n    // the following conditional leaves out some 'else's that should never occur\n\n    if (data === 1) {\n      // playing\n      // needed I think... for pausing during a riff\n      this.curRiff = this.props.riffsPlaying;\n\n      /*******************************************************/\n      // this timer is responsible for showing and hiding riffs\n      this.riffInterval = setInterval(() => {\n        //console.log( \"interval\", this.curRiff, this.props.riffsPlaying );\n\n        let t = window.rifftubePlayer.getCurrentTime();\n\n        this.checkForRiffsToLoad(t);\n\n        // first stop any zombie riffs\n        this.props.riffs.forEach((riff, index) => {\n          if (\n            this.curRiff[index] &&\n            (t < riff.time || t > riff.time + riff.duration)\n          ) {\n            this.props.setRiffPlaying(index, false);\n            this.curRiff[index] = false;\n            //document.querySelector( '#riff-content' ).innerHTML = '';\n\n            if (riff.type === 'audio')\n              window.rifftubePlayer.setVolume(this.vol);\n          }\n        });\n\n        // next start any that should be playing\n        this.props.riffs.forEach((riff, index) => {\n          // the riff will start playing within half a second, or will be skipped\n          if (!this.curRiff[index] && t > riff.time && t < riff.time + 0.5) {\n            this.props.setRiffPlaying(index, true);\n            this.curRiff[index] = true;\n\n            if (riff.type === 'audio') {\n              this.vol = window.rifftubePlayer.getVolume();\n              window.rifftubePlayer.setVolume(this.vol * 0.5);\n\n              let audio = document.createElement('audio');\n              audio.controls = false;\n              if (!riff.payload) return; // DEBUG - SHOULD BE REMOVED\n              var audioURL = URL.createObjectURL(riff.payload);\n              audio.src = audioURL;\n              audio.play();\n            }\n          }\n        });\n      }, 100); // 100/1000 = 1/10 s\n\n      if (this.props.mode === PAUSE_MODE) {\n        // change mode state\n        this.props.setPlayerMode(PLAY_MODE);\n      }\n    } // not playing\n    else {\n      // stop riff-check interval when not playing\n      clearInterval(this.riffInterval);\n\n      if (this.props.mode === PLAY_MODE) {\n        // change mode state\n        this.props.setPlayerMode(PAUSE_MODE);\n      }\n    }\n  };\n\n  componentDidUpdate = prevProps => {\n    //console.log( \"youtube vid component upate\" );\n\n    this.checkForRiffsToLoad(0); // check if any riffs at < 10s in need loading\n\n    if (this.props.id !== prevProps.id) this.loadVideo();\n\n    if (this.props.mode !== prevProps.mode) {\n      if (\n        (this.props.mode === EDIT_MODE ||\n          this.props.mode === EDIT_NEW_MODE ||\n          this.props.mode === PAUSE_MODE) &&\n        this.player.getPlayerState() === 1\n      ) {\n        this.player.pauseVideo();\n      } else if (\n        this.props.mode === PLAY_MODE &&\n        this.player.getPlayerState() !== 1\n      ) {\n        this.player.playVideo();\n      }\n    }\n  };\n\n  render = () => {\n    return (\n      <div className=\"rifftube-container\">\n        <div id=\"rifftube-player\" />\n        {Object.keys(this.props.riffsPlaying)\n          .filter(i => this.props.riffsPlaying[i])\n          .map(key => (\n            <div key={key}>\n              <div>\n                {this.props.riffs[key].type === 'text'\n                  ? this.props.riffs[key].payload\n                  : null}\n              </div>\n            </div>\n          ))}\n      </div>\n    );\n  };\n}\n\nconst mapStateToProps = state => ({\n  id: state.videoID,\n  mode: state.mode,\n  riffs: state.riffs,\n  riffsPlaying: state.riffsPlaying,\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  setPlayerMode,\n  setRiffPlaying,\n  togglePlayerMode,\n  loadRiff\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(YouTubeVideo);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { GoogleLogin } from 'react-google-login-component';\nimport { setGoogleUser } from '../../actions/index.js';\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <GoogleLogin\n        socialId=\"941154439836-s6iglcrdckcj6od74kssqsom58j96hd8.apps.googleusercontent.com\"\n        className=\"google-login\"\n        scope=\"profile email\"\n        fetchBasicProfile={false}\n        responseHandler={gus => {\n          this.props.setGoogleUser(gus, this.props.videoID);\n        }}\n        buttonText=\"Login With Google\"\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  videoID: state.videoID\n});\n\nconst mapDispatchToProps = {\n  setGoogleUser\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\n\nclass Record extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      mediaRecorder: null,\n      recordingState: false\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.mediaDevices) {\n      navigator.mediaDevices\n        .getUserMedia({ audio: true })\n        .then(stream => {\n          const mr = new MediaRecorder(stream);\n\n          mr.ondataavailable = e => {\n            this.chunks.push(e.data);\n          };\n\n          mr.onstop = e => {\n            var blob = new Blob(this.chunks, { type: 'audio/webm' }); // was 'audio/webm;codecs=opus'\n            this.props.saveTempAudio(blob, this.duration);\n          };\n\n          this.setState({ mediaRecorder: mr });\n        })\n        .catch(err => console.log('Error', err));\n    }\n  }\n\n  render() {\n    var ret; // var for the value to be returned\n\n    if (navigator.mediaDevices && this.state.mediaRecorder) {\n      if (!this.state.recordingState) {\n        ret = (\n          <button\n            id=\"recordBtn\"\n            onClick={() => {\n              this.setState({ recordingState: true });\n              this.chunks = [];\n              this.startTime = Date.now();\n              this.state.mediaRecorder.start();\n            }}\n          >\n            record\n          </button>\n        );\n      } else {\n        ret = (\n          <button\n            id=\"stopBtn\"\n            onClick={() => {\n              this.setState({ recordingState: false });\n              this.duration = (Date.now() - this.startTime) / 1000;\n              this.state.mediaRecorder.stop();\n            }}\n          >\n            stop\n          </button>\n        );\n      }\n    } else if (navigator.mediaDevices && !this.state.mediaRecorder)\n      ret = <span>mediaRecorder failed to initialize</span>;\n    else ret = <span>navigator.mediaDevices not supported. sorry.</span>;\n\n    return ret;\n  }\n}\n\nexport default Record;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Record from './Record.js';\nimport {\n  saveRiff,\n  setPlayerMode,\n  saveTempAudio,\n  cancelEdit,\n  EDIT_MODE\n} from '../../actions/index.js';\n\nclass EditRiff extends React.Component {\n\n  constructor(props)\n  {\n    super(props);\n    this.durationField = React.createRef();\n    this.htmlPayloadField = React.createRef();\n    this.startTimeField = React.createRef();\n  }\n\n  render() {\n    console.log('ed rif red');\n    return (\n      <div className=\"edit-riff\">\n        <div className=\"edit-riff-inner\">\n          {this.props.tempRiff.type === 'audio' ? (\n            <React.Fragment>\n              {this.props.mode === EDIT_MODE && !this.props.tempRiff.payload ? (\n                <span>Loading...</span>\n              ) : null}\n              <Record saveTempAudio={this.props.saveTempAudio} />\n              {this.props.tempRiff.payload ? (\n                <button\n                  onClick={() => {\n                    var audio = document.createElement('audio');\n                    audio.controls = false;\n                    var audioURL = URL.createObjectURL(\n                      this.props.tempRiff.payload\n                    );\n                    audio.src = audioURL;\n                    audio.play();\n                  }}\n                >\n                  Play\n                </button>\n              ) : null}\n              <br />\n              <div>\n                Start:{' '}\n                <input\n                  id=\"riff-start-field\"\n                  defaultValue={this.props.tempRiff.time}\n                  ref={this.startTimeField}\n                />\n              </div>\n              <button\n                disabled={!this.props.tempRiff.payload}\n                onClick={() => {\n                  this.props.saveRiff(\n                    this.props.googleUser.getAuthResponse().id_token,\n                    {\n                      payload: this.props.tempRiff.payload,\n                      time: this.startTimeField.current.value\n                    },\n                    this.props.tempRiff\n                  );\n                }}\n              >\n                Save\n              </button>\n            </React.Fragment>\n          ) : (\n            <React.Fragment>\n              <div>HTML payload:</div>\n              <textarea id=\"riff-edit-field\" ref={this.htmlPayloadField}>\n                {this.props.tempRiff.payload}\n              </textarea>\n              <div>\n                Duration:{' '}\n                <input\n                  id=\"riff-duration-field\"\n                  defaultValue={this.props.tempRiff.duration || 2}\n                  ref={this.durationField}\n                />\n              </div>\n              <div>\n                Start:{' '}\n                <input\n                  id=\"riff-start-field\"\n                  defaultValue={this.props.tempRiff.time}\n                  ref={this.startTimeField}\n                />\n              </div>\n              <button\n                onClick={() => {\n                  this.props.saveRiff(\n                    this.props.googleUser.getAuthResponse().id_token,\n                    {\n                      payload: this.htmlPayloadField.current.value,\n                      duration: Number(\n                        this.videoIDRef.current.value\n                      ),\n                      time: this.startTimeField.current.value\n                    },\n                    this.props.tempRiff\n                  );\n                }}\n              >\n                Save\n              </button>\n            </React.Fragment>\n          )}\n\n          <button\n            onClick={() => {\n              this.props.cancelEdit();\n            }}\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  mode: state.mode,\n  tempRiff: state.tempRiff,\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  setPlayerMode,\n  saveRiff,\n  saveTempAudio,\n  cancelEdit\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditRiff);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createTempRiff } from '../../actions/index.js';\n\nclass RiffButton extends React.Component {\n  render() {\n    return (\n      <button onClick={this.props.createTempRiff.bind(null, this.props.type)}>\n        {this.props.type}\n      </button>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  createTempRiff\n};\n\nexport default connect(null, mapDispatchToProps)(RiffButton);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport RiffList from './RiffList.js';\nimport EditRiff from './EditRiff.js';\nimport RiffButton from './RiffButton.js';\nimport { EDIT_MODE, EDIT_NEW_MODE } from '../../actions/index.js';\n\n/*This component houses all of the riff buttons and the rifflist*/\nfunction EditControls(props) {\n  return (\n    <div className=\"control-panel\">\n      <div>\n        <h2 className=\"add-riff-title\">Add New Riff</h2>\n        <RiffButton type=\"audio\" />\n        <RiffButton type=\"text\" />\n\n        {props.mode === EDIT_MODE || props.mode === EDIT_NEW_MODE ? (\n          <EditRiff />\n        ) : null}\n      </div>\n      <h2 className=\"riff-list-title\">Control Panel</h2>\n      <RiffList />\n    </div>\n  );\n}\n\nlet mapStateToProps = state => ({\n  mode: state.mode\n});\n\nexport default connect(mapStateToProps, null)(EditControls);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport RiffList from './RiffList.js';\nimport YouTubeVideo from '../YouTubeVideo/YouTubeVideo';\nimport Login from '../Login/Login';\nimport EditControls from './EditControls';\nimport { setVideoID } from '../../actions';\n\nclass EditInterface extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n    this.videoIDRef = React.createRef();\n  }\n\n  loggedIn = () =>\n  {\n    if (this.props.googleUser)\n      return this.props.googleUser.isSignedIn();\n\n    return false;\n  };\n\n  authCheck = (Component, DefaultComponent) =>\n  {\n    return this.loggedIn() ? <Component /> : <DefaultComponent />;\n  };\n  /* extracts the youtube id from a url. got help from: https://ctrlq.org/code/19797-regex-youtube-id */\n  extractVideoID = url =>\n  {\n    var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#\\&\\?]*).*/;\n    var match = url.match(regExp);\n    if (match && match[7].length === 11) {\n      return match[7];\n    } else {\n      alert('Could not extract video ID.');\n    }\n  };\n\n  render()\n  {\n    return (\n      <React.Fragment>\n        <div>\n          <form\n            onSubmit={e => {\n              this.props.setVideoID(\n                this.extractVideoID(this.videoIDRef.current.value)\n              );\n              e.preventDefault();\n            }}\n          >\n            <label>YouTube URL/ID:&nbsp;&nbsp;</label>\n            <input\n              type=\"text\"\n              defaultValue={this.props.videoID}\n              ref={this.videoIDRef}\n            />\n            <button\n              type=\"button\"\n              onClick={e => {\n                this.props.setVideoID(\n                  this.extractVideoID(this.videoIDRef.current.value)\n                );\n              }}\n            >\n              Change Video\n            </button>\n          </form>\n\n          <YouTubeVideo />\n        </div>\n\n        <Route\n          exact\n          path=\"/\"\n          render={this.authCheck.bind(this, EditControls, Login)}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  videoID: state.videoID,\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  setVideoID\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditInterface);\n","import React from 'react';\n\nfunction ViewInterface(props) {\n  return (\n    <h1>View</h1>\n  );\n}\n\nexport default ViewInterface;","import React from 'react';\nimport { connect } from 'react-redux';\nimport EditInterface from './components/RiffControls/EditInterface';\nimport ViewInterface from './components/ViewInterface/ViewInterface';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"top-section\">\n            <div className=\"title-and-url\">\n              <h1>RiffTube</h1>\n            </div>\n          </div>\n          <div className=\"main-section\">\n            <Route\n              exact path=\"/\"\n              component={EditInterface}\n            />\n            <Route\n              path=\"/edit\"\n              component={ViewInterface}\n            />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  SET_VIDEO_ID,\n  GOOGLE_USER_SIGNIN,\n  SAVE_RIFF,\n  CREATE_TEMP_AUDIO_RIFF,\n  CREATE_TEMP_TEXT_RIFF,\n  SET_PLAYER_MODE,\n  SAVE_TEMP_AUDIO,\n  CANCEL_EDIT,\n  EDIT_RIFF,\n  SET_RIFF_NOT_PLAYING,\n  SET_RIFF_PLAYING,\n  LOAD_RIFF,\n  RIFF_LOADED,\n  EDIT_MODE,\n  EDIT_NEW_MODE,\n  PLAY_MODE,\n  PAUSE_MODE,\n  TOGGLE_PLAYER_MODE,\n  RECEIVE_RIFF_LIST,\n  SAVE_RIFF_SUCCESS\n} from '../actions/index.js';\n\nlet initialState = {\n  videoID: 'lYIRO97dhII',\n  googleUser: null,\n  riffs: [],\n  tempRiff: null,\n  mode: PAUSE_MODE,\n  riffsPlaying: {}\n};\n\nexport default (state = initialState, action) => {\n  console.log('dispatch', action, state);\n\n  switch (action.type) {\n    case SET_VIDEO_ID:\n      return {\n        videoID: action.payload,\n        googleUser: state.googleUser,\n        riffs: [],\n        tempRiff: null,\n        mode: PAUSE_MODE,\n        riffsPlaying: {}\n      };\n    case GOOGLE_USER_SIGNIN:\n      return {\n        ...state,\n        googleUser: action.payload\n      };\n    case CREATE_TEMP_AUDIO_RIFF:\n    case CREATE_TEMP_TEXT_RIFF:\n      return {\n        ...state,\n        tempRiff: {\n          type: action.type === CREATE_TEMP_AUDIO_RIFF ? 'audio' : 'text',\n          time: window.rifftubePlayer.getCurrentTime(),\n          video_id: state.videoID,\n          tempId: new Date().getUTCMilliseconds() // used to get perm id from server\n        },\n        mode: EDIT_NEW_MODE\n      };\n\n    case EDIT_RIFF:\n      return {\n        ...state,\n        tempRiff: { ...state.riffs[action.payload] }, // copy specified riff to tempRiff\n        editIndex: action.payload,\n        mode: EDIT_MODE\n      };\n    case SET_PLAYER_MODE:\n      return {\n        ...state,\n        mode: action.payload\n      };\n    case SAVE_TEMP_AUDIO:\n      return {\n        ...state,\n        tempRiff: {\n          ...state.tempRiff,\n          duration: action.duration,\n          payload: action.payload\n        }\n      };\n    case CANCEL_EDIT:\n      return {\n        ...state,\n        tempRiff: null,\n        editIndex: null,\n        mode: PAUSE_MODE\n      };\n    case SET_RIFF_PLAYING:\n      return {\n        ...state,\n        riffsPlaying: {\n          ...state.riffsPlaying,\n          [action.payload]: true\n        }\n      };\n    case SET_RIFF_NOT_PLAYING:\n      return {\n        ...state,\n        riffsPlaying: {\n          ...state.riffsPlaying,\n          [action.payload]: false\n        }\n      };\n    case TOGGLE_PLAYER_MODE: // not needed at the moment\n      return {\n        ...state,\n        mode: state.mode === PLAY_MODE ? PAUSE_MODE : PLAY_MODE\n      };\n    case RECEIVE_RIFF_LIST:\n      return {\n        ...state,\n        riffs: [\n          ...state.riffs,\n          ...action.payload.body.map(el => ({\n            ...el,\n            time: el.start_time,\n            payload: el.isText ? el.text : null,\n            type: el.isText ? 'text' : 'audio'\n          }))\n        ]\n      };\n    case SAVE_RIFF_SUCCESS:\n      if (action.payload.type === 'add') {\n        let riffs = [...state.riffs];\n        riffs.forEach(el => {\n          if (el.tempId === action.payload.tempId) el.id = action.payload.id;\n        });\n        let ret = { ...state, riffs };\n        return ret;\n      } else return state;\n    case SAVE_RIFF: {\n      let riff = { ...state.tempRiff, ...action.payload };\n      let riffs;\n      // editing a new riff:\n      if (state.mode === EDIT_NEW_MODE) riffs = [...state.riffs, riff];\n      // EDIT_MODE (existing riff):\n      else {\n        riffs = [...state.riffs];\n        riffs[state.editIndex] = riff;\n      }\n\n      return {\n        ...state,\n        riffs,\n        tempRiff: null,\n        mode: PLAY_MODE // should be an option\n      };\n    }\n    case LOAD_RIFF:\n      let ret = { ...state };\n      ret.riffs[action.payload].loading = true;\n      return ret;\n    case RIFF_LOADED: {\n      const b = new Blob(new Array(action.payload), { type: 'audio/webm' });\n      let riffs = [...state.riffs];\n      riffs.forEach(el => {\n        if (el.id === action.id) {\n          el.payload = b;\n          el.loading = false;\n        }\n      });\n      let ret = { ...state, riffs };\n\n      // if this is being edited currently, tempRiff needs to be updated as well\n      if (state.mode === EDIT_MODE && state.tempRiff.id === action.id)\n        ret.tempRiff = { ...ret.tempRiff, payload: b };\n\n      return ret;\n    }\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport rootReducer from './reducers';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\n\nimport thunkMiddleware from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}