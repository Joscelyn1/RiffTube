{"version":3,"sources":["actions/index.js","components/YouTubeVideo/AllowPlayback.js","components/YouTubeVideo/YouTubeVideo.js","components/Login/Login.js","components/RiffControls/RiffDetail.js","components/RiffControls/RiffList.js","components/RiffControls/Record.js","components/RiffControls/EditRiff.js","components/RiffControls/RiffButton.js","components/RiffControls/Collaboration.js","components/RiffControls/EditControls.js","components/RiffControls/EditInterface.js","components/ViewInterface/AuthorSelector.js","components/ViewInterface/ViewInterface.js","App.js","serviceWorker.js","reducers/riffs-reducer.js","reducers/mode-reducer.js","reducers/googleUser-reducer.js","reducers/riffsPlaying-reducer.js","reducers/viewMutedUserIDs-reducer.js","reducers/name-reducer.js","reducers/videoID-reducer.js","reducers/index.js","index.js"],"names":["EDIT_MODE","EDIT_NEW_MODE","PLAY_MODE","PAUSE_MODE","setVideoID","videoID","googleUser","baseURL","process","REACT_APP_BASE_URL","dispatch","type","payload","getAuthResponse","axios","method","url","data","token","id_token","then","res","setPlayerMode","mode","rawLoadAxios","id","guser","responseType","AllowPlayback","componentDidMount","Audio","play","catch","alert","render","React","Component","connect","state","YouTubeVideo","window","YT","Player","loadVideo","tag","document","createElement","src","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","props","rifftubePlayer","destroy","player","videoId","height","width","playerVars","playsinline","events","onReady","onPlayerReady","onStateChange","onPlayerStateChange","event","checkForRiffsToLoad","t","riffs","forEach","riff","loading","time","loadRiff","curRiff","riffsPlaying","riffInterval","setInterval","getCurrentTime","index","duration","setRiffPlaying","audLock","setVolume","vol","ind","mutedIDs","user_id","getVolume","audio","controls","audioURL","URL","createObjectURL","clearInterval","componentDidUpdate","prevProps","getPlayerState","playVideo","pauseVideo","Fragment","className","Object","keys","filter","i","map","key","mapDispatchToProps","playing","togglePlayerMode","all","viewMutedUserIDs","Login","socialId","scope","fetchBasicProfile","responseHandler","gus","setGoogleUser","buttonText","editRiff","selected","toFixed","onClick","console","log","sort","e1","e2","Record","mediaRecorder","recordingState","navigator","mediaDevices","getUserMedia","stream","mr","MediaRecorder","ondataavailable","e","chunks","push","onstop","blob","Blob","saveTempAudio","setState","err","this","Date","now","startTime","stop","start","EditRiff","durationField","createRef","htmlPayloadField","startTimeField","tempRiff","editIndex","defaultValue","ref","disabled","saveRiff","Number","current","value","cancelEdit","fd","FormData","append","video_id","tempId","headers","response","temp","RiffButton","createTempRiff","Collaboration","open","name","setRifferName","newName","n","prompt","EditInterface","loggedIn","isSignedIn","authCheck","DefaultComponent","extractVideoID","match","length","videoIDRef","onSubmit","preventDefault","href","target","exact","path","bind","EditControls","AuthorSelector","names","includes","arr","reduce","ac","cur","containsReducer","el","toggleViewUserIdMuted","style","backgroundColor","renderNames","uID","ViewInterface","params","getViewRiffs","App","component","Boolean","location","hostname","initialState","riffsReducer","action","getUTCMilliseconds","body","start_time","isText","text","ret","b","Array","modeReducer","googleUserReducer","riffsPlayingReducer","viewMutedUserIDsReducer","nameReducer","videoIDReducer","combineReducers","store","createStore","defaultReducer","applyMiddleware","thunkMiddleware","ReactDOM","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"qRAwBaA,EAAY,YACZC,EAAgB,gBAChBC,EAAY,YACZC,EAAa,aAsHbC,EAAa,SAACC,EAASC,GAClC,IAAIC,EAAUC,8CAAYC,mBAAqBD,8CAAYC,mBAAqB,GAChF,OAAO,SAAAC,GAELA,EAAS,CACPC,KAxHsB,eAyHtBC,QAASP,IAENC,GAAcA,EAAWO,iBAE5BC,IAAM,CACJC,OAAQ,OACRC,IAAI,GAAD,OAAKT,EAAL,cACHU,KAAM,CAAEC,MAAOZ,EAAWO,kBAAkBM,SAAUd,aACrDe,MAAK,SAAAC,GACNX,EAAS,CAAEC,KA/Hc,oBA+HWC,QAASS,EAAIJ,YA0C5CK,EAAgB,SAAAC,GAAI,MAAK,CACpCZ,KApL6B,kBAqL7BC,QAASW,IAsFLC,EAAe,SAACd,EAAUe,EAAIC,GAClC,IAAInB,EAAUC,8CAAYC,mBAAqBD,8CAAYC,mBAAqB,GAChFK,IAAM,CACJC,OAAQ,OACRC,IAAI,GAAD,OAAKT,EAAL,cACHoB,aAAc,cACdV,KAAM,CAAEC,MAAOQ,EAAQA,EAAMb,kBAAkBM,SAAW,KAAMM,QAC/DL,MAAK,SAAAC,GACNX,EAAS,CAAEC,KArRY,cAqROC,QAASS,EAAIJ,KAAMQ,WCvS/CG,E,2MACFC,kBAAoB,YACjB,IAAIC,OAASC,OAAOC,OAAO,kBAAMC,MAAO,wB,EAG3CC,OAAS,WACP,OAAO,M,6BANeC,IAAMC,WAgBjBC,eANS,SAAAC,GAAK,MAAK,KAGP,GAGZD,CAA6CT,GCHxDW,E,2MACJV,kBAAoB,WAGlB,GAAKW,OAAOC,IAAOD,OAAOC,GAAGC,OAY3B,EAAKC,gBAZ8B,CAEnC,IAAMC,EAAMC,SAASC,cAAc,UACnCF,EAAIG,IAAM,qCAGVP,OAAOQ,wBAA0B,EAAKL,UAEtC,IAAMM,EAAiBJ,SAASK,qBAAqB,UAAU,GAC/DD,EAAeE,WAAWC,aAAaR,EAAKK,K,EAOhDN,UAAY,WAAO,IACTlB,EAAO,EAAK4B,MAAZ5B,GAEJe,OAAOc,gBAAgBd,OAAOc,eAAeC,UAEjD,EAAKC,OAAS,IAAIhB,OAAOC,GAAGC,OAAO,kBAAmB,CACpDe,QAAShC,EACTiC,OAAQ,IACRC,MAAO,IACPC,WAAY,CACVC,YAAa,GAEfC,OAAQ,CACNC,QAAS,EAAKC,cACdC,cAAe,EAAKC,uBAIxB1B,OAAOc,eAAiB,EAAKE,Q,EAG/BQ,cAAgB,SAAAG,K,EAIhBC,oBAAsB,SAAAC,GACpB,EAAKhB,MAAMiB,MAAMC,SAAQ,SAAAC,GAEP,UAAdA,EAAK7D,OACJ6D,EAAK5D,UACL4D,EAAKC,SACND,EAAKE,MAAQL,GACbG,EAAKE,KAAOL,EAAI,IAEhB,EAAKhB,MAAMsB,SAASH,EAAK/C,GAAI,EAAK4B,MAAM/C,gB,EAI9C4D,oBAAsB,YAYP,IAZqB,EAAXjD,MAmBrB,EAAK2D,QAAU,EAAKvB,MAAMwB,aAI1B,EAAKC,aAAeC,aAAY,WAG9B,IAAIV,EAAI7B,OAAOc,eAAe0B,iBAE9B,EAAKZ,oBAAoBC,GAGzB,EAAKhB,MAAMiB,MAAMC,SAAQ,SAACC,EAAMS,GAE5B,EAAKL,QAAQK,KACZZ,EAAIG,EAAKE,MAAQL,EAAIG,EAAKE,KAAOF,EAAKU,YAEvC,EAAK7B,MAAM8B,eAAeF,GAAO,GACjC,EAAKL,QAAQK,IAAS,EAGJ,UAAdT,EAAK7D,MAEP,EAAKyE,UACC,EAAKA,UAET5C,OAAOc,eAAe+B,UAAU,EAAKC,IAAM,EAAKA,IAAM,YAC/C,EAAKA,SAQpB,EAAKjC,MAAMiB,MAAMC,SAAQ,SAACC,EAAMS,GAE9B,GALcM,EAKEN,GALK,EAAK5B,MAAMmC,SAAU,EAAKnC,MAAMiB,MAAMiB,GAAKE,WAKrC,EAAKb,QAAQK,IAAUZ,EAAIG,EAAKE,MAAQL,EAAIG,EAAKE,KAAO,KAEjF,EAAKrB,MAAM8B,eAAeF,GAAO,GACjC,EAAKL,QAAQK,IAAS,EAEJ,UAAdT,EAAK7D,MAAkB,CACnB,EAAK2E,MAET,EAAKA,IAAM9C,OAAOc,eAAeoC,YACjClD,OAAOc,eAAe+B,UAAqB,GAAX,EAAKC,MAIjC,EAAKF,QAGT,EAAKA,UAFL,EAAKA,QAAU,EAIjB,IAAIO,EAAQ,IAAI7D,MAEhB,GADA6D,EAAMC,UAAW,GACZpB,EAAK5D,QAAS,OACnB,IAAIiF,EAAWC,IAAIC,gBAAgBvB,EAAK5D,SACxC+E,EAAM5C,IAAM8C,EACZF,EAAM5D,OA5BI,IAAAwD,OAgCf,KAEC,EAAKlC,MAAM9B,OAASrB,GAEtB,EAAKmD,MAAM/B,cAAcpB,KAK3B8F,cAAc,EAAKlB,cAEf,EAAKzB,MAAM9B,OAASrB,GAEtB,EAAKmD,MAAM/B,cAAcnB,K,EAK/B8F,mBAAqB,SAAAC,GAGnB,EAAK9B,oBAAoB,GAErB,EAAKf,MAAM5B,KAAOyE,EAAUzE,IAAI,EAAKkB,YAErC,EAAKU,MAAM9B,OAAS2E,EAAU3E,OAE7B,EAAK8B,MAAM9B,OAASvB,GACnB,EAAKqD,MAAM9B,OAAStB,GACpB,EAAKoD,MAAM9B,OAASpB,GACW,IAAjC,EAAKqD,OAAO2C,iBAIZ,EAAK9C,MAAM9B,OAASrB,GACa,IAAjC,EAAKsD,OAAO2C,kBAEZ,EAAK3C,OAAO4C,YALZ,EAAK5C,OAAO6C,e,EAUlBnE,OAAS,WACP,OACE,kBAAC,IAAMoE,SAAP,KACE,kBAAC,EAAD,MACA,yBAAKC,UAAU,sBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,4BACZC,OAAOC,KAAK,EAAKpD,MAAMwB,cACrB6B,QAAO,SAAAC,GAAC,OAAI,EAAKtD,MAAMwB,aAAa8B,IAAmC,SAA7B,EAAKtD,MAAMiB,MAAMqC,GAAGhG,QAC9DiG,KAAI,SAAAC,GAAG,OACN,yBAAKA,IAAK,EAAKxD,MAAMiB,MAAMuC,GAAKpF,GAAI8E,UAAU,qBAC3C,EAAKlD,MAAMiB,MAAMuC,GAAKjG,cAKjC,yBAAKa,GAAG,uB,6BAvMSU,IAAMC,WAsN3B0E,EAAqB,CACzBxF,gBACA6D,eF+C4B,SAACF,EAAO8B,GAAR,MAAqB,CACjDpG,KAAMoG,EAvQwB,mBACI,uBAuQlCnG,QAASqE,IEhDT+B,iBF1B8B,SAAAzF,GAAI,MAAK,CACvCZ,KApLgC,uBE8MhCgE,SFkDsB,SAAClD,EAAIC,GAC3B,OAAO,SAAAhB,GACLc,EAAad,EAAUe,EAAIC,MEjDhBW,eAfS,SAAAC,GAAK,MAAK,CAChCf,KAAMe,EAAMf,KACZ+C,MAAOhC,EAAMgC,MAAM2C,IACnBpC,aAAcvC,EAAMuC,aACpBvE,WAAYgC,EAAMhC,WAClBkF,SAAUlD,EAAM4E,oBAUsBJ,EAAzBzE,CAA6CE,G,QCxOtD4E,E,iLACM,IAAD,OACP,OACE,kBAAC,cAAD,CACEC,SAAS,2EACTb,UAAU,eACVc,MAAM,gBACNC,mBAAmB,EACnBC,gBAAiB,SAAAC,GACf,EAAKnE,MAAMoE,cAAcD,EAAK,EAAKnE,MAAMhD,UAE3CqH,WAAW,0B,GAXCvF,IAAMC,WAqBpB0E,EAAqB,CACzBW,cH4I2B,SAACnH,EAAYD,GACxC,IAAIE,EAAUC,8CAAYC,mBAAqBD,8CAAYC,mBAAqB,GAChF,OAAO,SAAAC,GAELA,EAAS,CACPC,KA1K4B,qBA2K5BC,QAASN,IAEXQ,IAAM,CACJC,OAAQ,OACRC,IAAI,GAAD,OAAKT,EAAL,cACHU,KAAM,CAAEC,MAAOZ,EAAWO,kBAAkBM,SAAUd,aACrDe,MAAK,SAAAC,GACNX,EAAS,CAAEC,KAnJgB,oBAmJSC,QAASS,EAAIJ,aGtJxCoB,eARS,SAAAC,GAAK,MAAK,CAChCjC,QAASiC,EAAMjC,WAOuByG,EAAzBzE,CAA6C8E,GCG5D,IAIML,EAAqB,CACzBa,SJwLsB,SAAC/G,EAASa,EAAI+F,GACpC,OAAO,SAAA9G,GACLA,EAAS,CACPC,KA1NmB,YA2NnBC,YAIEa,GAAID,EAAad,EAAUe,EAAI+F,MI7LxBnF,eARS,SAAAC,GAAK,MAAK,CAChChC,WAAYgC,EAAMhC,cAOoBwG,EAAzBzE,EApCf,SAAoBgB,GAClB,OACE,yBAAKkD,UAAS,qBAAiBlD,EAAMuE,SAAW,wBAA0B,KACxE,6BACE,wBAAIrB,UAAU,oBACZ,2CACgBlD,EAAMqB,KAAKmD,QAAUxE,EAAMqB,KAAKmD,QAAQ,GAAK,MAE7D,yCAAexE,EAAM6B,SAAS2C,QAAQ,IACtC,qCAAWxE,EAAM1C,MACjB,mCAAS0C,EAAM5B,KAEjB,4BACEqG,QAAS,kBACPzE,EAAMsE,SACJtE,EAAM4B,MACS,UAAf5B,EAAM1C,MAAqB0C,EAAMzC,QAAqB,KAAXyC,EAAM5B,GACjD4B,EAAM/C,cALZ,aCMR,IAKe+B,eALS,SAAAC,GAAK,MAAK,CAChCgC,MAAOhC,EAAMgC,MAAM2C,IACnBpC,aAAcvC,EAAMuC,gBAGkB,KAAzBxC,EAvBf,SAAkBgB,GAEhB,OADA0E,QAAQC,IAAI,UAAW3E,EAAMiB,OAE3B,yBAAKiC,UAAU,iBACZlD,EAAMiB,MACHjB,EAAMiB,MAAM2D,MAAM,SAACC,EAAGC,GAAJ,OAAYD,EAAGxD,KAAOyD,EAAGzD,QAAQkC,KAAI,SAACpC,EAAMS,GAAP,OACrD,kBAAC,EAAD,eACE4B,IAAKrC,EAAK/C,IACN+C,EAFN,CAGES,MAAOA,EACP2C,UAAwC,IAA9BvE,EAAMwB,aAAaI,SAGjC,SCwDKmD,E,YAvEb,WAAY/E,GAAQ,IAAD,8BACjB,4CAAMA,KAEDf,MAAQ,CACX+F,cAAe,KACfC,gBAAgB,GALD,E,iFASE,IAAD,OACdC,UAAUC,cACZD,UAAUC,aACPC,aAAa,CAAE9C,OAAO,IACtBvE,MAAK,SAAAsH,GACJ,IAAMC,EAAK,IAAIC,cAAcF,GAE7BC,EAAGE,gBAAkB,SAAAC,GACnB,EAAKC,OAAOC,KAAKF,EAAE7H,OAGrB0H,EAAGM,OAAS,SAAAH,GACV,IAAII,EAAO,IAAIC,KAAK,EAAKJ,OAAQ,CAAEpI,KAAM,eACzC,EAAK0C,MAAM+F,cAAcF,EAAM,EAAKhE,WAGtC,EAAKmE,SAAS,CAAEhB,cAAeM,OAEhC3G,OAAM,SAAAsH,GAAG,OAAIvB,QAAQC,IAAI,QAASsB,Q,+BAI/B,IAAD,OAoCP,OAjCIf,UAAUC,cAAgBe,KAAKjH,MAAM+F,cAClCkB,KAAKjH,MAAMgG,eAgBZ,4BACE7G,GAAG,UACHqG,QAAS,WACP,EAAKuB,SAAS,CAAEf,gBAAgB,IAChC,EAAKpD,UAAYsE,KAAKC,MAAQ,EAAKC,WAAa,IAChD,EAAKpH,MAAM+F,cAAcsB,SAL7B,QAdA,4BACElI,GAAG,YACHqG,QAAS,WACP,EAAKuB,SAAS,CAAEf,gBAAgB,IAChC,EAAKS,OAAS,GACd,EAAKW,UAAYF,KAAKC,MACtB,EAAKnH,MAAM+F,cAAcuB,UAN7B,UA0BKrB,UAAUC,eAAiBe,KAAKjH,MAAM+F,cACzC,oEACG,kF,GAlEMlG,IAAMC,WCSrByH,E,YAEJ,WAAYxG,GACX,IAAD,8BACE,4CAAMA,KACDyG,cAAgB3H,IAAM4H,YAC3B,EAAKC,iBAAmB7H,IAAM4H,YAC9B,EAAKE,eAAiB9H,IAAM4H,YAJ9B,E,sEAOU,IAAD,OAEP,OADAhC,QAAQC,IAAI,cAEV,yBAAKzB,UAAU,aACb,yBAAKA,UAAU,mBACiB,UAA7BgD,KAAKlG,MAAM6G,SAASvJ,KACnB,kBAAC,IAAM2F,SAAP,KACGiD,KAAKlG,MAAM9B,OAASvB,GAAauJ,KAAKlG,MAAM8G,YAAcZ,KAAKlG,MAAM6G,SAAStJ,QAC7E,4CACE,KACJ,kBAAC,EAAD,CAAQwI,cAAeG,KAAKlG,MAAM+F,gBACjCG,KAAKlG,MAAM6G,SAAStJ,QACnB,4BACEkH,QAAS,WACP,IAAInC,EAAQ9C,SAASC,cAAc,SACnC6C,EAAMC,UAAW,EACjB,IAAIC,EAAWC,IAAIC,gBACjB,EAAK1C,MAAM6G,SAAStJ,SAEtB+E,EAAM5C,IAAM8C,EACZF,EAAM5D,SARV,QAaE,KACJ,6BACA,sCACS,IACP,2BACEN,GAAG,mBACH2I,aAAcb,KAAKlG,MAAM6G,SAASxF,KAClC2F,IAAKd,KAAKU,kBAGd,4BACEK,UAAWf,KAAKlG,MAAM6G,SAAStJ,QAC/BkH,QAAS,WACP,EAAKzE,MAAMkH,SACT,EAAKlH,MAAM/C,WAAWO,kBAAkBM,SACxC,CACEP,QAAS,EAAKyC,MAAM6G,SAAStJ,QAC7B8D,KAAM8F,OAAO,EAAKP,eAAeQ,QAAQC,QAE3C,EAAKrH,MAAM6G,YATjB,SAiBF,kBAAC,IAAM5D,SAAP,KACE,8CACA,8BAAU7E,GAAG,kBAAkB4I,IAAKd,KAAKS,iBAAkBI,aAAcb,KAAKlG,MAAM6G,SAAStJ,UAE7F,yCACY,IACV,2BACEa,GAAG,sBACH2I,aAAcb,KAAKlG,MAAM6G,SAAShF,UAAY,EAC9CmF,IAAKd,KAAKO,iBAGd,sCACS,IACP,2BACErI,GAAG,mBACH2I,aAAcb,KAAKlG,MAAM6G,SAASxF,KAClC2F,IAAKd,KAAKU,kBAGd,4BACEnC,QAAS,WACP,EAAKzE,MAAMkH,SACT,EAAKlH,MAAM/C,WAAWO,kBAAkBM,SACxC,CACEP,QAAS,EAAKoJ,iBAAiBS,QAAQC,MACvCxF,SAAUsF,OACR,EAAKV,cAAcW,QAAQC,OAE7BhG,KAAM8F,OAAO,EAAKP,eAAeQ,QAAQC,QAE3C,EAAKrH,MAAM6G,YAXjB,SAoBJ,4BACEpC,QAAS,WACP,EAAKzE,MAAMsH,eAFf,gB,GAtGaxI,IAAMC,WA0HvB0E,EAAqB,CACzBxF,gBACAiJ,SPuGsB,SAACrJ,EAAON,EAAS4D,GACvC,IAAIjE,EAAUC,8CAAYC,mBAAqBD,8CAAYC,mBAAqB,GAChF,OAAO,SAAAC,GACLA,EAAS,CAAEC,KAvOU,YAuOOC,YAE5B,IAAIgK,EAAK,IAAIC,SACbD,EAAGE,OAAO,QAAS5J,GACnB0J,EAAGE,OAAqB,SAAdtG,EAAK7D,KAAkB,OAAS,OAAQC,EAAQA,SAC1DgK,EAAGE,OAAO,OAAQtG,EAAK7D,MACvBiK,EAAGE,OACD,WACc,SAAdtG,EAAK7D,KAAkBC,EAAQsE,SAAWV,EAAKU,UAEjD0F,EAAGE,OAAO,aAAclK,EAAQ8D,MAChCkG,EAAGE,OAAO,WAAYtG,EAAKuG,UAC3BH,EAAGE,OAAO,SAAUtG,EAAKwG,QAGzBJ,EAAGE,OAAO,KAAMtG,EAAK/C,IAErBX,IAAM,CACJC,OAAQ,OACRC,IAAI,GAAD,OAAKT,EAAL,cACHU,KAAM2J,EACNK,QAAS,CAAE,eAAgB,yBAE1B7J,MAAK,SAAAC,GAEJX,EAAS,CAAEC,KA9Pc,oBA8PWC,QAASS,EAAIJ,UAElDe,OAAM,SAAAsH,GACL5I,EAAS,CAAEC,KAhQc,oBAgQWC,QAAS0I,EAAI4B,gBOrIvD9B,cPgF2B,SAACxI,EAASsE,GAAV,MAAwB,CACnDvE,KA1M6B,kBA2M7BC,UACAsE,aOlFAyF,WPiGwB,iBAAO,CAC/BhK,KAlOyB,iBOmIZ0B,eAdS,SAAAC,GAAK,MAAK,CAChCf,KAAMe,EAAMf,KACZ2I,SAAU5H,EAAMgC,MAAM6G,KACtBhB,UAAW7H,EAAMgC,MAAM6F,UACvB7J,WAAYgC,EAAMhC,cAUoBwG,EAAzBzE,CAA6CwH,GCxItDuB,E,iLACM,IAAD,OACP,OACE,4BAAQtD,QAAS,WAAQ,EAAKzE,MAAMgI,eAAe,EAAKhI,MAAM1C,KAAM,EAAK0C,MAAMhD,WAC5EkJ,KAAKlG,MAAM1C,U,GAJKwB,IAAMC,WAczB0E,EAAqB,CACzBuE,eR+P4B,SAAC1K,EAAMN,GAAP,MAAoB,CAChDM,KAAe,UAATA,EA/Q8B,yBACD,wBA+QnCN,aQ9PagC,eARS,SAAAC,GAAK,MAAK,CAChCjC,QAASiC,EAAMjC,WAOuByG,EAAzBzE,CAA6C+I,GCnBtDE,E,YAEF,WAAYjI,GACX,IAAD,8BACI,4CAAMA,KACDf,MAAQ,CAAEiJ,MAAM,GAFzB,E,sEAMC,IAAD,OACI,OACI,kBAAC,IAAMjF,SAAP,KACI,4BAAQwB,QAAU,kBAAM,EAAKuB,SAAU,CAAEkC,MAAQ,EAAKjJ,MAAMiJ,SAA5D,uBAKIhC,KAAKjH,MAAMiJ,KAEP,sCAIA,U,GAvBIpJ,IAAMC,WAuCjBC,eATO,SAAAC,GAAK,MAAK,CAC9BjC,QAASiC,EAAMjC,QACfC,WAAYgC,EAAMhC,WAClBkL,KAAMlJ,EAAMkJ,QAGa,GAGZnJ,CAA6CiJ,GCa9D,IAMMxE,EAAqB,CACzB2E,cVsE2B,SAACC,EAASpL,GACrC,IAAIC,EAAUC,8CAAYC,mBAAqBD,8CAAYC,mBAAqB,GAChF,OAAO,SAAAC,GACLI,IAAM,CACJC,OAAQ,OACRC,IAAI,GAAD,OAAKT,EAAL,aACHU,KAAM,CAAEC,MAAOZ,EAAWO,kBAAkBM,SAAUuK,aACrDtK,MAAK,SAAAC,GACNX,EAAS,CAAEC,KA7GkB,sBA6GSC,QAASS,EAAIJ,aU3E1CoB,eAVO,SAAAC,GAAK,MAAK,CAC9Bf,KAAMe,EAAMf,KACZiK,KAAMlJ,EAAMkJ,KACZlL,WAAYgC,EAAMhC,cAOoBwG,EAAzBzE,EAtDf,SAAsBgB,GACpB,OACE,yBAAKkD,UAAU,iBAGXlD,EAAMmI,KAEJ,gDAGInI,EAAMmI,KAER,4BACE7K,KAAK,SACLmH,QAAU,WACR,IAAI6D,EAAIC,OAAO,aAAcvI,EAAMmI,MAC9BG,GACHtI,EAAMoI,cAAeE,EAAGtI,EAAM/C,cALpC,gBAYF,KAGJ,kBAAC,EAAD,MAEA,6BACE,wBAAIiG,UAAU,kBAAd,gBACA,kBAAC,EAAD,CAAY5F,KAAK,UACjB,kBAAC,EAAD,CAAYA,KAAK,SAEhB0C,EAAM9B,OAASvB,GAAaqD,EAAM9B,OAAStB,EAC1C,kBAAC,EAAD,MACE,MAEN,wBAAIsG,UAAU,mBAAd,iBACA,kBAAC,EAAD,UC1CAsF,E,YACJ,WAAYxI,GAAQ,IAAD,8BACjB,4CAAMA,KAIRyI,SAAW,WACT,QAAI,EAAKzI,MAAM/C,YAAmB,EAAK+C,MAAM/C,WAAWyL,cANvC,EAWnBC,UAAY,SAAC5J,EAAW6J,GACtB,OAAO,EAAKH,WAAa,kBAAC1J,EAAD,MAAgB,kBAAC6J,EAAD,OAZxB,EAenBC,eAAiB,SAAAlL,GACf,IACImL,EAAQnL,EAAImL,MADH,+EAEb,OAAIA,GAA6B,KAApBA,EAAM,GAAGC,OACbD,EAAM,GAENnL,GAnBT,EAAKqL,WAAalK,IAAM4H,YAFP,E,sEAyBT,IAAD,OACP,OACE,kBAAC,IAAMzD,SAAP,KACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,iBACb,0CAGJ,0BACE+F,SAAU,SAAAxD,GACR,EAAKzF,MAAMjD,WACT,EAAK8L,eAAe,EAAKG,WAAW5B,QAAQC,OAC5C,EAAKrH,MAAM/C,YAEbwI,EAAEyD,mBAGJ,0DACA,2BACE5L,KAAK,OACLyJ,aAAcb,KAAKlG,MAAMhD,QACzBgK,IAAKd,KAAK8C,aAEZ,4BAAQ1L,KAAK,UAAb,iBAGF,kBAAC,EAAD,CAAcc,GAAI8H,KAAKlG,MAAMhD,UAE7B,6BACE,uBAAGmM,KAAM,SAAWjD,KAAKlG,MAAMhD,QAASoM,OAAO,UAA/C,gBAKJ,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,IACLzK,OAAQqH,KAAKyC,UAAUY,KAAKrD,KAAMsD,EAAc1F,U,GAhE9BhF,IAAMC,WA4E5B0E,EAAqB,CACzB1G,cAGaiC,eATS,SAAAC,GAAK,MAAK,CAChCjC,QAASiC,EAAMjC,QACfC,WAAYgC,EAAMhC,cAOoBwG,EAAzBzE,CAA6CwJ,GCpFtDiB,E,sLAGD,IAAD,OACQC,EAAQ,GAENC,EAAW,SAAEC,EAAKxL,GAAP,OAAewL,EAAIC,OADZ,SAAAzL,GAAE,OAAI,SAAC0L,EAAIC,GAAL,OAAaA,EAAI3L,KAAOA,EAAK0L,IAAM,EAAOA,IAAM,GAClCE,CAAiB5L,IAAM,IAQnE,OANA8H,KAAKlG,MAAMiB,MAAMC,SAAS,SAAA+I,GAElBvF,QAAQC,IAAK,OAAQsF,EAAG9B,KAAMwB,EAAUD,EAAOO,EAAG7H,UAC3CuH,EAAUD,EAAOO,EAAG7H,UACvBsH,EAAM/D,KAAM,CAAEwC,KAAM8B,EAAG9B,KAAM/J,GAAI6L,EAAG7H,aAEzCsH,EAAMnG,KAAK,SAAA0G,GAAE,OAChB,yBAAKzG,IAAKyG,EAAG7L,GAAIqG,QAAU,kBAAM,EAAKzE,MAAMkK,sBAAuBD,EAAG7L,KAAO+L,MAAQ,CAAEC,gBAAiB,EAAKpK,MAAMmC,SAAS8H,EAAG7L,IAAM,OAAS,SACxI6L,EAAG9B,W,+BAOb,OACI,6BAEQjC,KAAKmE,mB,GA1BIvL,IAAMC,WAsC3B0E,EAAqB,CACzByG,sBZAiC,SAACI,GAAD,MAAU,CAC7ChN,KATsC,2BAUtCc,GAAIkM,KYCStL,eATS,SAAAC,GAAK,MAAK,CAC9BgC,MAAOhC,EAAMgC,MAAM2C,IACnBzB,SAAUlD,EAAM4E,oBAOoBJ,EAAzBzE,CAA6CyK,GCxCtDc,E,2MACF/L,kBAAoB,WAEhB,EAAKwB,MAAMjD,WAAY,EAAKiD,MAAM8I,MAAM0B,OAAOxN,SAE/C,EAAKgD,MAAMyK,aAAc,EAAKzK,MAAM8I,MAAM0B,OAAOxN,U,EAGrD6B,OAAS,WAEL,OACI,6BACI,oCAAU,EAAKmB,MAAM8I,MAAM0B,OAAOxN,SAClC,kBAAC,EAAD,CAAcoB,GAAI,EAAK4B,MAAM8I,MAAM0B,OAAOxN,UAC1C,kBAAC,EAAD,Q,6BAdY8B,IAAMC,WAuB1B0E,EAAqB,CACzB1G,aACA0N,ab0JwB,SAACzN,GAC3B,IAAIE,EAAUC,8CAAYC,mBAAqBD,8CAAYC,mBAAqB,GAChF,OAAO,SAAAC,GAKLI,IAAM,CACJC,OAAQ,OACRC,IAAI,GAAD,OAAKT,EAAL,mBACHU,KAAM,CAAEZ,aACPe,MAAK,SAAAC,GACNX,EAAS,CAAEC,KApKgB,oBAoKSC,QAASS,EAAIJ,aanKxCoB,eAAQ,KAAMyE,EAAdzE,CAAkCuL,G,SCdlCG,G,iLAbX,OACE,kBAAC,KAAD,KACE,yBAAKxH,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAOmG,OAAK,EAACC,KAAK,IAAIqB,UAAWnC,IACjC,kBAAC,IAAD,CAAOc,KAAK,iBAAiBqB,UAAWJ,Y,GAPlCzL,IAAMC,WCOJ6L,QACW,cAA7BzL,OAAO0L,SAASC,UAEe,UAA7B3L,OAAO0L,SAASC,UAEhB3L,OAAO0L,SAASC,SAAShC,MACvB,2D,6lBCJN,IAAIiC,GAAe,CACjBnH,IAAK,GACLkE,KAAM,KACNhB,UAAW,MAkHEkE,GA/GM,WAAmC,IAAlC/L,EAAiC,uDAAzB8L,GAAcE,EAAW,uCACrD,OAAQA,EAAO3N,MACb,IhBQwB,egBPtB,OAAOyN,GACT,IhBpBkC,yBgBqBlC,IhBpBiC,wBgBqB/B,OAAO,GAAP,GACK9L,EADL,CAEE6I,KAAK,GAAD,GACC7I,EAAM6I,KADP,CAEFxK,KhB1B4B,2BgB0BtB2N,EAAO3N,KAAkC,QAAU,OAGzD+D,KAAMlC,OAAOc,eAAe0B,iBAC5B+F,SAAUuD,EAAOjO,QACjB2K,QAAQ,IAAIxB,MAAO+E,uBAErBpE,UAAW,OAEf,IhBhCqB,YgBiCnB,OAAO,GAAP,GACK7H,EADL,CAEE6I,KAAK,GAAD,GAAO7I,EAAM2E,IAAIqH,EAAO1N,UAC5BuJ,UAAWmE,EAAO1N,UAEtB,IhB9B2B,kBgB+BzB,OAAO,GAAP,GACK0B,EADL,CAEE6I,KAAK,GAAD,GACC7I,EAAM6I,KADP,CAEFjG,SAAUoJ,EAAOpJ,SACjBtE,QAAS0N,EAAO1N,YAGtB,IhB7CuB,cgB8CrB,OAAO,GAAP,GACK0B,EADL,CAEE6I,KAAM,KACNhB,UAAW,OAEf,IhB3B6B,oBgB4B3B,OAAO,GAAP,GACK7H,EADL,CAEE2E,IAAI,GAAD,oBACE3E,EAAM2E,KADR,aAEEqH,EAAO1N,QAAQ4N,KAAK5H,KAAI,SAAA0G,GAAE,aACxBA,EADwB,CAE3B5I,KAAM4I,EAAGmB,WACT7N,QAAS0M,EAAGoB,OAASpB,EAAGqB,KAAO,KAC/BhO,KAAM2M,EAAGoB,OAAS,OAAS,iBAInC,IhB7D6B,oBgB8D3B,GAA4B,QAAxBJ,EAAO1N,QAAQD,KAAgB,CACjC,IAAI2D,EAAK,aAAOhC,EAAM2E,KACtB3C,EAAMC,SAAQ,SAAC+I,EAAI/H,EAAK0H,GAClBK,EAAGtC,SAAWsD,EAAO1N,QAAQoK,SAC/BiC,EAAI1H,GAAJ,MAAgB+H,EAAhB,CAAoB7L,GAAI6M,EAAO1N,QAAQa,SAG3C,IAAImN,EAAG,MAAQtM,EAAR,CAAe2E,IAAK3C,IAC3B,OAAOsK,EACF,OAAOtM,EAChB,IhB1EqB,YgB2EnB,IACIgC,EADAE,EAAI,MAAQlC,EAAM6I,KAAd,GAAuBmD,EAAO1N,SAYtC,OARwB,OAApB0B,EAAM6H,UACR7F,EAAK,uBAAOhC,EAAM2E,KAAb,CAAkBzC,KAGvBF,EAAK,aAAOhC,EAAM2E,MACZ3E,EAAM6H,WAAa3F,EAGpB,CAELyC,IAAK3C,EACL6G,KAAM,KACNhB,UAAW,MAGf,IhBpFqB,YgBqFnB,IAAIyE,EAAG,MAAQtM,GAEf,OADAsM,EAAI3H,IAAIqH,EAAO1N,SAAS6D,SAAU,EAC3BmK,EACT,IhBvFuB,cgBwFrB,IAAMC,EAAI,IAAI1F,KAAK,IAAI2F,MAAMR,EAAO1N,SAAU,CAAED,KAAM,eAClD2D,EAAK,aAAOhC,EAAM2E,KACtB3C,EAAMC,SAAQ,SAAA+I,GACRA,EAAG7L,KAAO6M,EAAO7M,KACnB6L,EAAG1M,QAAUiO,EACbvB,EAAG7I,SAAU,MAGjB,IAAImK,EAAG,MAAQtM,EAAR,CAAe2E,IAAK3C,IAO3B,OAHwB,OAApBhC,EAAM6H,WAAsB7H,EAAM6I,KAAK1J,KAAO6M,EAAO7M,KACvDmN,EAAIzD,KAAJ,MAAgByD,EAAIzD,KAApB,CAA0BvK,QAASiO,KAE9BD,EAET,QACE,OAAOtM,IC5FEyM,GArBK,WAAiC,IAAhCzM,EAA+B,uDAAvBnC,EAAYmO,EAAW,uCAClD,OAAQA,EAAO3N,MACb,IjBcwB,eiBbtB,OAAOR,EACT,IjBdkC,yBiBelC,IjBdiC,wBiBejC,IjBbqB,YiBcnB,OAAOH,EACT,IjBC2B,kBiBAzB,OAAOsO,EAAO1N,QAChB,IjBfuB,ciBgBrB,OAAOT,EACT,IjBE8B,qBiBD5B,OAAOmC,EAAMf,OAASrB,EAAYC,EAAaD,EACjD,IjBlBqB,YiBmBnB,OAAOA,EACT,QACE,OAAOoC,IClBE0M,GATW,WAA2B,IAA1B1M,EAAyB,uDAAjB,KAAMgM,EAAW,uCAClD,OAAQA,EAAO3N,MACb,IlBJ8B,qBkBK5B,OAAO2N,EAAO1N,QAChB,QACE,OAAO0B,I,8jBCHb,IAee2M,GAfa,WAAyB,IAAxB3M,EAAuB,uDAAf,GAAIgM,EAAW,uCAClD,OAAQA,EAAO3N,MACb,InBsBwB,emBrBtB,MAAO,GACT,InBO4B,mBmBN5B,InBOgC,uBmBN9B,OAAO,MACA2B,EADP,gBAEKgM,EAAO1N,QnBGc,qBmBHJ0N,EAAO3N,OAE/B,QACE,OAAO2B,I,8jBCZb,IAce4M,GAdiB,WAAyB,IAAxB5M,EAAuB,uDAAf,GAAIgM,EAAW,uCACtD,OAAQA,EAAO3N,MACb,IpBuBwB,eoBtBtB,MAAO,GACT,IpB0BoC,2BoBzBlC,OAAO,MACE2B,EADT,gBAEOgM,EAAO7M,IAAMa,EAAMgM,EAAO7M,MAEnC,QACE,OAAOa,ICAE6M,GAVK,WAAyB,IAAxB7M,EAAuB,uDAAf,GAAIgM,EAAW,uCAC1C,OAAQA,EAAO3N,MACb,IrBwB+B,sBqBvB/B,IrByB6B,oBqBxB3B,OAAO2N,EAAO1N,QAAQ4K,MAAQ,GAChC,QACE,OAAOlJ,ICEE8M,GATQ,WAAoC,IAAnC9M,EAAkC,uDAA1B,cAAegM,EAAW,uCACxD,OAAQA,EAAO3N,MACb,ItBwBwB,esBvBtB,OAAO2N,EAAO1N,QAChB,QACE,OAAO0B,ICCE+M,gBAAgB,CAC7B/K,MAAO+J,GACP9M,KAAMwN,GACNzO,WAAY0O,GACZnK,aAAcoK,GACd/H,iBAAkBgI,GAClB1D,KAAM2D,GACN9O,QAAS+O,K,SCJLE,GAAQC,aAAYC,GAAgBC,aAAgBC,OAE1DC,IAASzN,OACP,kBAAC,IAAD,CAAUoN,MAAOA,IACf,kBAAC,GAAD,OAEFzM,SAAS+M,eAAe,ST8GpB,kBAAmBrH,WACrBA,UAAUsH,cAAcC,MAAM1O,MAAK,SAAA2O,GACjCA,EAAaC,kB","file":"static/js/main.d0b40eb1.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const GOOGLE_USER_SIGNIN = 'GOOGLE_USER_SIGNIN';\n\nexport const CREATE_TEMP_AUDIO_RIFF = 'CREATE_TEMP_AUDIO_RIFF';\nexport const CREATE_TEMP_TEXT_RIFF = 'CREATE_TEMP_TEXT_RIFF';\n\nexport const EDIT_RIFF = 'EDIT_RIFF';\n\nexport const CANCEL_EDIT = 'CANCEL_EDIT';\nexport const SAVE_RIFF = 'SAVE_RIFF';\n\nexport const SAVE_RIFF_SUCCESS = 'SAVE_RIFF_SUCCESS';\nexport const SAVE_RIFF_FAILURE = 'SAVE_RIFF_FAILURE';\n\nexport const SAVE_TEMP_AUDIO = 'SAVE_TEMP_AUDIO';\n\nexport const SET_RIFF_PLAYING = 'SET_RIFF_PLAYING';\nexport const SET_RIFF_NOT_PLAYING = 'SET_RIFF_NOT_PLAYING';\n\nexport const LOAD_RIFF = 'LOAD_RIFF';\nexport const RIFF_LOADED = 'RIFF_LOADED';\n\nexport const SET_PLAYER_MODE = 'SET_PLAYER_MODE';\nexport const EDIT_MODE = 'EDIT_MODE';\nexport const EDIT_NEW_MODE = 'EDIT_NEW_MODE';\nexport const PLAY_MODE = 'PLAY_MODE';\nexport const PAUSE_MODE = 'PAUSE_MODE';\nexport const TOGGLE_PLAYER_MODE = 'TOGGLE_PLAYER_MODE';\n\nexport const SET_VIDEO_ID = 'SET_VIDEO_ID';\nexport const RECEIVE_NAME_UPDATE = 'RECEIVE_NAME_UPDATE';\n\nexport const RECEIVE_RIFF_LIST = 'RECEIVE_RIFF_LIST';\n\nexport const TOGGLE_VIEW_USERID_MUTED = 'TOGGLE_VIEW_USERID_MUTED';\n\nexport const RECEIVE_COLLABORATION_ID = 'RECEIVE_COLLABORATION_ID';\nexport const START_COLLABORATION_SUCCESS = 'START_COLLABORATION_SUCCESS';\nexport const START_COLLABORATION_FAILURE = 'START_COLLABORATION_FAILURE';\n\n/******* Used in View Interface */\n\nexport const toggleViewUserIdMuted = (uID) => ({\n  type: TOGGLE_VIEW_USERID_MUTED,\n  id: uID,\n});\n\n/****** Collaboration */\n\nexport const startCollaboration = googleUser => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    axios({\n      method: 'post',\n      url: `${baseURL}/collaboration/start`,\n      data: { token: googleUser.getAuthResponse().id_token }\n    }).then(res => {\n      dispatch({ type: START_COLLABORATION_SUCCESS, payload: res.data });\n    })\n    .catch(err => {\n      dispatch({ type: START_COLLABORATION_FAILURE, payload: err.response });\n    });;\n  };\n};\n\nexport const getCollaborationStatus = googleUser => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    axios({\n      method: 'post',\n      url: `${baseURL}/collaboration/status`,\n      data: { token: googleUser.getAuthResponse().id_token }\n    }).then(res => {\n      dispatch({ type: RECEIVE_COLLABORATION_ID, payload: res.data });\n    });\n  };\n};\n\nexport const joinCollaboration = (colID, googleUser) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    axios({\n      method: 'post',\n      url: `${baseURL}/collaboration/join`,\n      data:\n        {\n          token: googleUser.getAuthResponse().id_token,\n          collaboration_id: colID\n        }\n    }).then(res => {\n      dispatch({ type: RECEIVE_COLLABORATION_ID, payload: res.data });\n    });\n  };\n};\n\nexport const addCollaborator = (colID, googleUser) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    axios({\n      method: 'post',\n      url: `${baseURL}/collaboration/add`,\n      data:\n        {\n          token: googleUser.getAuthResponse().id_token,\n          collaborator_id: colID\n        }\n    }).then(res => {\n      dispatch({ type: RECEIVE_COLLABORATION_ID, payload: res.data });\n    });\n  };\n};\n\nexport const removeCollaborator = (colID, googleUser) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    axios({\n      method: 'post',\n      url: `${baseURL}/collaboration/remove`,\n      data:\n        {\n          token: googleUser.getAuthResponse().id_token,\n          collaborator_id: colID\n        }\n    }).then(res => {\n      dispatch({ type: RECEIVE_COLLABORATION_ID, payload: res.data });\n    });\n  };\n};\n\n/******** Editing Interface */\n\nexport const setRifferName = (newName, googleUser) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    axios({\n      method: 'post',\n      url: `${baseURL}/set-name`,\n      data: { token: googleUser.getAuthResponse().id_token, newName }\n    }).then(res => {\n      dispatch({ type: RECEIVE_NAME_UPDATE, payload: res.data });\n    });\n  };\n};\n\nexport const setVideoID = (videoID, googleUser) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    //console.log( \"get url\", `${baseURL}/get-riffs` );\n    dispatch({\n      type: SET_VIDEO_ID,\n      payload: videoID\n    });\n    if ( googleUser && googleUser.getAuthResponse )\n    {\n      axios({\n        method: 'post',\n        url: `${baseURL}/get-riffs`,\n        data: { token: googleUser.getAuthResponse().id_token, videoID }\n      }).then(res => {\n        dispatch({ type: RECEIVE_RIFF_LIST, payload: res.data });\n      });\n    }\n  };\n};\n\n// perhaps this action should somehow call the above action (setVideoID)?\nexport const setGoogleUser = (googleUser, videoID) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    //console.log( \"get url\", `${baseURL}/get-riffs` );\n    dispatch({\n      type: GOOGLE_USER_SIGNIN,\n      payload: googleUser\n    });\n    axios({\n      method: 'post',\n      url: `${baseURL}/get-riffs`,\n      data: { token: googleUser.getAuthResponse().id_token, videoID }\n    }).then(res => {\n      dispatch({ type: RECEIVE_RIFF_LIST, payload: res.data });\n    });\n  };\n};\n\nexport const getViewRiffs = (videoID) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    //console.log( \"get url\", `${baseURL}/get-riffs` );\n    /*dispatch({\n      type: null\n    });*/\n    axios({\n      method: 'post',\n      url: `${baseURL}/get-view-riffs`,\n      data: { videoID }\n    }).then(res => {\n      dispatch({ type: RECEIVE_RIFF_LIST, payload: res.data });\n    });\n  };\n};\n\nexport const setPlayerMode = mode => ({\n  type: SET_PLAYER_MODE,\n  payload: mode\n});\n\nexport const togglePlayerMode = mode => ({\n  type: TOGGLE_PLAYER_MODE\n});\n\n/*export const saveRiff = payload => ({\n  type: SAVE_RIFF,\n  payload\n});*/\n\nexport const saveTempAudio = (payload, duration) => ({\n  type: SAVE_TEMP_AUDIO,\n  payload,\n  duration\n});\n\nexport const editRiff = (payload, id, gus) => {\n  return dispatch => {\n    dispatch({\n      type: EDIT_RIFF,\n      payload\n    });\n    \n    // id is only passed when the audio riff needs loading\n    if (id) rawLoadAxios(dispatch, id, gus);\n  };\n};\n\nexport const cancelEdit = () => ({\n  type: CANCEL_EDIT\n});\n\nexport const saveRiff = (token, payload, riff) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    dispatch({ type: SAVE_RIFF, payload });\n\n    let fd = new FormData();\n    fd.append('token', token);\n    fd.append(riff.type === 'text' ? 'text' : 'blob', payload.payload);\n    fd.append('type', riff.type);\n    fd.append(\n      'duration',\n      riff.type === 'text' ? payload.duration : riff.duration\n    );\n    fd.append('start_time', payload.time);\n    fd.append('video_id', riff.video_id);\n    fd.append('tempId', riff.tempId);\n\n    // this may be null, and that's ok\n    fd.append('id', riff.id);\n\n    axios({\n      method: 'post',\n      url: `${baseURL}/save-riff`,\n      data: fd,\n      headers: { 'Content-Type': 'multipart/form-data' }\n    })\n      .then(res => {\n        // res.data.data\n        dispatch({ type: SAVE_RIFF_SUCCESS, payload: res.data });\n      })\n      .catch(err => {\n        dispatch({ type: SAVE_RIFF_FAILURE, payload: err.response });\n      });\n  };\n};\n\nexport const createTempRiff = (type, videoID) => ({\n  type: type === 'audio' ? CREATE_TEMP_AUDIO_RIFF : CREATE_TEMP_TEXT_RIFF,\n  videoID\n});\n\nexport const setRiffPlaying = (index, playing) => ({\n  type: playing ? SET_RIFF_PLAYING : SET_RIFF_NOT_PLAYING,\n  payload: index\n});\n\nexport const loadRiff = (id, guser) => {\n  return dispatch => {\n    rawLoadAxios(dispatch, id, guser);\n  };\n};\n\nconst rawLoadAxios = (dispatch, id, guser) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  axios({\n    method: 'post',\n    url: `${baseURL}/load-riff`,\n    responseType: 'arraybuffer',\n    data: { token: guser ? guser.getAuthResponse().id_token : null, id } // modified to make guser optional\n  }).then(res => {\n    dispatch({ type: RIFF_LOADED, payload: res.data, id });\n  });\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nclass AllowPlayback extends React.Component {\n    componentDidMount = () => {\n      (new Audio()).play().catch( () => alert( \"Need permission.\" ) );\n    };\n  \n    render = () => {\n      return null;\n    };\n  }\n  \n  const mapStateToProps = state => ({\n  });\n  \n  const mapDispatchToProps = {\n  };\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(AllowPlayback);\n  ","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  setPlayerMode,\n  setRiffPlaying,\n  loadRiff,\n  togglePlayerMode,\n  EDIT_MODE,\n  EDIT_NEW_MODE,\n  PLAY_MODE,\n  PAUSE_MODE\n} from '../../actions/index.js';\nimport AllowPlayback from './AllowPlayback.js';\n\n// based on https://stackoverflow.com/questions/54017100/how-to-integrate-youtube-iframe-api-in-reactjs-solution\n\nclass YouTubeVideo extends React.Component {\n  componentDidMount = () => {\n    // On mount, check to see if the API script is already loaded\n\n    if (!window.YT || !window.YT.Player) {\n      // If not, load the script asynchronously\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n\n      // onYouTubeIframeAPIReady will load the video after the script is loaded\n      window.onYouTubeIframeAPIReady = this.loadVideo;\n\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    } // If script is already there, load the video directly\n    else {\n      this.loadVideo();\n    }\n  };\n\n  loadVideo = () => {\n    const { id } = this.props;\n\n    if (window.rifftubePlayer) window.rifftubePlayer.destroy();\n\n    this.player = new window.YT.Player('rifftube-player', {\n      videoId: id,\n      height: 390,\n      width: 640,\n      playerVars: {\n        playsinline: 1 // allows it to play inline on iOS\n      },\n      events: {\n        onReady: this.onPlayerReady,\n        onStateChange: this.onPlayerStateChange\n      }\n    });\n\n    window.rifftubePlayer = this.player; // store global reference (used to get current playback time when needed)\n  };\n\n  onPlayerReady = event => {\n    //event.target.playVideo();\n  };\n\n  checkForRiffsToLoad = t => {\n    this.props.riffs.forEach(riff => {\n      if (\n        riff.type === 'audio' &&\n        !riff.payload &&\n        !riff.loading &&\n        riff.time >= t &&\n        riff.time < t + 10\n      )\n        this.props.loadRiff(riff.id, this.props.googleUser);\n    });\n  };\n\n  onPlayerStateChange = ({ data }) => {\n    /*\n        -1 (unstarted)\n        0 (ended)\n        1 (playing)\n        2 (paused)\n        3 (buffering)\n        5 (video cued).\n        */\n\n    // the following conditional leaves out some 'else's that should never occur\n\n    if (data === 1) {\n      // playing\n\n      // the following code is\n      // needed I think... for pausing during a riff.\n      // so that (subsiquent) 'zombie' riffs can be killed,\n      // I think.\n      this.curRiff = this.props.riffsPlaying;\n\n      /*******************************************************/\n      // this timer is responsible for showing and hiding riffs\n      this.riffInterval = setInterval(() => {\n        //console.log( \"interval\", this.curRiff, this.props.riffsPlaying );\n\n        let t = window.rifftubePlayer.getCurrentTime();\n\n        this.checkForRiffsToLoad(t);\n\n        // first stop any zombie riffs\n        this.props.riffs.forEach((riff, index) => {\n          if (\n            this.curRiff[index] &&\n            (t < riff.time || t > riff.time + riff.duration)\n          ) {\n            this.props.setRiffPlaying(index, false);\n            this.curRiff[index] = false;\n            //document.querySelector( '#riff-content' ).innerHTML = '';\n\n            if (riff.type === 'audio')\n              // make sure all audio clips have stopped\n              this.audLock--;\n              if ( !this.audLock )\n              {\n                window.rifftubePlayer.setVolume(this.vol ? this.vol : 100); // hopefully unnecessary volume failsafe\n                delete this.vol;\n              }\n          }\n        });\n\n        var riffMuted = ind => this.props.mutedIDs[ this.props.riffs[ind].user_id ];\n\n        // next start any that should be playing\n        this.props.riffs.forEach((riff, index) => {\n          // the riff will start playing within half a second, or will be skipped\n          if ( !riffMuted(index) && !this.curRiff[index] && t > riff.time && t < riff.time + 0.5 ) {\n\n            this.props.setRiffPlaying(index, true);\n            this.curRiff[index] = true;\n\n            if (riff.type === 'audio') {\n              if ( !this.vol )\n              {\n                this.vol = window.rifftubePlayer.getVolume();\n                window.rifftubePlayer.setVolume(this.vol * 0.5);\n              }\n\n              // keeps track of how many audio tracks need to end before volume should be restored\n              if ( !this.audLock )\n                this.audLock = 1;\n              else\n                this.audLock++;\n\n              let audio = new Audio(); // should be identical behavior to: document.createElement('audio');\n              audio.controls = false;\n              if (!riff.payload) return; // DEBUG - SHOULD BE REMOVED\n              var audioURL = URL.createObjectURL(riff.payload);\n              audio.src = audioURL;\n              audio.play();\n            }\n          }\n        });\n      }, 100); // 100/1000 = 1/10 s\n\n      if (this.props.mode !== PLAY_MODE) {\n        // change mode state\n        this.props.setPlayerMode(PLAY_MODE);\n      }\n    } // not playing\n    else {\n      // stop riff-check interval when not playing\n      clearInterval(this.riffInterval);\n\n      if (this.props.mode === PLAY_MODE) {\n        // change mode state\n        this.props.setPlayerMode(PAUSE_MODE);\n      }\n    }\n  };\n\n  componentDidUpdate = prevProps => {\n    //console.log( \"youtube vid component upate\" );\n\n    this.checkForRiffsToLoad(0); // check if any riffs at < 10s in need loading\n\n    if (this.props.id !== prevProps.id) this.loadVideo();\n\n    if (this.props.mode !== prevProps.mode) {\n      if (\n        (this.props.mode === EDIT_MODE ||\n          this.props.mode === EDIT_NEW_MODE ||\n          this.props.mode === PAUSE_MODE) &&\n        this.player.getPlayerState() === 1\n      ) {\n        this.player.pauseVideo();\n      } else if (\n        this.props.mode === PLAY_MODE &&\n        this.player.getPlayerState() !== 1\n      ) {\n        this.player.playVideo();\n      }\n    }\n  };\n\n  render = () => {\n    return (\n      <React.Fragment>\n        <AllowPlayback />\n        <div className=\"rifftube-container\">\n          <div className=\"rifftube-overlay\">\n            <div className=\"rifftube-riffs-container\">\n              {Object.keys(this.props.riffsPlaying)\n                .filter(i => this.props.riffsPlaying[i] && this.props.riffs[i].type === 'text')\n                .map(key => (\n                  <div key={this.props.riffs[key].id} className=\"rifftube-textriff\">\n                    {this.props.riffs[key].payload}\n                  </div>\n                ))}\n            </div>\n          </div>\n          <div id=\"rifftube-player\" />\n        </div>\n      </React.Fragment>\n    );\n  };\n}\n\nconst mapStateToProps = state => ({\n  mode: state.mode,\n  riffs: state.riffs.all,\n  riffsPlaying: state.riffsPlaying,\n  googleUser: state.googleUser,\n  mutedIDs: state.viewMutedUserIDs\n});\n\nconst mapDispatchToProps = {\n  setPlayerMode,\n  setRiffPlaying,\n  togglePlayerMode,\n  loadRiff\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(YouTubeVideo);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { GoogleLogin } from 'react-google-login-component';\nimport { setGoogleUser } from '../../actions/index.js';\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <GoogleLogin\n        socialId=\"941154439836-s6iglcrdckcj6od74kssqsom58j96hd8.apps.googleusercontent.com\"\n        className=\"google-login\"\n        scope=\"profile email\"\n        fetchBasicProfile={false}\n        responseHandler={gus => {\n          this.props.setGoogleUser(gus, this.props.videoID);\n        }}\n        buttonText=\"Login With Google\"\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  videoID: state.videoID\n});\n\nconst mapDispatchToProps = {\n  setGoogleUser\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { editRiff } from '../../actions/index.js';\n\n/* this component is where a user can edit their riff */\nfunction RiffDetail(props) {\n  return (\n    <div className={`riff-detail${ props.selected ? ' riff-detail-selected' : '' }`}>\n      <div>\n        <ul className=\"riff-detail-list\">\n          <li>\n            start time: { props.time.toFixed ? props.time.toFixed(2) : null }\n          </li>\n          <li>duration: {props.duration.toFixed(2)}</li>\n          <li>type: {props.type}</li>\n          <li>No. {props.id}</li>\n        </ul>\n        <button\n          onClick={() =>\n            props.editRiff(\n              props.index,\n              props.type === 'audio' && !props.payload ? props.id : null,\n              props.googleUser\n            )\n          }\n        >\n          Edit\n        </button>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  editRiff\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RiffDetail);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport RiffDetail from './RiffDetail.js';\n\n/* this component maps over all of the user's riffs for this video */\nfunction RiffList(props) {\n  console.log('display', props.riffs);\n  return (\n    <div className=\"list-of-riffs\">\n      {props.riffs\n        ? props.riffs.sort( (e1,e2) => (e1.time - e2.time) ).map((riff, index) => (\n            <RiffDetail\n              key={riff.id}\n              {...riff}\n              index={index}\n              selected={props.riffsPlaying[index] === true}\n            />\n          ))\n        : null}\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  riffs: state.riffs.all,\n  riffsPlaying: state.riffsPlaying\n});\n\nexport default connect(mapStateToProps, null)(RiffList);\n","import React from 'react';\n\nclass Record extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      mediaRecorder: null,\n      recordingState: false\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.mediaDevices) {\n      navigator.mediaDevices\n        .getUserMedia({ audio: true })\n        .then(stream => {\n          const mr = new MediaRecorder(stream);\n\n          mr.ondataavailable = e => {\n            this.chunks.push(e.data);\n          };\n\n          mr.onstop = e => {\n            var blob = new Blob(this.chunks, { type: 'audio/webm' }); // was 'audio/webm;codecs=opus'\n            this.props.saveTempAudio(blob, this.duration);\n          };\n\n          this.setState({ mediaRecorder: mr });\n        })\n        .catch(err => console.log('Error', err));\n    }\n  }\n\n  render() {\n    var ret; // var for the value to be returned\n\n    if (navigator.mediaDevices && this.state.mediaRecorder) {\n      if (!this.state.recordingState) {\n        ret = (\n          <button\n            id=\"recordBtn\"\n            onClick={() => {\n              this.setState({ recordingState: true });\n              this.chunks = [];\n              this.startTime = Date.now();\n              this.state.mediaRecorder.start();\n            }}\n          >\n            record\n          </button>\n        );\n      } else {\n        ret = (\n          <button\n            id=\"stopBtn\"\n            onClick={() => {\n              this.setState({ recordingState: false });\n              this.duration = (Date.now() - this.startTime) / 1000;\n              this.state.mediaRecorder.stop();\n            }}\n          >\n            stop\n          </button>\n        );\n      }\n    } else if (navigator.mediaDevices && !this.state.mediaRecorder)\n      ret = <span>mediaRecorder failed to initialize</span>;\n    else ret = <span>navigator.mediaDevices not supported. sorry.</span>;\n\n    return ret;\n  }\n}\n\nexport default Record;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Record from './Record.js';\nimport {\n  saveRiff,\n  setPlayerMode,\n  saveTempAudio,\n  cancelEdit,\n  EDIT_MODE\n} from '../../actions/index.js';\n\nclass EditRiff extends React.Component {\n\n  constructor(props)\n  {\n    super(props);\n    this.durationField = React.createRef();\n    this.htmlPayloadField = React.createRef();\n    this.startTimeField = React.createRef();\n  }\n\n  render() {\n    console.log('ed rif red');\n    return (\n      <div className=\"edit-riff\">\n        <div className=\"edit-riff-inner\">\n          {this.props.tempRiff.type === 'audio' ? (\n            <React.Fragment>\n              {this.props.mode === EDIT_MODE && this.props.editIndex && !this.props.tempRiff.payload ? (\n                <span>Loading...</span>\n              ) : null}\n              <Record saveTempAudio={this.props.saveTempAudio} />\n              {this.props.tempRiff.payload ? (\n                <button\n                  onClick={() => {\n                    var audio = document.createElement('audio');\n                    audio.controls = false;\n                    var audioURL = URL.createObjectURL(\n                      this.props.tempRiff.payload\n                    );\n                    audio.src = audioURL;\n                    audio.play();\n                  }}\n                >\n                  Play\n                </button>\n              ) : null}\n              <br />\n              <div>\n                Start:{' '}\n                <input\n                  id=\"riff-start-field\"\n                  defaultValue={this.props.tempRiff.time}\n                  ref={this.startTimeField}\n                />\n              </div>\n              <button\n                disabled={!this.props.tempRiff.payload}\n                onClick={() => {\n                  this.props.saveRiff(\n                    this.props.googleUser.getAuthResponse().id_token,\n                    {\n                      payload: this.props.tempRiff.payload,\n                      time: Number(this.startTimeField.current.value)\n                    },\n                    this.props.tempRiff\n                  );\n                }}\n              >\n                Save\n              </button>\n            </React.Fragment>\n          ) : (\n            <React.Fragment>\n              <div>HTML payload:</div>\n              <textarea id=\"riff-edit-field\" ref={this.htmlPayloadField} defaultValue={this.props.tempRiff.payload} />\n\n              <div>\n                Duration:{' '}\n                <input\n                  id=\"riff-duration-field\"\n                  defaultValue={this.props.tempRiff.duration || 2}\n                  ref={this.durationField}\n                />\n              </div>\n              <div>\n                Start:{' '}\n                <input\n                  id=\"riff-start-field\"\n                  defaultValue={this.props.tempRiff.time}\n                  ref={this.startTimeField}\n                />\n              </div>\n              <button\n                onClick={() => {\n                  this.props.saveRiff(\n                    this.props.googleUser.getAuthResponse().id_token,\n                    {\n                      payload: this.htmlPayloadField.current.value,\n                      duration: Number(\n                        this.durationField.current.value\n                      ),\n                      time: Number(this.startTimeField.current.value)\n                    },\n                    this.props.tempRiff\n                  );\n                }}\n              >\n                Save\n              </button>\n            </React.Fragment>\n          )}\n\n          <button\n            onClick={() => {\n              this.props.cancelEdit();\n            }}\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  mode: state.mode,\n  tempRiff: state.riffs.temp,\n  editIndex: state.riffs.editIndex,\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  setPlayerMode,\n  saveRiff,\n  saveTempAudio,\n  cancelEdit\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditRiff);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createTempRiff } from '../../actions/index.js';\n\nclass RiffButton extends React.Component {\n  render() {\n    return (\n      <button onClick={() => { this.props.createTempRiff(this.props.type, this.props.videoID); }}>\n        {this.props.type}\n      </button>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  videoID: state.videoID\n});\n\nconst mapDispatchToProps = {\n  createTempRiff\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RiffButton);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nclass Collaboration extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = { open: false };\n    }\n    \n    render()\n    {\n        return (\n            <React.Fragment>\n                <button onClick={ () => this.setState( { open: ! this.state.open } ) }>\n                    Collaboration Panel\n                </button>\n\n                {\n                    this.state.open\n                    ?\n                        <div>\n                            open!\n                        </div>\n                    :\n                        null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    videoID: state.videoID,\n    googleUser: state.googleUser,\n    name: state.name\n  });\n  \n  const mapDispatchToProps = {\n  };\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(Collaboration);\n  ","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport RiffList from './RiffList.js';\nimport EditRiff from './EditRiff.js';\nimport RiffButton from './RiffButton.js';\nimport Collaboration from './Collaboration';\nimport { setRifferName } from '../../actions'; // this and below are the same file\nimport { EDIT_MODE, EDIT_NEW_MODE } from '../../actions/index.js';\n\n/*This component houses all of the riff buttons and the rifflist*/\nfunction EditControls(props) {\n  return (\n    <div className=\"control-panel\">\n      {\n        // make this into a component?:\n        props.name\n        ?\n          <div>\n            Riffer Name:&nbsp;\n            {\n              props.name\n            }\n            <button\n              type=\"button\"\n              onClick={ () => {\n                var n = prompt(\"Enter name\", props.name);\n                if ( n )\n                  props.setRifferName( n, props.googleUser );\n              } }\n            >\n              Update Name\n            </button>\n          </div>\n        :\n          null\n      }\n\n      <Collaboration />\n\n      <div>\n        <h2 className=\"add-riff-title\">Add New Riff</h2>\n        <RiffButton type=\"audio\" />\n        <RiffButton type=\"text\" />\n\n        {props.mode === EDIT_MODE || props.mode === EDIT_NEW_MODE ? (\n          <EditRiff />\n        ) : null}\n      </div>\n      <h2 className=\"riff-list-title\">Control Panel</h2>\n      <RiffList />\n    </div>\n  );\n}\n\nlet mapStateToProps = state => ({\n  mode: state.mode,\n  name: state.name,\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  setRifferName\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditControls);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Route } from 'react-router-dom';\nimport YouTubeVideo from '../YouTubeVideo/YouTubeVideo';\nimport Login from '../Login/Login';\nimport EditControls from './EditControls';\nimport { setVideoID } from '../../actions';\n\nclass EditInterface extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoIDRef = React.createRef();\n  }\n\n  loggedIn = () => {\n    if (this.props.googleUser) return this.props.googleUser.isSignedIn();\n\n    return false;\n  };\n\n  authCheck = (Component, DefaultComponent) => {\n    return this.loggedIn() ? <Component /> : <DefaultComponent />;\n  };\n  /* extracts the youtube id from a url. got help from: https://ctrlq.org/code/19797-regex-youtube-id */\n  extractVideoID = url => {\n    var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#\\&\\?]*).*/;\n    var match = url.match(regExp);\n    if (match && match[7].length === 11) {\n      return match[7];\n    } else {\n      return url; // if extraction fails, fallback on assuming they gave an ID\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"youtube-section\">\n          <div className=\"top-section\">\n            <div className=\"title-and-url\">\n              <h1>RiffTube</h1>\n            </div>\n          </div>\n          <form\n            onSubmit={e => {\n              this.props.setVideoID(\n                this.extractVideoID(this.videoIDRef.current.value),\n                this.props.googleUser\n              );\n              e.preventDefault();\n            }}\n          >\n            <label>YouTube URL/ID:&nbsp;&nbsp;</label>\n            <input\n              type=\"text\"\n              defaultValue={this.props.videoID}\n              ref={this.videoIDRef}\n            />\n            <button type=\"submit\">Change Video</button>\n          </form>\n\n          <YouTubeVideo id={this.props.videoID} />\n\n          <div>\n            <a href={'/view/' + this.props.videoID} target=\"_blank\">\n              View video\n            </a>\n          </div>\n        </div>\n        <Route\n          exact\n          path=\"/\"\n          render={this.authCheck.bind(this, EditControls, Login)}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  videoID: state.videoID,\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  setVideoID\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditInterface);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { toggleViewUserIdMuted } from '../../actions';\n\nclass AuthorSelector extends React.Component\n{\n    renderNames()\n    {\n        var names = [];\n        const containsReducer = id => (ac, cur) => cur.id === id ? ac || true : ac || false;\n        const includes = ( arr, id ) => arr.reduce( containsReducer( id ), false );\n\n        this.props.riffs.forEach( el =>\n            {\n                console.log( \"name\", el.name, includes( names, el.user_id ) );\n                if ( ! includes( names, el.user_id ) )\n                    names.push( { name: el.name, id: el.user_id } );\n            });\n        return names.map( el => (\n            <div key={el.id} onClick={ () => this.props.toggleViewUserIdMuted( el.id ) } style={ { backgroundColor: this.props.mutedIDs[el.id] ? 'gray' : 'blue' } }>\n                { el.name }\n            </div>\n        ));\n    }\n    \n    render()\n    {\n        return (\n            <div>\n                {\n                    this.renderNames()\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    riffs: state.riffs.all,\n    mutedIDs: state.viewMutedUserIDs\n  });\n  \n  const mapDispatchToProps = {\n    toggleViewUserIdMuted\n  };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthorSelector);","import React from 'react';\nimport { connect } from 'react-redux';\nimport YouTubeVideo from '../YouTubeVideo/YouTubeVideo';\nimport AuthorSelector from './AuthorSelector';\nimport { setVideoID, getViewRiffs } from '../../actions';\n\nclass ViewInterface extends React.Component {\n    componentDidMount = () =>\n    {\n        this.props.setVideoID( this.props.match.params.videoID );\n\n        this.props.getViewRiffs( this.props.match.params.videoID );\n    };\n\n    render = () =>\n    {\n        return (\n            <div>\n                <h1>View {this.props.match.params.videoID}</h1>\n                <YouTubeVideo id={this.props.match.params.videoID} />\n                <AuthorSelector />\n            </div>\n        );\n    }\n}\n\n/*const mapStateToProps = state => ({\n  });*/\n  \n  const mapDispatchToProps = {\n    setVideoID,\n    getViewRiffs\n  };\n\nexport default connect(null, mapDispatchToProps)(ViewInterface);","import React from 'react';\nimport EditInterface from './components/RiffControls/EditInterface';\nimport ViewInterface from './components/ViewInterface/ViewInterface';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"main-section\">\n            <Route exact path=\"/\" component={EditInterface} />\n            <Route path=\"/view/:videoID\" component={ViewInterface} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  SET_VIDEO_ID,\n  SAVE_RIFF,\n  CREATE_TEMP_AUDIO_RIFF,\n  CREATE_TEMP_TEXT_RIFF,\n  SAVE_TEMP_AUDIO,\n  CANCEL_EDIT,\n  EDIT_RIFF,\n  LOAD_RIFF,\n  RIFF_LOADED,\n  RECEIVE_RIFF_LIST,\n  SAVE_RIFF_SUCCESS\n} from '../actions/index.js';\n\nlet initialState = {\n  all: [],\n  temp: null,\n  editIndex: null\n};\n\nconst riffsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_VIDEO_ID:\n      return initialState;\n    case CREATE_TEMP_AUDIO_RIFF:\n    case CREATE_TEMP_TEXT_RIFF:\n      return {\n        ...state,\n        temp: {\n          ...state.temp,\n          type: action.type === CREATE_TEMP_AUDIO_RIFF ? 'audio' : 'text',\n          // @ts-ignore\n          // rifftubePlayer isn't normally on the window object so this throws an error but it works.\n          time: window.rifftubePlayer.getCurrentTime(),\n          video_id: action.videoID,\n          tempId: new Date().getUTCMilliseconds() // used to get perm id from server\n        },\n        editIndex: null\n      };\n    case EDIT_RIFF:\n      return {\n        ...state,\n        temp: { ...state.all[action.payload] }, // copy specified riff to tempRiff\n        editIndex: action.payload\n      };\n    case SAVE_TEMP_AUDIO:\n      return {\n        ...state,\n        temp: {\n          ...state.temp,\n          duration: action.duration,\n          payload: action.payload\n        }\n      };\n    case CANCEL_EDIT:\n      return {\n        ...state,\n        temp: null,\n        editIndex: null\n      };\n    case RECEIVE_RIFF_LIST:\n      return {\n        ...state,\n        all: [\n          ...state.all,\n          ...action.payload.body.map(el => ({\n            ...el,\n            time: el.start_time,\n            payload: el.isText ? el.text : null,\n            type: el.isText ? 'text' : 'audio'\n          }))\n        ]\n      };\n    case SAVE_RIFF_SUCCESS:\n      if (action.payload.type === 'add') {\n        let riffs = [...state.all];\n        riffs.forEach((el, ind, arr) => {\n          if (el.tempId === action.payload.tempId)\n            arr[ind] = { ...el, id: action.payload.id };\n          //el.id = action.payload.id;\n        });\n        let ret = { ...state, all: riffs };\n        return ret;\n      } else return state;\n    case SAVE_RIFF: {\n      let riff = { ...state.temp, ...action.payload };\n      let riffs;\n\n      // adding a new riff:\n      if (state.editIndex === null)\n        riffs = [...state.all, riff];\n      // EDIT_MODE (existing riff):\n      else {\n        riffs = [...state.all];\n        riffs[state.editIndex] = riff;\n      }\n\n      return {\n//        ...state, // not needed because the state is fully specified\n        all: riffs,\n        temp: null,\n        editIndex: null\n      };\n    }\n    case LOAD_RIFF:\n      let ret = { ...state }; // will this work?\n      ret.all[action.payload].loading = true;\n      return ret;\n    case RIFF_LOADED: {\n      const b = new Blob(new Array(action.payload), { type: 'audio/webm' });\n      let riffs = [...state.all];\n      riffs.forEach(el => {\n        if (el.id === action.id) {\n          el.payload = b;\n          el.loading = false;\n        }\n      });\n      let ret = { ...state, all: riffs };\n\n      // if this is being edited currently, tempRiff needs to be updated as well\n      // editIndex != null simply means that something is being edited\n      if (state.editIndex !== null && state.temp.id === action.id)\n        ret.temp = { ...ret.temp, payload: b };\n\n      return ret;\n    }\n    default:\n      return state;\n  }\n};\n\nexport default riffsReducer;","import {\n  SET_VIDEO_ID,\n  CREATE_TEMP_AUDIO_RIFF,\n  CREATE_TEMP_TEXT_RIFF,\n  EDIT_RIFF,\n  EDIT_MODE,\n  CANCEL_EDIT,\n  SAVE_RIFF,\n  SET_PLAYER_MODE,\n  PLAY_MODE,\n  PAUSE_MODE,\n  TOGGLE_PLAYER_MODE\n} from '../actions/index.js';\n\nconst modeReducer = (state = PAUSE_MODE, action) => {\n  switch (action.type) {\n    case SET_VIDEO_ID:\n      return PAUSE_MODE;\n    case CREATE_TEMP_AUDIO_RIFF:\n    case CREATE_TEMP_TEXT_RIFF:\n    case EDIT_RIFF:\n      return EDIT_MODE;\n    case SET_PLAYER_MODE:\n      return action.payload;\n    case CANCEL_EDIT:\n      return PAUSE_MODE;\n    case TOGGLE_PLAYER_MODE: // not needed at the moment\n      return state.mode === PLAY_MODE ? PAUSE_MODE : PLAY_MODE;\n    case SAVE_RIFF:\n      return PLAY_MODE; // should be an option\n    default:\n      return state;\n  }\n};\n\nexport default modeReducer;","import {\n  GOOGLE_USER_SIGNIN\n} from '../actions/index.js';\n\nconst googleUserReducer = (state = null, action) => {\n  switch (action.type) {\n    case GOOGLE_USER_SIGNIN:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default googleUserReducer;","import {\n  SET_VIDEO_ID,\n  SET_RIFF_NOT_PLAYING,\n  SET_RIFF_PLAYING\n} from '../actions/index.js';\n\nconst riffsPlayingReducer = (state = {}, action) => {\n  switch (action.type) {\n    case SET_VIDEO_ID:\n      return {};\n    case SET_RIFF_PLAYING:\n    case SET_RIFF_NOT_PLAYING:\n      return {\n          ...state,\n          [action.payload]: action.type === SET_RIFF_PLAYING ? true : false\n        };\n    default:\n      return state;\n  }\n}\n\nexport default riffsPlayingReducer;","import {\n  SET_VIDEO_ID,\n  TOGGLE_VIEW_USERID_MUTED\n} from '../actions/index.js';\n\nconst viewMutedUserIDsReducer = (state = {}, action) => {\n  switch (action.type) {\n    case SET_VIDEO_ID:\n      return {};\n    case TOGGLE_VIEW_USERID_MUTED:\n      return {\n            ...state,\n            [action.id]: !state[action.id]\n        };\n    default:\n      return state;\n  }\n};\n\nexport default viewMutedUserIDsReducer;","import {\n  RECEIVE_RIFF_LIST,\n  RECEIVE_NAME_UPDATE\n} from '../actions/index.js';\n\nconst nameReducer = (state = \"\", action) => {\n  switch (action.type) {\n    case RECEIVE_NAME_UPDATE:\n    case RECEIVE_RIFF_LIST:\n      return action.payload.name || \"\"; // hacky but added because no name is returned for view riffs\n    default:\n      return state;\n  }\n};\n\nexport default nameReducer;","import {\n  SET_VIDEO_ID\n} from '../actions/index.js';\n\nconst videoIDReducer = (state = \"Oqaz7U37hrE\", action) => {\n  switch (action.type) {\n    case SET_VIDEO_ID:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default videoIDReducer;","import { combineReducers } from 'redux';\n\nimport riffsReducer from './riffs-reducer';\nimport modeReducer from './mode-reducer';\nimport googleUserReducer from './googleUser-reducer';\nimport riffsPlayingReducer from './riffsPlaying-reducer';\nimport viewMutedUserIDsReducer from './viewMutedUserIDs-reducer';\nimport nameReducer from './name-reducer';\nimport videoIDReducer from './videoID-reducer';\n\nexport default combineReducers({\n  riffs: riffsReducer,\n  mode: modeReducer,\n  googleUser: googleUserReducer,\n  riffsPlaying: riffsPlayingReducer,\n  viewMutedUserIDs: viewMutedUserIDsReducer,\n  name: nameReducer,\n  videoID: videoIDReducer\n});\n\n\n\n/*\n\nimport {\n  SET_VIDEO_ID,\n  GOOGLE_USER_SIGNIN,\n  SAVE_RIFF,\n  CREATE_TEMP_AUDIO_RIFF,\n  CREATE_TEMP_TEXT_RIFF,\n  SET_PLAYER_MODE,\n  SAVE_TEMP_AUDIO,\n  CANCEL_EDIT,\n  EDIT_RIFF,\n  SET_RIFF_NOT_PLAYING,\n  SET_RIFF_PLAYING,\n  LOAD_RIFF,\n  RIFF_LOADED,\n  EDIT_MODE,\n  EDIT_NEW_MODE,\n  PLAY_MODE,\n  PAUSE_MODE,\n  TOGGLE_PLAYER_MODE,\n  RECEIVE_RIFF_LIST,\n  SAVE_RIFF_SUCCESS,\n  TOGGLE_VIEW_USERID_MUTED,\n  RECEIVE_NAME_UPDATE\n} from '../actions/index.js';\n\nlet initialState = {\n  videoID: 'lYIRO97dhII',\n  googleUser: null,\n  riffs: [],\n  tempRiff: null,\n  mode: PAUSE_MODE,\n  riffsPlaying: {},\n  viewMutedUserIDs: {}\n};\n\nexport const riffReducer = (state = [], action) => {\n  console.log('dispatch', state, action);\n  switch (action.type) {\n    case SET_VIDEO_ID:\n      return {\n        videoID: action.payload,\n        googleUser: state.googleUser,\n        riffs: [],\n        tempRiff: null,\n        mode: PAUSE_MODE,\n        riffsPlaying: {},\n        viewMutedUserIDs: {}\n      };\n    case TOGGLE_VIEW_USERID_MUTED:\n      return {\n        ...state,\n        viewMutedUserIDs: {\n          ...state.viewMutedUserIDs,\n          [action.id]: !state.viewMutedUserIDs[action.id]\n        }\n      };\n    case GOOGLE_USER_SIGNIN:\n      return {\n        ...state,\n        googleUser: action.payload\n      };\n    case CREATE_TEMP_AUDIO_RIFF:\n    case CREATE_TEMP_TEXT_RIFF:\n      return {\n        ...state,\n        tempRiff: {\n          type: action.type === CREATE_TEMP_AUDIO_RIFF ? 'audio' : 'text',\n          // @ts-ignore\n          // rifftubePlayer isn't normally on the window object so this throws an error but it works.\n          time: window.rifftubePlayer.getCurrentTime(),\n          video_id: state.videoID,\n          tempId: new Date().getUTCMilliseconds() // used to get perm id from server\n        },\n        mode: EDIT_NEW_MODE\n      };\n\n    case EDIT_RIFF:\n      return {\n        ...state,\n        tempRiff: { ...state.riffs[action.payload] }, // copy specified riff to tempRiff\n        editIndex: action.payload,\n        mode: EDIT_MODE\n      };\n    case SET_PLAYER_MODE:\n      return {\n        ...state,\n        mode: action.payload\n      };\n    case SAVE_TEMP_AUDIO:\n      return {\n        ...state,\n        tempRiff: {\n          ...state.tempRiff,\n          duration: action.duration,\n          payload: action.payload\n        }\n      };\n    case CANCEL_EDIT:\n      return {\n        ...state,\n        tempRiff: null,\n        editIndex: null,\n        mode: PAUSE_MODE\n      };\n    case SET_RIFF_PLAYING: // this and next one could be combined\n      return {\n        ...state,\n        riffsPlaying: {\n          ...state.riffsPlaying,\n          [action.payload]: true\n        }\n      };\n    case SET_RIFF_NOT_PLAYING:\n      return {\n        ...state,\n        riffsPlaying: {\n          ...state.riffsPlaying,\n          [action.payload]: false\n        }\n      };\n    case TOGGLE_PLAYER_MODE: // not needed at the moment\n      return {\n        ...state,\n        mode: state.mode === PLAY_MODE ? PAUSE_MODE : PLAY_MODE\n      };\n    case RECEIVE_NAME_UPDATE:\n      return {\n        ...state,\n        name: action.payload.name\n      };\n    case RECEIVE_RIFF_LIST:\n      return {\n        ...state,\n        name: action.payload.name,\n        riffs: [\n          ...state.riffs,\n          ...action.payload.body.map(el => ({\n            ...el,\n            time: el.start_time,\n            payload: el.isText ? el.text : null,\n            type: el.isText ? 'text' : 'audio'\n          }))\n        ]\n      };\n    case SAVE_RIFF_SUCCESS:\n      if (action.payload.type === 'add') {\n        let riffs = [...state.riffs];\n        riffs.forEach((el, ind, arr) => {\n          if (el.tempId === action.payload.tempId)\n            arr[ind] = { ...el, id: action.payload.id };\n          //el.id = action.payload.id;\n        });\n        let ret = { ...state, riffs };\n        return ret;\n      } else return state;\n    case SAVE_RIFF: {\n      let riff = { ...state.tempRiff, ...action.payload };\n      let riffs;\n      // editing a new riff:\n      if (state.mode === EDIT_NEW_MODE) riffs = [...state.riffs, riff];\n      // EDIT_MODE (existing riff):\n      else {\n        riffs = [...state.riffs];\n        riffs[state.editIndex] = riff;\n      }\n\n      return {\n        ...state,\n        riffs,\n        tempRiff: null,\n        mode: PLAY_MODE // should be an option\n      };\n    }\n    case LOAD_RIFF:\n      let ret = { ...state }; // will this work?\n      ret.riffs[action.payload].loading = true;\n      return ret;\n    case RIFF_LOADED: {\n      const b = new Blob(new Array(action.payload), { type: 'audio/webm' });\n      let riffs = [...state.riffs];\n      riffs.forEach(el => {\n        if (el.id === action.id) {\n          el.payload = b;\n          el.loading = false;\n        }\n      });\n      let ret = { ...state, riffs };\n\n      // if this is being edited currently, tempRiff needs to be updated as well\n      if (state.mode === EDIT_MODE && state.tempRiff.id === action.id)\n        ret.tempRiff = { ...ret.tempRiff, payload: b };\n\n      return ret;\n    }\n    default:\n      return state;\n  }\n};\n\n\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport defaultReducer from './reducers';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\n\nimport thunkMiddleware from 'redux-thunk';\n\nconst store = createStore(defaultReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}