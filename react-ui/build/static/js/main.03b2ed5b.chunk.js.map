{"version":3,"sources":["actions/index.js","components/YouTubeVideo/YouTubeVideo.js","components/Login/Login.js","components/RiffControls/RiffDetail.js","components/RiffControls/RiffList.js","components/RiffControls/Record.js","components/RiffControls/EditRiff.js","components/RiffControls/RiffButton.js","components/RiffControls/Collaboration.js","components/RiffControls/EditControls.js","components/RiffControls/EditInterface.js","components/ViewInterface/AuthorSelector.js","components/ViewInterface/ViewInterface.js","App.js","serviceWorker.js","reducers/riffs-reducer.js","reducers/mode-reducer.js","reducers/googleUser-reducer.js","reducers/riffsPlaying-reducer.js","reducers/viewMutedUserIDs-reducer.js","reducers/name-reducer.js","reducers/videoID-reducer.js","reducers/index.js","index.js"],"names":["EDIT_MODE","EDIT_NEW_MODE","PLAY_MODE","PAUSE_MODE","setVideoID","videoID","googleUser","baseURL","process","REACT_APP_BASE_URL","dispatch","type","payload","getAuthResponse","axios","method","url","data","token","id_token","then","res","setPlayerMode","mode","rawLoadAxios","id","guser","responseType","YouTubeVideo","componentDidMount","window","YT","Player","loadVideo","tag","document","createElement","src","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","props","rifftubePlayer","destroy","player","videoId","height","width","playerVars","playsinline","events","onReady","onPlayerReady","onStateChange","onPlayerStateChange","event","checkForRiffsToLoad","t","riffs","forEach","riff","loading","time","loadRiff","curRiff","riffsPlaying","riffInterval","setInterval","getCurrentTime","index","duration","setRiffPlaying","audLock","setVolume","vol","ind","mutedIDs","user_id","getVolume","audio","controls","audioURL","URL","createObjectURL","play","clearInterval","componentDidUpdate","prevProps","getPlayerState","playVideo","pauseVideo","render","className","Object","keys","filter","i","map","key","React","Component","mapDispatchToProps","playing","togglePlayerMode","connect","state","all","viewMutedUserIDs","Login","socialId","scope","fetchBasicProfile","responseHandler","gus","setGoogleUser","buttonText","editRiff","selected","toFixed","onClick","console","log","sort","e1","e2","Record","mediaRecorder","recordingState","navigator","mediaDevices","getUserMedia","stream","mr","MediaRecorder","ondataavailable","e","chunks","push","onstop","blob","Blob","saveTempAudio","setState","catch","err","this","Date","now","startTime","stop","start","EditRiff","durationField","createRef","htmlPayloadField","startTimeField","tempRiff","Fragment","editIndex","defaultValue","ref","disabled","saveRiff","Number","current","value","cancelEdit","fd","FormData","append","video_id","tempId","headers","response","temp","RiffButton","createTempRiff","Collaboration","open","name","setRifferName","newName","n","prompt","EditInterface","loggedIn","isSignedIn","authCheck","DefaultComponent","extractVideoID","match","length","videoIDRef","onSubmit","preventDefault","href","target","exact","path","bind","EditControls","AuthorSelector","names","includes","arr","reduce","ac","cur","containsReducer","el","toggleViewUserIdMuted","style","backgroundColor","renderNames","uID","ViewInterface","params","getViewRiffs","App","component","Boolean","location","hostname","initialState","riffsReducer","action","getUTCMilliseconds","body","start_time","isText","text","ret","b","Array","modeReducer","googleUserReducer","riffsPlayingReducer","viewMutedUserIDsReducer","nameReducer","videoIDReducer","combineReducers","store","createStore","defaultReducer","applyMiddleware","thunkMiddleware","ReactDOM","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.03b2ed5b.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const GOOGLE_USER_SIGNIN = 'GOOGLE_USER_SIGNIN';\n\nexport const CREATE_TEMP_AUDIO_RIFF = 'CREATE_TEMP_AUDIO_RIFF';\nexport const CREATE_TEMP_TEXT_RIFF = 'CREATE_TEMP_TEXT_RIFF';\n\nexport const EDIT_RIFF = 'EDIT_RIFF';\n\nexport const CANCEL_EDIT = 'CANCEL_EDIT';\nexport const SAVE_RIFF = 'SAVE_RIFF';\n\nexport const SAVE_RIFF_SUCCESS = 'SAVE_RIFF_SUCCESS';\nexport const SAVE_RIFF_FAILURE = 'SAVE_RIFF_FAILURE';\n\nexport const SAVE_TEMP_AUDIO = 'SAVE_TEMP_AUDIO';\n\nexport const SET_RIFF_PLAYING = 'SET_RIFF_PLAYING';\nexport const SET_RIFF_NOT_PLAYING = 'SET_RIFF_NOT_PLAYING';\n\nexport const LOAD_RIFF = 'LOAD_RIFF';\nexport const RIFF_LOADED = 'RIFF_LOADED';\n\nexport const SET_PLAYER_MODE = 'SET_PLAYER_MODE';\nexport const EDIT_MODE = 'EDIT_MODE';\nexport const EDIT_NEW_MODE = 'EDIT_NEW_MODE';\nexport const PLAY_MODE = 'PLAY_MODE';\nexport const PAUSE_MODE = 'PAUSE_MODE';\nexport const TOGGLE_PLAYER_MODE = 'TOGGLE_PLAYER_MODE';\n\nexport const SET_VIDEO_ID = 'SET_VIDEO_ID';\nexport const RECEIVE_NAME_UPDATE = 'RECEIVE_NAME_UPDATE';\n\nexport const RECEIVE_RIFF_LIST = 'RECEIVE_RIFF_LIST';\n\nexport const TOGGLE_VIEW_USERID_MUTED = 'TOGGLE_VIEW_USERID_MUTED';\n\nexport const RECEIVE_COLLABORATION_ID = 'RECEIVE_COLLABORATION_ID';\nexport const START_COLLABORATION_SUCCESS = 'START_COLLABORATION_SUCCESS';\nexport const START_COLLABORATION_FAILURE = 'START_COLLABORATION_FAILURE';\n\n/******* Used in View Interface */\n\nexport const toggleViewUserIdMuted = (uID) => ({\n  type: TOGGLE_VIEW_USERID_MUTED,\n  id: uID,\n});\n\n/****** Collaboration */\n\nexport const startCollaboration = googleUser => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    axios({\n      method: 'post',\n      url: `${baseURL}/collaboration/start`,\n      data: { token: googleUser.getAuthResponse().id_token }\n    }).then(res => {\n      dispatch({ type: START_COLLABORATION_SUCCESS, payload: res.data });\n    })\n    .catch(err => {\n      dispatch({ type: START_COLLABORATION_FAILURE, payload: err.response });\n    });;\n  };\n};\n\nexport const getCollaborationStatus = googleUser => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    axios({\n      method: 'post',\n      url: `${baseURL}/collaboration/status`,\n      data: { token: googleUser.getAuthResponse().id_token }\n    }).then(res => {\n      dispatch({ type: RECEIVE_COLLABORATION_ID, payload: res.data });\n    });\n  };\n};\n\nexport const joinCollaboration = (colID, googleUser) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    axios({\n      method: 'post',\n      url: `${baseURL}/collaboration/join`,\n      data:\n        {\n          token: googleUser.getAuthResponse().id_token,\n          collaboration_id: colID\n        }\n    }).then(res => {\n      dispatch({ type: RECEIVE_COLLABORATION_ID, payload: res.data });\n    });\n  };\n};\n\nexport const addCollaborator = (colID, googleUser) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    axios({\n      method: 'post',\n      url: `${baseURL}/collaboration/add`,\n      data:\n        {\n          token: googleUser.getAuthResponse().id_token,\n          collaborator_id: colID\n        }\n    }).then(res => {\n      dispatch({ type: RECEIVE_COLLABORATION_ID, payload: res.data });\n    });\n  };\n};\n\nexport const removeCollaborator = (colID, googleUser) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    axios({\n      method: 'post',\n      url: `${baseURL}/collaboration/remove`,\n      data:\n        {\n          token: googleUser.getAuthResponse().id_token,\n          collaborator_id: colID\n        }\n    }).then(res => {\n      dispatch({ type: RECEIVE_COLLABORATION_ID, payload: res.data });\n    });\n  };\n};\n\n/******** Editing Interface */\n\nexport const setRifferName = (newName, googleUser) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    axios({\n      method: 'post',\n      url: `${baseURL}/set-name`,\n      data: { token: googleUser.getAuthResponse().id_token, newName }\n    }).then(res => {\n      dispatch({ type: RECEIVE_NAME_UPDATE, payload: res.data });\n    });\n  };\n};\n\nexport const setVideoID = (videoID, googleUser) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    //console.log( \"get url\", `${baseURL}/get-riffs` );\n    dispatch({\n      type: SET_VIDEO_ID,\n      payload: videoID\n    });\n    if ( googleUser && googleUser.getAuthResponse )\n    {\n      axios({\n        method: 'post',\n        url: `${baseURL}/get-riffs`,\n        data: { token: googleUser.getAuthResponse().id_token, videoID }\n      }).then(res => {\n        dispatch({ type: RECEIVE_RIFF_LIST, payload: res.data });\n      });\n    }\n  };\n};\n\n// perhaps this action should somehow call the above action (setVideoID)?\nexport const setGoogleUser = (googleUser, videoID) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    //console.log( \"get url\", `${baseURL}/get-riffs` );\n    dispatch({\n      type: GOOGLE_USER_SIGNIN,\n      payload: googleUser\n    });\n    axios({\n      method: 'post',\n      url: `${baseURL}/get-riffs`,\n      data: { token: googleUser.getAuthResponse().id_token, videoID }\n    }).then(res => {\n      dispatch({ type: RECEIVE_RIFF_LIST, payload: res.data });\n    });\n  };\n};\n\nexport const getViewRiffs = (videoID) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    //console.log( \"get url\", `${baseURL}/get-riffs` );\n    /*dispatch({\n      type: null\n    });*/\n    axios({\n      method: 'post',\n      url: `${baseURL}/get-view-riffs`,\n      data: { videoID }\n    }).then(res => {\n      dispatch({ type: RECEIVE_RIFF_LIST, payload: res.data });\n    });\n  };\n};\n\nexport const setPlayerMode = mode => ({\n  type: SET_PLAYER_MODE,\n  payload: mode\n});\n\nexport const togglePlayerMode = mode => ({\n  type: TOGGLE_PLAYER_MODE\n});\n\n/*export const saveRiff = payload => ({\n  type: SAVE_RIFF,\n  payload\n});*/\n\nexport const saveTempAudio = (payload, duration) => ({\n  type: SAVE_TEMP_AUDIO,\n  payload,\n  duration\n});\n\nexport const editRiff = (payload, id, gus) => {\n  return dispatch => {\n    dispatch({\n      type: EDIT_RIFF,\n      payload\n    });\n    \n    // id is only passed when the audio riff needs loading\n    if (id) rawLoadAxios(dispatch, id, gus);\n  };\n};\n\nexport const cancelEdit = () => ({\n  type: CANCEL_EDIT\n});\n\nexport const saveRiff = (token, payload, riff) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  return dispatch => {\n    dispatch({ type: SAVE_RIFF, payload });\n\n    let fd = new FormData();\n    fd.append('token', token);\n    fd.append(riff.type === 'text' ? 'text' : 'blob', payload.payload);\n    fd.append('type', riff.type);\n    fd.append(\n      'duration',\n      riff.type === 'text' ? payload.duration : riff.duration\n    );\n    fd.append('start_time', payload.time);\n    fd.append('video_id', riff.video_id);\n    fd.append('tempId', riff.tempId);\n\n    // this may be null, and that's ok\n    fd.append('id', riff.id);\n\n    axios({\n      method: 'post',\n      url: `${baseURL}/save-riff`,\n      data: fd,\n      headers: { 'Content-Type': 'multipart/form-data' }\n    })\n      .then(res => {\n        // res.data.data\n        dispatch({ type: SAVE_RIFF_SUCCESS, payload: res.data });\n      })\n      .catch(err => {\n        dispatch({ type: SAVE_RIFF_FAILURE, payload: err.response });\n      });\n  };\n};\n\nexport const createTempRiff = (type, videoID) => ({\n  type: type === 'audio' ? CREATE_TEMP_AUDIO_RIFF : CREATE_TEMP_TEXT_RIFF,\n  videoID\n});\n\nexport const setRiffPlaying = (index, playing) => ({\n  type: playing ? SET_RIFF_PLAYING : SET_RIFF_NOT_PLAYING,\n  payload: index\n});\n\nexport const loadRiff = (id, guser) => {\n  return dispatch => {\n    rawLoadAxios(dispatch, id, guser);\n  };\n};\n\nconst rawLoadAxios = (dispatch, id, guser) => {\n  var baseURL = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';\n  axios({\n    method: 'post',\n    url: `${baseURL}/load-riff`,\n    responseType: 'arraybuffer',\n    data: { token: guser ? guser.getAuthResponse().id_token : null, id } // modified to make guser optional\n  }).then(res => {\n    dispatch({ type: RIFF_LOADED, payload: res.data, id });\n  });\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  setPlayerMode,\n  setRiffPlaying,\n  loadRiff,\n  togglePlayerMode,\n  EDIT_MODE,\n  EDIT_NEW_MODE,\n  PLAY_MODE,\n  PAUSE_MODE\n} from '../../actions/index.js';\n\n// based on https://stackoverflow.com/questions/54017100/how-to-integrate-youtube-iframe-api-in-reactjs-solution\n\nclass YouTubeVideo extends React.Component {\n  componentDidMount = () => {\n    // On mount, check to see if the API script is already loaded\n\n    if (!window.YT || !window.YT.Player) {\n      // If not, load the script asynchronously\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n\n      // onYouTubeIframeAPIReady will load the video after the script is loaded\n      window.onYouTubeIframeAPIReady = this.loadVideo;\n\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    } // If script is already there, load the video directly\n    else {\n      this.loadVideo();\n    }\n  };\n\n  loadVideo = () => {\n    const { id } = this.props;\n\n    if (window.rifftubePlayer) window.rifftubePlayer.destroy();\n\n    this.player = new window.YT.Player('rifftube-player', {\n      videoId: id,\n      height: 390,\n      width: 640,\n      playerVars: {\n        playsinline: 1 // allows it to play inline on iOS\n      },\n      events: {\n        onReady: this.onPlayerReady,\n        onStateChange: this.onPlayerStateChange\n      }\n    });\n\n    window.rifftubePlayer = this.player; // store global reference (used to get current playback time when needed)\n  };\n\n  onPlayerReady = event => {\n    //event.target.playVideo();\n  };\n\n  checkForRiffsToLoad = t => {\n    this.props.riffs.forEach(riff => {\n      if (\n        riff.type === 'audio' &&\n        !riff.payload &&\n        !riff.loading &&\n        riff.time >= t &&\n        riff.time < t + 10\n      )\n        this.props.loadRiff(riff.id, this.props.googleUser);\n    });\n  };\n\n  onPlayerStateChange = ({ data }) => {\n    /*\n        -1 (unstarted)\n        0 (ended)\n        1 (playing)\n        2 (paused)\n        3 (buffering)\n        5 (video cued).\n        */\n\n    // the following conditional leaves out some 'else's that should never occur\n\n    if (data === 1) {\n      // playing\n\n      // the following code is\n      // needed I think... for pausing during a riff.\n      // so that (subsiquent) 'zombie' riffs can be killed,\n      // I think.\n      this.curRiff = this.props.riffsPlaying;\n\n      /*******************************************************/\n      // this timer is responsible for showing and hiding riffs\n      this.riffInterval = setInterval(() => {\n        //console.log( \"interval\", this.curRiff, this.props.riffsPlaying );\n\n        let t = window.rifftubePlayer.getCurrentTime();\n\n        this.checkForRiffsToLoad(t);\n\n        // first stop any zombie riffs\n        this.props.riffs.forEach((riff, index) => {\n          if (\n            this.curRiff[index] &&\n            (t < riff.time || t > riff.time + riff.duration)\n          ) {\n            this.props.setRiffPlaying(index, false);\n            this.curRiff[index] = false;\n            //document.querySelector( '#riff-content' ).innerHTML = '';\n\n            if (riff.type === 'audio')\n              // make sure all audio clips have stopped\n              this.audLock--;\n              if ( !this.audLock )\n              {\n                window.rifftubePlayer.setVolume(this.vol ? this.vol : 100); // hopefully unnecessary volume failsafe\n                delete this.vol;\n              }\n          }\n        });\n\n        var riffMuted = ind => this.props.mutedIDs[ this.props.riffs[ind].user_id ];\n\n        // next start any that should be playing\n        this.props.riffs.forEach((riff, index) => {\n          // the riff will start playing within half a second, or will be skipped\n          if ( !riffMuted(index) && !this.curRiff[index] && t > riff.time && t < riff.time + 0.5 ) {\n\n            this.props.setRiffPlaying(index, true);\n            this.curRiff[index] = true;\n\n            if (riff.type === 'audio') {\n              if ( !this.vol )\n              {\n                this.vol = window.rifftubePlayer.getVolume();\n                window.rifftubePlayer.setVolume(this.vol * 0.5);\n              }\n\n              // keeps track of how many audio tracks need to end before volume should be restored\n              if ( !this.audLock )\n                this.audLock = 1;\n              else\n                this.audLock++;\n\n              let audio = document.createElement('audio');\n              audio.controls = false;\n              if (!riff.payload) return; // DEBUG - SHOULD BE REMOVED\n              var audioURL = URL.createObjectURL(riff.payload);\n              audio.src = audioURL;\n              audio.play();\n            }\n          }\n        });\n      }, 100); // 100/1000 = 1/10 s\n\n      if (this.props.mode !== PLAY_MODE) {\n        // change mode state\n        this.props.setPlayerMode(PLAY_MODE);\n      }\n    } // not playing\n    else {\n      // stop riff-check interval when not playing\n      clearInterval(this.riffInterval);\n\n      if (this.props.mode === PLAY_MODE) {\n        // change mode state\n        this.props.setPlayerMode(PAUSE_MODE);\n      }\n    }\n  };\n\n  componentDidUpdate = prevProps => {\n    //console.log( \"youtube vid component upate\" );\n\n    this.checkForRiffsToLoad(0); // check if any riffs at < 10s in need loading\n\n    if (this.props.id !== prevProps.id) this.loadVideo();\n\n    if (this.props.mode !== prevProps.mode) {\n      if (\n        (this.props.mode === EDIT_MODE ||\n          this.props.mode === EDIT_NEW_MODE ||\n          this.props.mode === PAUSE_MODE) &&\n        this.player.getPlayerState() === 1\n      ) {\n        this.player.pauseVideo();\n      } else if (\n        this.props.mode === PLAY_MODE &&\n        this.player.getPlayerState() !== 1\n      ) {\n        this.player.playVideo();\n      }\n    }\n  };\n\n  render = () => {\n    return (\n      <div className=\"rifftube-container\">\n        <div id=\"rifftube-player\" />\n        {Object.keys(this.props.riffsPlaying)\n          .filter(i => this.props.riffsPlaying[i] && this.props.riffs[i].type === 'text')\n          .map(key => (\n            <div key={this.props.riffs[key].id}>\n              <div>\n                {this.props.riffs[key].payload}\n              </div>\n            </div>\n          ))}\n      </div>\n    );\n  };\n}\n\nconst mapStateToProps = state => ({\n  mode: state.mode,\n  riffs: state.riffs.all,\n  riffsPlaying: state.riffsPlaying,\n  googleUser: state.googleUser,\n  mutedIDs: state.viewMutedUserIDs\n});\n\nconst mapDispatchToProps = {\n  setPlayerMode,\n  setRiffPlaying,\n  togglePlayerMode,\n  loadRiff\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(YouTubeVideo);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { GoogleLogin } from 'react-google-login-component';\nimport { setGoogleUser } from '../../actions/index.js';\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <GoogleLogin\n        socialId=\"941154439836-s6iglcrdckcj6od74kssqsom58j96hd8.apps.googleusercontent.com\"\n        className=\"google-login\"\n        scope=\"profile email\"\n        fetchBasicProfile={false}\n        responseHandler={gus => {\n          this.props.setGoogleUser(gus, this.props.videoID);\n        }}\n        buttonText=\"Login With Google\"\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  videoID: state.videoID\n});\n\nconst mapDispatchToProps = {\n  setGoogleUser\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { editRiff } from '../../actions/index.js';\n\n/* this component is where a user can edit their riff */\nfunction RiffDetail(props) {\n  return (\n    <div className={`riff-detail${ props.selected ? ' riff-detail-selected' : '' }`}>\n      <div>\n        <ul className=\"riff-detail-list\">\n          <li>\n            start time: { props.time.toFixed ? props.time.toFixed(2) : null }\n          </li>\n          <li>duration: {props.duration.toFixed(2)}</li>\n          <li>type: {props.type}</li>\n          <li>No. {props.id}</li>\n        </ul>\n        <button\n          onClick={() =>\n            props.editRiff(\n              props.index,\n              props.type === 'audio' && !props.payload ? props.id : null,\n              props.googleUser\n            )\n          }\n        >\n          Edit\n        </button>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  editRiff\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RiffDetail);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport RiffDetail from './RiffDetail.js';\n\n/* this component maps over all of the user's riffs for this video */\nfunction RiffList(props) {\n  console.log('display', props.riffs);\n  return (\n    <div className=\"list-of-riffs\">\n      {props.riffs\n        ? props.riffs.sort( (e1,e2) => (e1.time - e2.time) ).map((riff, index) => (\n            <RiffDetail\n              key={riff.id}\n              {...riff}\n              index={index}\n              selected={props.riffsPlaying[index] === true}\n            />\n          ))\n        : null}\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  riffs: state.riffs.all,\n  riffsPlaying: state.riffsPlaying\n});\n\nexport default connect(mapStateToProps, null)(RiffList);\n","import React from 'react';\n\nclass Record extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      mediaRecorder: null,\n      recordingState: false\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.mediaDevices) {\n      navigator.mediaDevices\n        .getUserMedia({ audio: true })\n        .then(stream => {\n          const mr = new MediaRecorder(stream);\n\n          mr.ondataavailable = e => {\n            this.chunks.push(e.data);\n          };\n\n          mr.onstop = e => {\n            var blob = new Blob(this.chunks, { type: 'audio/webm' }); // was 'audio/webm;codecs=opus'\n            this.props.saveTempAudio(blob, this.duration);\n          };\n\n          this.setState({ mediaRecorder: mr });\n        })\n        .catch(err => console.log('Error', err));\n    }\n  }\n\n  render() {\n    var ret; // var for the value to be returned\n\n    if (navigator.mediaDevices && this.state.mediaRecorder) {\n      if (!this.state.recordingState) {\n        ret = (\n          <button\n            id=\"recordBtn\"\n            onClick={() => {\n              this.setState({ recordingState: true });\n              this.chunks = [];\n              this.startTime = Date.now();\n              this.state.mediaRecorder.start();\n            }}\n          >\n            record\n          </button>\n        );\n      } else {\n        ret = (\n          <button\n            id=\"stopBtn\"\n            onClick={() => {\n              this.setState({ recordingState: false });\n              this.duration = (Date.now() - this.startTime) / 1000;\n              this.state.mediaRecorder.stop();\n            }}\n          >\n            stop\n          </button>\n        );\n      }\n    } else if (navigator.mediaDevices && !this.state.mediaRecorder)\n      ret = <span>mediaRecorder failed to initialize</span>;\n    else ret = <span>navigator.mediaDevices not supported. sorry.</span>;\n\n    return ret;\n  }\n}\n\nexport default Record;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Record from './Record.js';\nimport {\n  saveRiff,\n  setPlayerMode,\n  saveTempAudio,\n  cancelEdit,\n  EDIT_MODE\n} from '../../actions/index.js';\n\nclass EditRiff extends React.Component {\n\n  constructor(props)\n  {\n    super(props);\n    this.durationField = React.createRef();\n    this.htmlPayloadField = React.createRef();\n    this.startTimeField = React.createRef();\n  }\n\n  render() {\n    console.log('ed rif red');\n    return (\n      <div className=\"edit-riff\">\n        <div className=\"edit-riff-inner\">\n          {this.props.tempRiff.type === 'audio' ? (\n            <React.Fragment>\n              {this.props.mode === EDIT_MODE && this.props.editIndex && !this.props.tempRiff.payload ? (\n                <span>Loading...</span>\n              ) : null}\n              <Record saveTempAudio={this.props.saveTempAudio} />\n              {this.props.tempRiff.payload ? (\n                <button\n                  onClick={() => {\n                    var audio = document.createElement('audio');\n                    audio.controls = false;\n                    var audioURL = URL.createObjectURL(\n                      this.props.tempRiff.payload\n                    );\n                    audio.src = audioURL;\n                    audio.play();\n                  }}\n                >\n                  Play\n                </button>\n              ) : null}\n              <br />\n              <div>\n                Start:{' '}\n                <input\n                  id=\"riff-start-field\"\n                  defaultValue={this.props.tempRiff.time}\n                  ref={this.startTimeField}\n                />\n              </div>\n              <button\n                disabled={!this.props.tempRiff.payload}\n                onClick={() => {\n                  this.props.saveRiff(\n                    this.props.googleUser.getAuthResponse().id_token,\n                    {\n                      payload: this.props.tempRiff.payload,\n                      time: Number(this.startTimeField.current.value)\n                    },\n                    this.props.tempRiff\n                  );\n                }}\n              >\n                Save\n              </button>\n            </React.Fragment>\n          ) : (\n            <React.Fragment>\n              <div>HTML payload:</div>\n              <textarea id=\"riff-edit-field\" ref={this.htmlPayloadField} defaultValue={this.props.tempRiff.payload} />\n\n              <div>\n                Duration:{' '}\n                <input\n                  id=\"riff-duration-field\"\n                  defaultValue={this.props.tempRiff.duration || 2}\n                  ref={this.durationField}\n                />\n              </div>\n              <div>\n                Start:{' '}\n                <input\n                  id=\"riff-start-field\"\n                  defaultValue={this.props.tempRiff.time}\n                  ref={this.startTimeField}\n                />\n              </div>\n              <button\n                onClick={() => {\n                  this.props.saveRiff(\n                    this.props.googleUser.getAuthResponse().id_token,\n                    {\n                      payload: this.htmlPayloadField.current.value,\n                      duration: Number(\n                        this.durationField.current.value\n                      ),\n                      time: Number(this.startTimeField.current.value)\n                    },\n                    this.props.tempRiff\n                  );\n                }}\n              >\n                Save\n              </button>\n            </React.Fragment>\n          )}\n\n          <button\n            onClick={() => {\n              this.props.cancelEdit();\n            }}\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  mode: state.mode,\n  tempRiff: state.riffs.temp,\n  editIndex: state.riffs.editIndex,\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  setPlayerMode,\n  saveRiff,\n  saveTempAudio,\n  cancelEdit\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditRiff);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createTempRiff } from '../../actions/index.js';\n\nclass RiffButton extends React.Component {\n  render() {\n    return (\n      <button onClick={() => { this.props.createTempRiff(this.props.type, this.props.videoID); }}>\n        {this.props.type}\n      </button>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  videoID: state.videoID\n});\n\nconst mapDispatchToProps = {\n  createTempRiff\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RiffButton);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nclass Collaboration extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = { open: false };\n    }\n    \n    render()\n    {\n        return (\n            <React.Fragment>\n                <button onClick={ () => this.setState( { open: ! this.state.open } ) }>\n                    Collaboration Panel\n                </button>\n\n                {\n                    this.state.open\n                    ?\n                        <div>\n                            open!\n                        </div>\n                    :\n                        null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    videoID: state.videoID,\n    googleUser: state.googleUser,\n    name: state.name\n  });\n  \n  const mapDispatchToProps = {\n  };\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(Collaboration);\n  ","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport RiffList from './RiffList.js';\nimport EditRiff from './EditRiff.js';\nimport RiffButton from './RiffButton.js';\nimport Collaboration from './Collaboration';\nimport { setRifferName } from '../../actions'; // this and below are the same file\nimport { EDIT_MODE, EDIT_NEW_MODE } from '../../actions/index.js';\n\n/*This component houses all of the riff buttons and the rifflist*/\nfunction EditControls(props) {\n  return (\n    <div className=\"control-panel\">\n      {\n        // make this into a component?:\n        props.name\n        ?\n          <div>\n            Riffer Name:&nbsp;\n            {\n              props.name\n            }\n            <button\n              type=\"button\"\n              onClick={ () => {\n                var n = prompt(\"Enter name\", props.name);\n                if ( n )\n                  props.setRifferName( n, props.googleUser );\n              } }\n            >\n              Update Name\n            </button>\n          </div>\n        :\n          null\n      }\n\n      <Collaboration />\n\n      <div>\n        <h2 className=\"add-riff-title\">Add New Riff</h2>\n        <RiffButton type=\"audio\" />\n        <RiffButton type=\"text\" />\n\n        {props.mode === EDIT_MODE || props.mode === EDIT_NEW_MODE ? (\n          <EditRiff />\n        ) : null}\n      </div>\n      <h2 className=\"riff-list-title\">Control Panel</h2>\n      <RiffList />\n    </div>\n  );\n}\n\nlet mapStateToProps = state => ({\n  mode: state.mode,\n  name: state.name,\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  setRifferName\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditControls);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Route } from 'react-router-dom';\nimport YouTubeVideo from '../YouTubeVideo/YouTubeVideo';\nimport Login from '../Login/Login';\nimport EditControls from './EditControls';\nimport { setVideoID } from '../../actions';\n\nclass EditInterface extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoIDRef = React.createRef();\n  }\n\n  loggedIn = () => {\n    if (this.props.googleUser) return this.props.googleUser.isSignedIn();\n\n    return false;\n  };\n\n  authCheck = (Component, DefaultComponent) => {\n    return this.loggedIn() ? <Component /> : <DefaultComponent />;\n  };\n  /* extracts the youtube id from a url. got help from: https://ctrlq.org/code/19797-regex-youtube-id */\n  extractVideoID = url => {\n    var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#\\&\\?]*).*/;\n    var match = url.match(regExp);\n    if (match && match[7].length === 11) {\n      return match[7];\n    } else {\n      return url; // if extraction fails, fallback on assuming they gave an ID\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"youtube-section\">\n          <div className=\"top-section\">\n            <div className=\"title-and-url\">\n              <h1>RiffTube</h1>\n            </div>\n          </div>\n          <form\n            onSubmit={e => {\n              this.props.setVideoID(\n                this.extractVideoID(this.videoIDRef.current.value),\n                this.props.googleUser\n              );\n              e.preventDefault();\n            }}\n          >\n            <label>YouTube URL/ID:&nbsp;&nbsp;</label>\n            <input\n              type=\"text\"\n              defaultValue={this.props.videoID}\n              ref={this.videoIDRef}\n            />\n            <button type=\"submit\">Change Video</button>\n          </form>\n\n          <YouTubeVideo id={this.props.videoID} />\n\n          <div>\n            <a href={'/view/' + this.props.videoID} target=\"_blank\">\n              View video\n            </a>\n          </div>\n        </div>\n        <Route\n          exact\n          path=\"/\"\n          render={this.authCheck.bind(this, EditControls, Login)}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  videoID: state.videoID,\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  setVideoID\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditInterface);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { toggleViewUserIdMuted } from '../../actions';\n\nclass AuthorSelector extends React.Component\n{\n    renderNames()\n    {\n        var names = [];\n        const containsReducer = id => (ac, cur) => cur.id === id ? ac || true : ac || false;\n        const includes = ( arr, id ) => arr.reduce( containsReducer( id ), false );\n\n        this.props.riffs.forEach( el =>\n            {\n                console.log( \"name\", el.name, includes( names, el.user_id ) );\n                if ( ! includes( names, el.user_id ) )\n                    names.push( { name: el.name, id: el.user_id } );\n            });\n        return names.map( el => (\n            <div key={el.id} onClick={ () => this.props.toggleViewUserIdMuted( el.id ) } style={ { backgroundColor: this.props.mutedIDs[el.id] ? 'gray' : 'blue' } }>\n                { el.name }\n            </div>\n        ));\n    }\n    \n    render()\n    {\n        return (\n            <div>\n                {\n                    this.renderNames()\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    riffs: state.riffs.all,\n    mutedIDs: state.viewMutedUserIDs\n  });\n  \n  const mapDispatchToProps = {\n    toggleViewUserIdMuted\n  };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthorSelector);","import React from 'react';\nimport { connect } from 'react-redux';\nimport YouTubeVideo from '../YouTubeVideo/YouTubeVideo';\nimport AuthorSelector from './AuthorSelector';\nimport { setVideoID, getViewRiffs } from '../../actions';\n\nclass ViewInterface extends React.Component {\n    componentDidMount = () =>\n    {\n        this.props.setVideoID( this.props.match.params.videoID );\n\n        this.props.getViewRiffs( this.props.match.params.videoID );\n    };\n\n    render = () =>\n    {\n        return (\n            <div>\n                <h1>View {this.props.match.params.videoID}</h1>\n                <YouTubeVideo id={this.props.match.params.videoID} />\n                <AuthorSelector />\n            </div>\n        );\n    }\n}\n\n/*const mapStateToProps = state => ({\n  });*/\n  \n  const mapDispatchToProps = {\n    setVideoID,\n    getViewRiffs\n  };\n\nexport default connect(null, mapDispatchToProps)(ViewInterface);","import React from 'react';\nimport EditInterface from './components/RiffControls/EditInterface';\nimport ViewInterface from './components/ViewInterface/ViewInterface';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"main-section\">\n            <Route exact path=\"/\" component={EditInterface} />\n            <Route path=\"/view/:videoID\" component={ViewInterface} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  SET_VIDEO_ID,\n  SAVE_RIFF,\n  CREATE_TEMP_AUDIO_RIFF,\n  CREATE_TEMP_TEXT_RIFF,\n  SAVE_TEMP_AUDIO,\n  CANCEL_EDIT,\n  EDIT_RIFF,\n  LOAD_RIFF,\n  RIFF_LOADED,\n  RECEIVE_RIFF_LIST,\n  SAVE_RIFF_SUCCESS\n} from '../actions/index.js';\n\nlet initialState = {\n  all: [],\n  temp: null,\n  editIndex: null\n};\n\nconst riffsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_VIDEO_ID:\n      return initialState;\n    case CREATE_TEMP_AUDIO_RIFF:\n    case CREATE_TEMP_TEXT_RIFF:\n      return {\n        ...state,\n        temp: {\n          ...state.temp,\n          type: action.type === CREATE_TEMP_AUDIO_RIFF ? 'audio' : 'text',\n          // @ts-ignore\n          // rifftubePlayer isn't normally on the window object so this throws an error but it works.\n          time: window.rifftubePlayer.getCurrentTime(),\n          video_id: action.videoID,\n          tempId: new Date().getUTCMilliseconds() // used to get perm id from server\n        },\n        editIndex: null\n      };\n    case EDIT_RIFF:\n      return {\n        ...state,\n        temp: { ...state.all[action.payload] }, // copy specified riff to tempRiff\n        editIndex: action.payload\n      };\n    case SAVE_TEMP_AUDIO:\n      return {\n        ...state,\n        temp: {\n          ...state.temp,\n          duration: action.duration,\n          payload: action.payload\n        }\n      };\n    case CANCEL_EDIT:\n      return {\n        ...state,\n        temp: null,\n        editIndex: null\n      };\n    case RECEIVE_RIFF_LIST:\n      return {\n        ...state,\n        all: [\n          ...state.all,\n          ...action.payload.body.map(el => ({\n            ...el,\n            time: el.start_time,\n            payload: el.isText ? el.text : null,\n            type: el.isText ? 'text' : 'audio'\n          }))\n        ]\n      };\n    case SAVE_RIFF_SUCCESS:\n      if (action.payload.type === 'add') {\n        let riffs = [...state.all];\n        riffs.forEach((el, ind, arr) => {\n          if (el.tempId === action.payload.tempId)\n            arr[ind] = { ...el, id: action.payload.id };\n          //el.id = action.payload.id;\n        });\n        let ret = { ...state, all: riffs };\n        return ret;\n      } else return state;\n    case SAVE_RIFF: {\n      let riff = { ...state.temp, ...action.payload };\n      let riffs;\n\n      // adding a new riff:\n      if (state.editIndex === null)\n        riffs = [...state.all, riff];\n      // EDIT_MODE (existing riff):\n      else {\n        riffs = [...state.all];\n        riffs[state.editIndex] = riff;\n      }\n\n      return {\n//        ...state, // not needed because the state is fully specified\n        all: riffs,\n        temp: null,\n        editIndex: null\n      };\n    }\n    case LOAD_RIFF:\n      let ret = { ...state }; // will this work?\n      ret.all[action.payload].loading = true;\n      return ret;\n    case RIFF_LOADED: {\n      const b = new Blob(new Array(action.payload), { type: 'audio/webm' });\n      let riffs = [...state.all];\n      riffs.forEach(el => {\n        if (el.id === action.id) {\n          el.payload = b;\n          el.loading = false;\n        }\n      });\n      let ret = { ...state, all: riffs };\n\n      // if this is being edited currently, tempRiff needs to be updated as well\n      // editIndex != null simply means that something is being edited\n      if (state.editIndex !== null && state.temp.id === action.id)\n        ret.temp = { ...ret.temp, payload: b };\n\n      return ret;\n    }\n    default:\n      return state;\n  }\n};\n\nexport default riffsReducer;","import {\n  SET_VIDEO_ID,\n  CREATE_TEMP_AUDIO_RIFF,\n  CREATE_TEMP_TEXT_RIFF,\n  EDIT_RIFF,\n  EDIT_MODE,\n  CANCEL_EDIT,\n  SAVE_RIFF,\n  SET_PLAYER_MODE,\n  PLAY_MODE,\n  PAUSE_MODE,\n  TOGGLE_PLAYER_MODE\n} from '../actions/index.js';\n\nconst modeReducer = (state = PAUSE_MODE, action) => {\n  switch (action.type) {\n    case SET_VIDEO_ID:\n      return PAUSE_MODE;\n    case CREATE_TEMP_AUDIO_RIFF:\n    case CREATE_TEMP_TEXT_RIFF:\n    case EDIT_RIFF:\n      return EDIT_MODE;\n    case SET_PLAYER_MODE:\n      return action.payload;\n    case CANCEL_EDIT:\n      return PAUSE_MODE;\n    case TOGGLE_PLAYER_MODE: // not needed at the moment\n      return state.mode === PLAY_MODE ? PAUSE_MODE : PLAY_MODE;\n    case SAVE_RIFF:\n      return PLAY_MODE; // should be an option\n    default:\n      return state;\n  }\n};\n\nexport default modeReducer;","import {\n  GOOGLE_USER_SIGNIN\n} from '../actions/index.js';\n\nconst googleUserReducer = (state = null, action) => {\n  switch (action.type) {\n    case GOOGLE_USER_SIGNIN:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default googleUserReducer;","import {\n  SET_VIDEO_ID,\n  SET_RIFF_NOT_PLAYING,\n  SET_RIFF_PLAYING\n} from '../actions/index.js';\n\nconst riffsPlayingReducer = (state = {}, action) => {\n  switch (action.type) {\n    case SET_VIDEO_ID:\n      return {};\n    case SET_RIFF_PLAYING:\n    case SET_RIFF_NOT_PLAYING:\n      return {\n          ...state,\n          [action.payload]: action.type === SET_RIFF_PLAYING ? true : false\n        };\n    default:\n      return state;\n  }\n}\n\nexport default riffsPlayingReducer;","import {\n  SET_VIDEO_ID,\n  TOGGLE_VIEW_USERID_MUTED\n} from '../actions/index.js';\n\nconst viewMutedUserIDsReducer = (state = {}, action) => {\n  switch (action.type) {\n    case SET_VIDEO_ID:\n      return {};\n    case TOGGLE_VIEW_USERID_MUTED:\n      return {\n            ...state,\n            [action.id]: !state[action.id]\n        };\n    default:\n      return state;\n  }\n};\n\nexport default viewMutedUserIDsReducer;","import {\n  RECEIVE_RIFF_LIST,\n  RECEIVE_NAME_UPDATE\n} from '../actions/index.js';\n\nconst nameReducer = (state = \"\", action) => {\n  switch (action.type) {\n    case RECEIVE_NAME_UPDATE:\n    case RECEIVE_RIFF_LIST:\n      return action.payload.name || \"\"; // hacky but added because no name is returned for view riffs\n    default:\n      return state;\n  }\n};\n\nexport default nameReducer;","import {\n  SET_VIDEO_ID\n} from '../actions/index.js';\n\nconst videoIDReducer = (state = \"lYIRO97dhII\", action) => {\n  switch (action.type) {\n    case SET_VIDEO_ID:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default videoIDReducer;","import { combineReducers } from 'redux';\n\nimport riffsReducer from './riffs-reducer';\nimport modeReducer from './mode-reducer';\nimport googleUserReducer from './googleUser-reducer';\nimport riffsPlayingReducer from './riffsPlaying-reducer';\nimport viewMutedUserIDsReducer from './viewMutedUserIDs-reducer';\nimport nameReducer from './name-reducer';\nimport videoIDReducer from './videoID-reducer';\n\nexport default combineReducers({\n  riffs: riffsReducer,\n  mode: modeReducer,\n  googleUser: googleUserReducer,\n  riffsPlaying: riffsPlayingReducer,\n  viewMutedUserIDs: viewMutedUserIDsReducer,\n  name: nameReducer,\n  videoID: videoIDReducer\n});\n\n\n\n/*\n\nimport {\n  SET_VIDEO_ID,\n  GOOGLE_USER_SIGNIN,\n  SAVE_RIFF,\n  CREATE_TEMP_AUDIO_RIFF,\n  CREATE_TEMP_TEXT_RIFF,\n  SET_PLAYER_MODE,\n  SAVE_TEMP_AUDIO,\n  CANCEL_EDIT,\n  EDIT_RIFF,\n  SET_RIFF_NOT_PLAYING,\n  SET_RIFF_PLAYING,\n  LOAD_RIFF,\n  RIFF_LOADED,\n  EDIT_MODE,\n  EDIT_NEW_MODE,\n  PLAY_MODE,\n  PAUSE_MODE,\n  TOGGLE_PLAYER_MODE,\n  RECEIVE_RIFF_LIST,\n  SAVE_RIFF_SUCCESS,\n  TOGGLE_VIEW_USERID_MUTED,\n  RECEIVE_NAME_UPDATE\n} from '../actions/index.js';\n\nlet initialState = {\n  videoID: 'lYIRO97dhII',\n  googleUser: null,\n  riffs: [],\n  tempRiff: null,\n  mode: PAUSE_MODE,\n  riffsPlaying: {},\n  viewMutedUserIDs: {}\n};\n\nexport const riffReducer = (state = [], action) => {\n  console.log('dispatch', state, action);\n  switch (action.type) {\n    case SET_VIDEO_ID:\n      return {\n        videoID: action.payload,\n        googleUser: state.googleUser,\n        riffs: [],\n        tempRiff: null,\n        mode: PAUSE_MODE,\n        riffsPlaying: {},\n        viewMutedUserIDs: {}\n      };\n    case TOGGLE_VIEW_USERID_MUTED:\n      return {\n        ...state,\n        viewMutedUserIDs: {\n          ...state.viewMutedUserIDs,\n          [action.id]: !state.viewMutedUserIDs[action.id]\n        }\n      };\n    case GOOGLE_USER_SIGNIN:\n      return {\n        ...state,\n        googleUser: action.payload\n      };\n    case CREATE_TEMP_AUDIO_RIFF:\n    case CREATE_TEMP_TEXT_RIFF:\n      return {\n        ...state,\n        tempRiff: {\n          type: action.type === CREATE_TEMP_AUDIO_RIFF ? 'audio' : 'text',\n          // @ts-ignore\n          // rifftubePlayer isn't normally on the window object so this throws an error but it works.\n          time: window.rifftubePlayer.getCurrentTime(),\n          video_id: state.videoID,\n          tempId: new Date().getUTCMilliseconds() // used to get perm id from server\n        },\n        mode: EDIT_NEW_MODE\n      };\n\n    case EDIT_RIFF:\n      return {\n        ...state,\n        tempRiff: { ...state.riffs[action.payload] }, // copy specified riff to tempRiff\n        editIndex: action.payload,\n        mode: EDIT_MODE\n      };\n    case SET_PLAYER_MODE:\n      return {\n        ...state,\n        mode: action.payload\n      };\n    case SAVE_TEMP_AUDIO:\n      return {\n        ...state,\n        tempRiff: {\n          ...state.tempRiff,\n          duration: action.duration,\n          payload: action.payload\n        }\n      };\n    case CANCEL_EDIT:\n      return {\n        ...state,\n        tempRiff: null,\n        editIndex: null,\n        mode: PAUSE_MODE\n      };\n    case SET_RIFF_PLAYING: // this and next one could be combined\n      return {\n        ...state,\n        riffsPlaying: {\n          ...state.riffsPlaying,\n          [action.payload]: true\n        }\n      };\n    case SET_RIFF_NOT_PLAYING:\n      return {\n        ...state,\n        riffsPlaying: {\n          ...state.riffsPlaying,\n          [action.payload]: false\n        }\n      };\n    case TOGGLE_PLAYER_MODE: // not needed at the moment\n      return {\n        ...state,\n        mode: state.mode === PLAY_MODE ? PAUSE_MODE : PLAY_MODE\n      };\n    case RECEIVE_NAME_UPDATE:\n      return {\n        ...state,\n        name: action.payload.name\n      };\n    case RECEIVE_RIFF_LIST:\n      return {\n        ...state,\n        name: action.payload.name,\n        riffs: [\n          ...state.riffs,\n          ...action.payload.body.map(el => ({\n            ...el,\n            time: el.start_time,\n            payload: el.isText ? el.text : null,\n            type: el.isText ? 'text' : 'audio'\n          }))\n        ]\n      };\n    case SAVE_RIFF_SUCCESS:\n      if (action.payload.type === 'add') {\n        let riffs = [...state.riffs];\n        riffs.forEach((el, ind, arr) => {\n          if (el.tempId === action.payload.tempId)\n            arr[ind] = { ...el, id: action.payload.id };\n          //el.id = action.payload.id;\n        });\n        let ret = { ...state, riffs };\n        return ret;\n      } else return state;\n    case SAVE_RIFF: {\n      let riff = { ...state.tempRiff, ...action.payload };\n      let riffs;\n      // editing a new riff:\n      if (state.mode === EDIT_NEW_MODE) riffs = [...state.riffs, riff];\n      // EDIT_MODE (existing riff):\n      else {\n        riffs = [...state.riffs];\n        riffs[state.editIndex] = riff;\n      }\n\n      return {\n        ...state,\n        riffs,\n        tempRiff: null,\n        mode: PLAY_MODE // should be an option\n      };\n    }\n    case LOAD_RIFF:\n      let ret = { ...state }; // will this work?\n      ret.riffs[action.payload].loading = true;\n      return ret;\n    case RIFF_LOADED: {\n      const b = new Blob(new Array(action.payload), { type: 'audio/webm' });\n      let riffs = [...state.riffs];\n      riffs.forEach(el => {\n        if (el.id === action.id) {\n          el.payload = b;\n          el.loading = false;\n        }\n      });\n      let ret = { ...state, riffs };\n\n      // if this is being edited currently, tempRiff needs to be updated as well\n      if (state.mode === EDIT_MODE && state.tempRiff.id === action.id)\n        ret.tempRiff = { ...ret.tempRiff, payload: b };\n\n      return ret;\n    }\n    default:\n      return state;\n  }\n};\n\n\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport defaultReducer from './reducers';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\n\nimport thunkMiddleware from 'redux-thunk';\n\nconst store = createStore(defaultReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}