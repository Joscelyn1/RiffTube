{"version":3,"sources":["actions/index.js","components/YouTubeVideo/YouTubeVideo.js","components/Login/Login.js","components/RiffControls/RiffDetail.js","components/RiffControls/RiffList.js","components/RiffControls/Record.js","components/RiffControls/EditRiff.js","components/RiffControls/RiffButton.js","components/RiffControls/EditControls.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["EDIT_MODE","EDIT_NEW_MODE","PLAY_MODE","PAUSE_MODE","setPlayerMode","mode","type","payload","rawLoadAxios","dispatch","id","guser","axios","method","url","responseType","data","token","getAuthResponse","id_token","then","res","YouTubeVideo","componentDidMount","window","YT","Player","loadVideo","tag","document","createElement","src","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","props","rifftubePlayer","destroy","player","videoId","height","width","events","onReady","onPlayerReady","onStateChange","onPlayerStateChange","event","checkForRiffsToLoad","t","riffs","forEach","riff","loading","time","loadRiff","googleUser","curRiff","riffsPlaying","riffInterval","setInterval","getCurrentTime","index","duration","setRiffPlaying","setVolume","vol","getVolume","audio","controls","audioURL","URL","createObjectURL","play","clearInterval","componentDidUpdate","prevProps","getPlayerState","playVideo","pauseVideo","render","className","Object","keys","filter","i","map","key","React","Component","mapDispatchToProps","playing","togglePlayerMode","connect","state","videoID","Login","socialId","scope","fetchBasicProfile","responseHandler","gus","setGoogleUser","buttonText","editRiff","start_time","toFixed","onClick","console","log","selected","Record","mediaRecorder","recordingState","navigator","mediaDevices","getUserMedia","stream","mr","MediaRecorder","ondataavailable","e","chunks","push","onstop","blob","Blob","saveTempAudio","setState","catch","err","this","Date","now","startTime","stop","start","EditRiff","tempRiff","Fragment","disabled","saveRiff","defaultValue","querySelector","value","Number","cancelEdit","fd","FormData","append","video_id","tempId","headers","response","RiffButton","createTempRiff","bind","App","loggedIn","isSignedIn","authCheck","DefaultComponent","extractVideoID","match","length","alert","videoIDRef","createRef","onSubmit","setVideoID","current","preventDefault","ref","exact","path","EditControls","Boolean","location","hostname","initialState","store","createStore","action","getUTCMilliseconds","editIndex","body","el","isText","text","ret","b","Array","applyMiddleware","thunkMiddleware","ReactDOM","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e131293f.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const GOOGLE_USER_SIGNIN = 'GOOGLE_USER_SIGNIN';\n\nexport const CREATE_TEMP_AUDIO_RIFF = 'CREATE_TEMP_AUDIO_RIFF';\nexport const CREATE_TEMP_TEXT_RIFF = 'CREATE_TEMP_TEXT_RIFF';\n\nexport const EDIT_RIFF = 'EDIT_RIFF';\n\nexport const CANCEL_EDIT = 'CANCEL_EDIT';\nexport const SAVE_RIFF = 'SAVE_RIFF';\n\nexport const SAVE_RIFF_SUCCESS = 'SAVE_RIFF_SUCCESS';\nexport const SAVE_RIFF_FAILURE = 'SAVE_RIFF_FAILURE';\n\nexport const SAVE_TEMP_AUDIO = 'SAVE_TEMP_AUDIO';\n\nexport const SET_RIFF_PLAYING = 'SET_RIFF_PLAYING';\nexport const SET_RIFF_NOT_PLAYING = 'SET_RIFF_NOT_PLAYING';\n\nexport const LOAD_RIFF = 'LOAD_RIFF';\nexport const RIFF_LOADED = 'RIFF_LOADED';\n\nexport const SET_PLAYER_MODE = 'SET_PLAYER_MODE';\nexport const EDIT_MODE = 'EDIT_MODE';\nexport const EDIT_NEW_MODE = 'EDIT_NEW_MODE';\nexport const PLAY_MODE = 'PLAY_MODE';\nexport const PAUSE_MODE = 'PAUSE_MODE';\nexport const TOGGLE_PLAYER_MODE = 'TOGGLE_PLAYER_MODE';\n\nexport const SET_VIDEO_ID = 'SET_VIDEO_ID';\n\nexport const RECEIVE_RIFF_LIST = 'RECEIVE_RIFF_LIST';\n\nexport const setVideoID = payload => ({\n  type: SET_VIDEO_ID,\n  payload\n});\n\n/*export const setGoogleUser = googleUser => ({\n  type: GOOGLE_USER_SIGNIN,\n  payload: googleUser\n});*/\n\nexport const setGoogleUser = (googleUser, videoID) => {\n  return dispatch => {\n    dispatch({\n      type: GOOGLE_USER_SIGNIN,\n      payload: googleUser\n    });\n    axios({\n      method: 'post',\n      url: 'http://localhost:3300/get-riffs',\n      data: { token: googleUser.getAuthResponse().id_token, videoID }\n    }).then(res => {\n      dispatch({ type: RECEIVE_RIFF_LIST, payload: res.data });\n    });\n  };\n};\n\nexport const setPlayerMode = mode => ({\n  type: SET_PLAYER_MODE,\n  payload: mode\n});\n\nexport const togglePlayerMode = mode => ({\n  type: TOGGLE_PLAYER_MODE\n});\n\n/*export const saveRiff = payload => ({\n  type: SAVE_RIFF,\n  payload\n});*/\n\nexport const saveTempAudio = (payload, duration) => ({\n  type: SAVE_TEMP_AUDIO,\n  payload,\n  duration\n});\n\nexport const editRiff = (payload, id, gus) => {\n  return dispatch => {\n    dispatch({\n      type: EDIT_RIFF,\n      payload\n    });\n\n    if (id) rawLoadAxios(dispatch, id, gus);\n  };\n};\n\nexport const cancelEdit = () => ({\n  type: CANCEL_EDIT\n});\n\nexport const saveRiff = (token, payload, riff) => {\n  return dispatch => {\n    dispatch({ type: SAVE_RIFF, payload });\n\n    let fd = new FormData();\n    fd.append('token', token);\n    fd.append(riff.type === 'text' ? 'text' : 'blob', payload.payload);\n    fd.append('type', riff.type);\n    fd.append(\n      'duration',\n      riff.type === 'text' ? payload.duration : riff.duration\n    );\n    fd.append('start_time', riff.time);\n    fd.append('video_id', riff.video_id);\n    fd.append('tempId', riff.tempId);\n\n    // this may be null, and that's ok\n    fd.append('id', riff.id);\n\n    axios({\n      method: 'post',\n      url: 'http://localhost:3300/save-riff',\n      data: fd,\n      headers: { 'Content-Type': 'multipart/form-data' }\n    })\n      .then(res => {\n        // res.data.data\n        dispatch({ type: SAVE_RIFF_SUCCESS, payload: res.data });\n      })\n      .catch(err => {\n        dispatch({ type: SAVE_RIFF_FAILURE, payload: err.response });\n      });\n  };\n};\n\nexport const createTempRiff = type => ({\n  type: type === 'audio' ? CREATE_TEMP_AUDIO_RIFF : CREATE_TEMP_TEXT_RIFF\n});\n\nexport const setRiffPlaying = (index, playing) => ({\n  type: playing ? SET_RIFF_PLAYING : SET_RIFF_NOT_PLAYING,\n  payload: index\n});\n\nexport const loadRiff = (id, guser) => {\n  return dispatch => {\n    rawLoadAxios(dispatch, id, guser);\n  };\n};\n\nconst rawLoadAxios = (dispatch, id, guser) => {\n  axios({\n    method: 'post',\n    url: 'http://localhost:3300/load-riff',\n    responseType: 'arraybuffer',\n    data: { token: guser.getAuthResponse().id_token, id }\n  }).then(res => {\n    dispatch({ type: RIFF_LOADED, payload: res.data, id });\n  });\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  setPlayerMode,\n  setRiffPlaying,\n  loadRiff,\n  togglePlayerMode,\n  EDIT_MODE,\n  EDIT_NEW_MODE,\n  PLAY_MODE,\n  PAUSE_MODE\n} from '../../actions/index.js';\n\n// based on https://stackoverflow.com/questions/54017100/how-to-integrate-youtube-iframe-api-in-reactjs-solution\n\nclass YouTubeVideo extends React.Component {\n  componentDidMount = () => {\n    // On mount, check to see if the API script is already loaded\n\n    if (!window.YT || !window.YT.Player) {\n      // If not, load the script asynchronously\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n\n      // onYouTubeIframeAPIReady will load the video after the script is loaded\n      window.onYouTubeIframeAPIReady = this.loadVideo;\n\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    } // If script is already there, load the video directly\n    else {\n      this.loadVideo();\n    }\n  };\n\n  loadVideo = () => {\n    const { id } = this.props;\n\n    if (window.rifftubePlayer) window.rifftubePlayer.destroy();\n\n    this.player = new window.YT.Player('rifftube-player', {\n      videoId: id,\n      height: 390,\n      width: 640,\n      events: {\n        onReady: this.onPlayerReady,\n        onStateChange: this.onPlayerStateChange\n      }\n    });\n\n    window.rifftubePlayer = this.player; // store global reference (used to get current playback time when needed)\n  };\n\n  onPlayerReady = event => {\n    //event.target.playVideo();\n  };\n\n  checkForRiffsToLoad = t => {\n    this.props.riffs.forEach(riff => {\n      if (\n        riff.type === 'audio' &&\n        !riff.payload &&\n        !riff.loading &&\n        riff.time >= t &&\n        riff.time < t + 10\n      )\n        this.props.loadRiff(riff.id, this.props.googleUser);\n    });\n  };\n\n  onPlayerStateChange = ({ data }) => {\n    /*\n        -1 (unstarted)\n        0 (ended)\n        1 (playing)\n        2 (paused)\n        3 (buffering)\n        5 (video cued).\n        */\n\n    // the following conditional leaves out some 'else's that should never occur\n\n    if (data === 1) {\n      // playing\n      // needed I think... for pausing during a riff\n      this.curRiff = this.props.riffsPlaying;\n\n      /*******************************************************/\n      // this timer is responsible for showing and hiding riffs\n      this.riffInterval = setInterval(() => {\n        //console.log( \"interval\", this.curRiff, this.props.riffsPlaying );\n\n        let t = window.rifftubePlayer.getCurrentTime();\n\n        this.checkForRiffsToLoad(t);\n\n        // first stop any zombie riffs\n        this.props.riffs.forEach((riff, index) => {\n          if (\n            this.curRiff[index] &&\n            (t < riff.time || t > riff.time + riff.duration)\n          ) {\n            this.props.setRiffPlaying(index, false);\n            this.curRiff[index] = false;\n            //document.querySelector( '#riff-content' ).innerHTML = '';\n\n            if (riff.type === 'audio')\n              window.rifftubePlayer.setVolume(this.vol);\n          }\n        });\n\n        // next start any that should be playing\n        this.props.riffs.forEach((riff, index) => {\n          // the riff will start playing within half a second, or will be skipped\n          if (!this.curRiff[index] && t > riff.time && t < riff.time + 0.5) {\n            this.props.setRiffPlaying(index, true);\n            this.curRiff[index] = true;\n\n            if (riff.type === 'audio') {\n              this.vol = window.rifftubePlayer.getVolume();\n              window.rifftubePlayer.setVolume(this.vol * 0.5);\n\n              let audio = document.createElement('audio');\n              audio.controls = false;\n              if (!riff.payload) return; // DEBUG - SHOULD BE REMOVED\n              var audioURL = URL.createObjectURL(riff.payload);\n              audio.src = audioURL;\n              audio.play();\n            }\n          }\n        });\n      }, 100); // 100/1000 = 1/10 s\n\n      if (this.props.mode === PAUSE_MODE) {\n        // change mode state\n        this.props.setPlayerMode(PLAY_MODE);\n      }\n    } // not playing\n    else {\n      // stop riff-check interval when not playing\n      clearInterval(this.riffInterval);\n\n      if (this.props.mode === PLAY_MODE) {\n        // change mode state\n        this.props.setPlayerMode(PAUSE_MODE);\n      }\n    }\n  };\n\n  componentDidUpdate = prevProps => {\n    //console.log( \"youtube vid component upate\" );\n\n    this.checkForRiffsToLoad(0); // check if any riffs at < 10s in need loading\n\n    if (this.props.id !== prevProps.id) this.loadVideo();\n\n    if (this.props.mode !== prevProps.mode) {\n      if (\n        (this.props.mode === EDIT_MODE ||\n          this.props.mode === EDIT_NEW_MODE ||\n          this.props.mode === PAUSE_MODE) &&\n        this.player.getPlayerState() === 1\n      ) {\n        this.player.pauseVideo();\n      } else if (\n        this.props.mode === PLAY_MODE &&\n        this.player.getPlayerState() !== 1\n      ) {\n        this.player.playVideo();\n      }\n    }\n  };\n\n  render = () => {\n    return (\n      <div className=\"rifftube-container\">\n        <div id=\"rifftube-player\" />\n        {Object.keys(this.props.riffsPlaying)\n          .filter(i => this.props.riffsPlaying[i])\n          .map(key => (\n            <div key={key}>\n              <div>\n                {this.props.riffs[key].type === 'text'\n                  ? this.props.riffs[key].payload\n                  : null}\n              </div>\n            </div>\n          ))}\n      </div>\n    );\n  };\n}\n\nconst mapStateToProps = state => ({\n  id: state.videoID,\n  mode: state.mode,\n  riffs: state.riffs,\n  riffsPlaying: state.riffsPlaying,\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  setPlayerMode,\n  setRiffPlaying,\n  togglePlayerMode,\n  loadRiff\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(YouTubeVideo);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { GoogleLogin } from 'react-google-login-component';\nimport { setGoogleUser } from '../../actions/index.js';\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <GoogleLogin\n        socialId=\"941154439836-s6iglcrdckcj6od74kssqsom58j96hd8.apps.googleusercontent.com\"\n        className=\"google-login\"\n        scope=\"profile email\"\n        fetchBasicProfile={false}\n        responseHandler={gus => {\n          this.props.setGoogleUser(gus, this.props.videoID);\n        }}\n        buttonText=\"Login With Google\"\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  videoID: state.videoID\n});\n\nconst mapDispatchToProps = {\n  setGoogleUser\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { editRiff } from '../../actions/index.js';\n\n/* this component is where a user can edit their riff */\nfunction RiffDetail(props) {\n  return (\n    <div className=\"riff-detail\">\n      <div>\n        <ul className=\"riff-detail-list\">\n          <li>No. {props.id}</li>\n          <li>\n            start time: {props.start_time ? props.start_time.toFixed(2) : null}\n          </li>\n          <li>type: {props.type}</li>\n          <li>duration: {props.duration ? props.duration.toFixed(2) : null}</li>\n        </ul>\n        <button\n          onClick={() =>\n            props.editRiff(\n              props.index,\n              props.type === 'audio' && !props.payload ? props.id : null,\n              props.googleUser\n            )\n          }\n        >\n          Edit\n        </button>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  editRiff\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RiffDetail);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport RiffDetail from './RiffDetail.js';\n\n/* this component maps over all of the user's riffs for this video */\nfunction RiffList(props) {\n  console.log('display', props.riffs);\n  return (\n    <div className=\"list-of-riffs\">\n      {props.riffs\n        ? props.riffs.map((riff, index) => (\n            <RiffDetail\n              key={riff.id}\n              {...riff}\n              index={index}\n              selected={props.riffsPlaying[index] === true}\n            />\n          ))\n        : null}\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  riffs: state.riffs,\n  riffsPlaying: state.riffsPlaying\n});\n\nexport default connect(mapStateToProps, null)(RiffList);\n","import React from 'react';\n\nclass Record extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      mediaRecorder: null,\n      recordingState: false\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.mediaDevices) {\n      navigator.mediaDevices\n        .getUserMedia({ audio: true })\n        .then(stream => {\n          const mr = new MediaRecorder(stream);\n\n          mr.ondataavailable = e => {\n            this.chunks.push(e.data);\n          };\n\n          mr.onstop = e => {\n            var blob = new Blob(this.chunks, { type: 'audio/webm' }); // was 'audio/webm;codecs=opus'\n            this.props.saveTempAudio(blob, this.duration);\n          };\n\n          this.setState({ mediaRecorder: mr });\n        })\n        .catch(err => console.log('Error', err));\n    }\n  }\n\n  render() {\n    var ret; // var for the value to be returned\n\n    if (navigator.mediaDevices && this.state.mediaRecorder) {\n      if (!this.state.recordingState) {\n        ret = (\n          <button\n            id=\"recordBtn\"\n            onClick={() => {\n              this.setState({ recordingState: true });\n              this.chunks = [];\n              this.startTime = Date.now();\n              this.state.mediaRecorder.start();\n            }}\n          >\n            record\n          </button>\n        );\n      } else {\n        ret = (\n          <button\n            id=\"stopBtn\"\n            onClick={() => {\n              this.setState({ recordingState: false });\n              this.duration = (Date.now() - this.startTime) / 1000;\n              this.state.mediaRecorder.stop();\n            }}\n          >\n            stop\n          </button>\n        );\n      }\n    } else if (navigator.mediaDevices && !this.state.mediaRecorder)\n      ret = <span>mediaRecorder failed to initialize</span>;\n    else ret = <span>navigator.mediaDevices not supported. sorry.</span>;\n\n    return ret;\n  }\n}\n\nexport default Record;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Record from './Record.js';\nimport {\n  saveRiff,\n  setPlayerMode,\n  saveTempAudio,\n  cancelEdit,\n  EDIT_MODE\n} from '../../actions/index.js';\n\nclass EditRiff extends React.Component {\n  render() {\n    console.log('ed rif red');\n    return (\n      <div className=\"edit-riff\">\n        <div className=\"edit-riff-inner\">\n          {this.props.tempRiff.type === 'audio' ? (\n            <React.Fragment>\n              {this.props.mode === EDIT_MODE && !this.props.tempRiff.payload ? (\n                <span>Loading...</span>\n              ) : null}\n              <Record saveTempAudio={this.props.saveTempAudio} />\n              {this.props.tempRiff.payload ? (\n                <button\n                  onClick={() => {\n                    var audio = document.createElement('audio');\n                    audio.controls = false;\n                    var audioURL = URL.createObjectURL(\n                      this.props.tempRiff.payload\n                    );\n                    audio.src = audioURL;\n                    audio.play();\n                  }}\n                >\n                  Play\n                </button>\n              ) : null}\n              <br />\n              <button\n                disabled={!this.props.tempRiff.payload}\n                onClick={() => {\n                  this.props.saveRiff(\n                    this.props.googleUser.getAuthResponse().id_token,\n                    {\n                      payload: this.props.tempRiff.payload\n                    },\n                    this.props.tempRiff\n                  );\n                }}\n              >\n                Save\n              </button>\n            </React.Fragment>\n          ) : (\n            <React.Fragment>\n              <div>HTML payload:</div>\n              <textarea id=\"riff-edit-field\">\n                {this.props.tempRiff.payload}\n              </textarea>\n              <div>\n                Duration:{' '}\n                <input\n                  id=\"riff-duration-field\"\n                  defaultValue={this.props.tempRiff.duration || 2}\n                />\n              </div>\n              <button\n                onClick={() => {\n                  this.props.saveRiff(\n                    this.props.googleUser.getAuthResponse().id_token,\n                    {\n                      payload: document.querySelector('#riff-edit-field').value,\n                      duration: Number(\n                        document.querySelector('#riff-duration-field').value\n                      )\n                    },\n                    this.props.tempRiff\n                  );\n                }}\n              >\n                Save\n              </button>\n            </React.Fragment>\n          )}\n\n          <button\n            onClick={() => {\n              this.props.cancelEdit();\n            }}\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  mode: state.mode,\n  tempRiff: state.tempRiff,\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  setPlayerMode,\n  saveRiff,\n  saveTempAudio,\n  cancelEdit\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditRiff);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createTempRiff } from '../../actions/index.js';\n\nclass RiffButton extends React.Component {\n  render() {\n    return (\n      <button onClick={this.props.createTempRiff.bind(null, this.props.type)}>\n        {this.props.type}\n      </button>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  createTempRiff\n};\n\nexport default connect(null, mapDispatchToProps)(RiffButton);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport RiffList from './RiffList.js';\nimport EditRiff from './EditRiff.js';\nimport RiffButton from './RiffButton.js';\nimport { EDIT_MODE, EDIT_NEW_MODE } from '../../actions/index.js';\n\n/*This component houses all of the riff buttons and the rifflist*/\nfunction EditControls(props) {\n  return (\n    <div className=\"control-panel\">\n      <div>\n        <h2 className=\"add-riff-title\">Add New Riff</h2>\n        <RiffButton type=\"audio\" />\n        <RiffButton type=\"text\" />\n\n        {props.mode === EDIT_MODE || props.mode === EDIT_NEW_MODE ? (\n          <EditRiff />\n        ) : null}\n      </div>\n      <h2 className=\"riff-list-title\">Control Panel</h2>\n      <RiffList />\n    </div>\n  );\n}\n\nlet mapStateToProps = state => ({\n  mode: state.mode\n});\n\nexport default connect(mapStateToProps, null)(EditControls);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport YouTubeVideo from './components/YouTubeVideo/YouTubeVideo.js';\nimport Login from './components/Login/Login.js';\nimport EditControls from './components/RiffControls/EditControls.js';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { setVideoID } from './actions';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoIDRef = React.createRef();\n  }\n\n  loggedIn = () => {\n    if (this.props.googleUser) {\n      return this.props.googleUser.isSignedIn();\n    }\n    return false;\n  };\n\n  authCheck = (Component, DefaultComponent) => {\n    return this.loggedIn() ? <Component /> : <DefaultComponent />;\n  };\n\n  /* extracts the youtube id from a url. got help from: https://ctrlq.org/code/19797-regex-youtube-id */\n  extractVideoID = url => {\n    var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#\\&\\?]*).*/;\n    var match = url.match(regExp);\n    if (match && match[7].length === 11) {\n      return match[7];\n    } else {\n      alert('Could not extract video ID.');\n    }\n  };\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"top-section\">\n            <div className=\"title-and-url\">\n              <h1>RiffTub</h1>\n              <form\n                onSubmit={e => {\n                  this.props.setVideoID(\n                    this.extractVideoID(this.videoIDRef.current.value)\n                  );\n                  e.preventDefault();\n                }}\n              >\n                <label>YouTube URL/ID:&nbsp;&nbsp;</label>\n                <input\n                  type=\"text\"\n                  defaultValue={this.props.videoID}\n                  ref={this.videoIDRef}\n                />\n                <button\n                  type=\"button\"\n                  onClick={e => {\n                    this.props.setVideoID(\n                      this.extractVideoID(this.videoIDRef.current.value)\n                    );\n                  }}\n                >\n                  Change Video\n                </button>\n              </form>\n            </div>\n\n            <YouTubeVideo />\n          </div>\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              render={this.authCheck.bind(this, EditControls, Login)}\n            />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  videoID: state.videoID,\n  googleUser: state.googleUser\n});\n\nconst mapDispatchToProps = {\n  setVideoID\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  SET_VIDEO_ID,\n  GOOGLE_USER_SIGNIN,\n  SAVE_RIFF,\n  CREATE_TEMP_AUDIO_RIFF,\n  CREATE_TEMP_TEXT_RIFF,\n  SET_PLAYER_MODE,\n  SAVE_TEMP_AUDIO,\n  CANCEL_EDIT,\n  EDIT_RIFF,\n  SET_RIFF_NOT_PLAYING,\n  SET_RIFF_PLAYING,\n  LOAD_RIFF,\n  RIFF_LOADED,\n  EDIT_MODE,\n  EDIT_NEW_MODE,\n  PLAY_MODE,\n  PAUSE_MODE,\n  TOGGLE_PLAYER_MODE,\n  RECEIVE_RIFF_LIST,\n  SAVE_RIFF_SUCCESS\n} from '../actions/index.js';\n\nlet initialState = {\n  videoID: 'lYIRO97dhII',\n  googleUser: null,\n  riffs: [],\n  tempRiff: null,\n  mode: PAUSE_MODE,\n  riffsPlaying: {}\n};\n\nexport default (state = initialState, action) => {\n  console.log('dispatch', action, state);\n\n  switch (action.type) {\n    case SET_VIDEO_ID:\n      return {\n        videoID: action.payload,\n        googleUser: state.googleUser,\n        riffs: [],\n        tempRiff: null,\n        mode: PAUSE_MODE,\n        riffsPlaying: {}\n      };\n    case GOOGLE_USER_SIGNIN:\n      return {\n        ...state,\n        googleUser: action.payload\n      };\n    case CREATE_TEMP_AUDIO_RIFF:\n    case CREATE_TEMP_TEXT_RIFF:\n      return {\n        ...state,\n        tempRiff: {\n          type: action.type === CREATE_TEMP_AUDIO_RIFF ? 'audio' : 'text',\n          time: window.rifftubePlayer.getCurrentTime(),\n          video_id: state.videoID,\n          tempId: new Date().getUTCMilliseconds() // used to get perm id from server\n        },\n        mode: EDIT_NEW_MODE\n      };\n\n    case EDIT_RIFF:\n      return {\n        ...state,\n        tempRiff: { ...state.riffs[action.payload] }, // copy specified riff to tempRiff\n        editIndex: action.payload,\n        mode: EDIT_MODE\n      };\n    case SET_PLAYER_MODE:\n      return {\n        ...state,\n        mode: action.payload\n      };\n    case SAVE_TEMP_AUDIO:\n      return {\n        ...state,\n        tempRiff: {\n          ...state.tempRiff,\n          duration: action.duration,\n          payload: action.payload\n        }\n      };\n    case CANCEL_EDIT:\n      return {\n        ...state,\n        tempRiff: null,\n        editIndex: null,\n        mode: PAUSE_MODE\n      };\n    case SET_RIFF_PLAYING:\n      return {\n        ...state,\n        riffsPlaying: {\n          ...state.riffsPlaying,\n          [action.payload]: true\n        }\n      };\n    case SET_RIFF_NOT_PLAYING:\n      return {\n        ...state,\n        riffsPlaying: {\n          ...state.riffsPlaying,\n          [action.payload]: false\n        }\n      };\n    case TOGGLE_PLAYER_MODE: // not needed at the moment\n      return {\n        ...state,\n        mode: state.mode === PLAY_MODE ? PAUSE_MODE : PLAY_MODE\n      };\n    case RECEIVE_RIFF_LIST:\n      return {\n        ...state,\n        riffs: [\n          ...state.riffs,\n          ...action.payload.body.map(el => ({\n            ...el,\n            time: el.start_time,\n            payload: el.isText ? el.text : null,\n            type: el.isText ? 'text' : 'audio'\n          }))\n        ]\n      };\n    case SAVE_RIFF_SUCCESS:\n      if (action.payload.type === 'add') {\n        let riffs = [...state.riffs];\n        riffs.forEach(el => {\n          if (el.tempId === action.payload.tempId) el.id = action.payload.id;\n        });\n        let ret = { ...state, riffs };\n        return ret;\n      } else return state;\n    case SAVE_RIFF: {\n      let riff = { ...state.tempRiff, ...action.payload };\n      let riffs;\n      // editing a new riff:\n      if (state.mode === EDIT_NEW_MODE) riffs = [...state.riffs, riff];\n      // EDIT_MODE (existing riff):\n      else {\n        riffs = [...state.riffs];\n        riffs[state.editIndex] = riff;\n      }\n\n      return {\n        ...state,\n        riffs,\n        tempRiff: null,\n        mode: PLAY_MODE // should be an option\n      };\n    }\n    case LOAD_RIFF:\n      let ret = { ...state };\n      ret.riffs[action.payload].loading = true;\n      return ret;\n    case RIFF_LOADED: {\n      const b = new Blob(new Array(action.payload), { type: 'audio/webm' });\n      let riffs = [...state.riffs];\n      riffs.forEach(el => {\n        if (el.id === action.id) {\n          el.payload = b;\n          el.loading = false;\n        }\n      });\n      let ret = { ...state, riffs };\n\n      // if this is being edited currently, tempRiff needs to be updated as well\n      if (state.mode === EDIT_MODE && state.tempRiff.id === action.id)\n        ret.tempRiff = { ...ret.tempRiff, payload: b };\n\n      return ret;\n    }\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport rootReducer from './reducers';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\n\nimport thunkMiddleware from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}