{
  "version": 3,
  "sources": [
    "actions/index.js",
    "components/YouTubeVideo.js",
    "components/Login.js",
    "components/Record.js",
    "components/TestButton.js",
    "components/RiffDetail.js",
    "components/RiffList.js",
    "components/EditRiff.js",
    "components/RiffButton.js",
    "components/EditControls.js",
    "App.js",
    "serviceWorker.js",
    "reducers/index.js",
    "index.js"
  ],
  "names": [
    "EDIT_MODE",
    "EDIT_NEW_MODE",
    "PLAY_MODE",
    "PAUSE_MODE",
    "setPlayerMode",
    "mode",
    "type",
    "payload",
    "YouTubeVideo",
    "componentDidMount",
    "window",
    "YT",
    "Player",
    "loadVideo",
    "tag",
    "document",
    "createElement",
    "src",
    "onYouTubeIframeAPIReady",
    "firstScriptTag",
    "getElementsByTagName",
    "parentNode",
    "insertBefore",
    "id",
    "props",
    "rifftubePlayer",
    "destroy",
    "player",
    "videoId",
    "height",
    "width",
    "events",
    "onReady",
    "onPlayerReady",
    "onStateChange",
    "onPlayerStateChange",
    "event",
    "data",
    "console",
    "log",
    "curRiff",
    "riffsPlaying",
    "riffInterval",
    "setInterval",
    "t",
    "getCurrentTime",
    "riffs",
    "forEach",
    "riff",
    "index",
    "time",
    "duration",
    "setRiffPlaying",
    "setVolume",
    "vol",
    "getVolume",
    "audio",
    "controls",
    "play",
    "clearInterval",
    "componentDidUpdate",
    "prevProps",
    "getPlayerState",
    "playVideo",
    "pauseVideo",
    "render",
    "style",
    "position",
    "Object",
    "keys",
    "filter",
    "i",
    "map",
    "key",
    "lineHeight",
    "top",
    "textAlign",
    "pointerEvents",
    "display",
    "verticalAlign",
    "font",
    "backgroundColor",
    "React",
    "Component",
    "mapDispatchToProps",
    "playing",
    "togglePlayerMode",
    "connect",
    "state",
    "videoID",
    "Login",
    "socialId",
    "className",
    "scope",
    "fetchBasicProfile",
    "responseHandler",
    "this",
    "setGoogleUser",
    "buttonText",
    "googleUser",
    "Record",
    "mediaRecorder",
    "recordingState",
    "navigator",
    "mediaDevices",
    "getUserMedia",
    "then",
    "stream",
    "mr",
    "MediaRecorder",
    "ondataavailable",
    "e",
    "chunks",
    "push",
    "onstop",
    "blob",
    "Blob",
    "audioURL",
    "URL",
    "createObjectURL",
    "saveTempAudio",
    "setState",
    "catch",
    "err",
    "onClick",
    "Date",
    "now",
    "startTime",
    "stop",
    "start",
    "TestButton",
    "sendGoogleToken",
    "getAuthResponse",
    "id_token",
    "token",
    "dispatch",
    "axios",
    "post",
    "res",
    "response",
    "editRiff",
    "selected",
    "JSON",
    "stringify",
    "EditRiff",
    "border",
    "padding",
    "tempRiff",
    "Fragment",
    "disabled",
    "saveRiff",
    "defaultValue",
    "querySelector",
    "value",
    "Number",
    "cancelEdit",
    "RiffButton",
    "createTempRiff",
    "bind",
    "App",
    "loggedIn",
    "isSignedIn",
    "authCheck",
    "DefaultComponent",
    "videoIDRef",
    "createRef",
    "ref",
    "setVideoID",
    "current",
    "exact",
    "path",
    "EditControls",
    "Boolean",
    "location",
    "hostname",
    "match",
    "initialState",
    "store",
    "createStore",
    "action",
    "editIndex",
    "applyMiddleware",
    "thunkMiddleware",
    "ReactDOM",
    "getElementById",
    "serviceWorker",
    "ready",
    "registration",
    "unregister"
  ],
  "mappings": "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",
  "file": "static/js/main.c3b47ac4.chunk.js",
  "sourcesContent": [
    "import axios from 'axios';\n\nexport const GOOGLE_USER_SIGNIN = 'GOOGLE_USER_SIGNIN';\n\nexport const SEND_ACCESS_TOKEN = 'SEND_ACCESS_TOKEN';\nexport const SEND_ACCESS_TOKEN_SUCCESS = 'SEND_ACCESS_TOKEN_SUCCESS';\nexport const SEND_ACCESS_TOKEN_FAILURE = 'SEND_ACCESS_TOKEN_FAILURE';\n\nexport const CREATE_TEMP_AUDIO_RIFF = 'CREATE_TEMP_AUDIO_RIFF';\nexport const CREATE_TEMP_TEXT_RIFF = 'CREATE_TEMP_TEXT_RIFF';\n\nexport const EDIT_RIFF = 'EDIT_RIFF';\n\nexport const CANCEL_EDIT = 'CANCEL_EDIT';\nexport const SAVE_RIFF = 'SAVE_RIFF';\n\nexport const SAVE_TEMP_AUDIO = 'SAVE_TEMP_AUDIO';\n\nexport const SET_RIFF_PLAYING = 'SET_RIFF_PLAYING';\nexport const SET_RIFF_NOT_PLAYING = 'SET_RIFF_NOT_PLAYING';\n\nexport const SET_PLAYER_MODE = 'SET_PLAYER_MODE';\nexport const EDIT_MODE = 'EDIT_MODE';\nexport const EDIT_NEW_MODE = 'EDIT_NEW_MODE';\nexport const PLAY_MODE = 'PLAY_MODE';\nexport const PAUSE_MODE = 'PAUSE_MODE';\nexport const TOGGLE_PLAYER_MODE = 'TOGGLE_PLAYER_MODE';\n\nexport const SET_VIDEO_ID = 'SET_VIDEO_ID';\n\nexport const setVideoID = payload => (\n    {\n        type: SET_VIDEO_ID,\n        payload\n    }\n)\n\nexport const setGoogleUser = googleUser => (\n    {\n        type: GOOGLE_USER_SIGNIN,\n        payload: googleUser\n    }\n);\n\nexport const setPlayerMode = mode => (\n    {\n        type: SET_PLAYER_MODE,\n        payload: mode\n    }\n);\n\nexport const togglePlayerMode = mode => (\n    {\n        type: TOGGLE_PLAYER_MODE\n    }\n);\n\nexport const saveRiff = payload => (\n    {\n        type: SAVE_RIFF,\n        payload\n    }\n);\n\nexport const saveTempAudio = (payload, duration) => (\n    {\n        type: SAVE_TEMP_AUDIO,\n        payload,\n        duration\n    }\n);\n\nexport const editRiff = payload => (\n    {\n        type: EDIT_RIFF,\n        payload\n    }\n);\n\nexport const cancelEdit = () => (\n    {\n        type: CANCEL_EDIT\n    }\n);\n\nexport const sendGoogleToken = token => {\n    return dispatch => {\n        dispatch({ type: SEND_ACCESS_TOKEN });\n        axios\n            .post( `http://localhost:3300/verify-token`, { token } )\n            .then(res => {\n                // res.data.data\n                dispatch({ type: SEND_ACCESS_TOKEN_SUCCESS, payload: res.data });\n            })\n            .catch(err => {\n                dispatch({ type: SEND_ACCESS_TOKEN_FAILURE, payload: err.response });\n            });\n        };\n    };\n\nexport const createTempRiff = type => ({\n    type: type == 'audio' ? CREATE_TEMP_AUDIO_RIFF : CREATE_TEMP_TEXT_RIFF\n});\n\nexport const setRiffPlaying = (index, playing) => ({\n    type: playing ? SET_RIFF_PLAYING : SET_RIFF_NOT_PLAYING,\n    payload: index\n});\n",
    "import React from 'react';\nimport { connect } from 'react-redux'\nimport\n{\n    setPlayerMode,\n    setRiffPlaying,\n    togglePlayerMode,\n\n    EDIT_MODE,\n    EDIT_NEW_MODE,\n    PLAY_MODE,\n    PAUSE_MODE\n}\nfrom '../actions';\n\n// based on https://stackoverflow.com/questions/54017100/how-to-integrate-youtube-iframe-api-in-reactjs-solution\n\nclass YouTubeVideo extends React.Component {\n\n  componentDidMount = () => {\n    // On mount, check to see if the API script is already loaded\n\n    if (!window.YT || !window.YT.Player)  // If not, load the script asynchronously\n    {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n\n      // onYouTubeIframeAPIReady will load the video after the script is loaded\n      window.onYouTubeIframeAPIReady = this.loadVideo;\n\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n    }\n    else  // If script is already there, load the video directly\n    {\n      this.loadVideo();\n    }\n  };\n\n  loadVideo = () => {\n\n    const { id } = this.props;\n\n    if ( window.rifftubePlayer )\n        window.rifftubePlayer.destroy();\n\n    this.player = new window.YT.Player('rifftube-player',\n        {\n        videoId: id,\n        height: 390,\n        width: 640,\n        events:\n            {\n                onReady: this.onPlayerReady,\n                onStateChange: this.onPlayerStateChange\n            },\n        });\n    \n    window.rifftubePlayer = this.player; // store global reference (used to get current playback time when needed)\n  };\n\n  onPlayerReady = event => {\n    //event.target.playVideo();\n  };\n\n  onPlayerStateChange = ({ data }) => {\n      /*\n        -1 (unstarted)\n        0 (ended)\n        1 (playing)\n        2 (paused)\n        3 (buffering)\n        5 (video cued).\n        */\n\n        // the following conditional leaves out some 'else's that should never occur\n\n        console.log( \"state change\", data );\n        console.log( \"cur mode\", this.props.mode )\n\n        if ( data == 1 ) // playing\n        {\n            // needed I think... for pausing during a riff\n            this.curRiff = this.props.riffsPlaying;\n\n            // this timer is responsible for showing and hiding riffs\n            this.riffInterval = setInterval( () =>\n            {\n                //console.log( \"interval\", this.curRiff, this.props.riffsPlaying );\n\n                let t = window.rifftubePlayer.getCurrentTime();\n\n                // first stop any zombie riffs\n                this.props.riffs.forEach( (riff, index) => \n                    {\n                        if ( this.curRiff[ index ] && (t < riff.time || t > riff.time + riff.duration) )\n                        {\n                            this.props.setRiffPlaying( index, false );\n                            this.curRiff[ index ] = false;\n                            //document.querySelector( '#riff-content' ).innerHTML = '';\n\n                            if ( riff.type == 'audio' )\n                                window.rifftubePlayer.setVolume( this.vol );\n                        }\n                    }\n                );\n\n                // next start any that should be playing\n                this.props.riffs.forEach( (riff, index) => \n                    {\n                        // the riff will start playing within half a second, or will be skipped\n                        if ( !this.curRiff[ index ] && t > riff.time && t < riff.time + 0.5 )\n                        {\n                            this.props.setRiffPlaying( index, true );\n                            this.curRiff[ index ] = true;\n\n                            if ( riff.type == 'audio' )\n                            {\n                                this.vol = window.rifftubePlayer.getVolume();\n                                window.rifftubePlayer.setVolume( this.vol * 0.5 );\n\n                                let audio = document.createElement('audio');\n                                audio.controls = false;\n                                audio.src = riff.payload;\n                                audio.play();\n                            }\n                        }\n                    }\n                );\n            },\n            100 ); // 100/1000 = 1/10 s\n\n            if ( this.props.mode == PAUSE_MODE )\n            {\n                // change mode state\n                this.props.setPlayerMode( PLAY_MODE );\n\n                console.log( \"paused to play\" );\n            }\n        }\n        else // not playing\n        {\n            // stop riff-check interval when not playing\n            clearInterval( this.riffInterval );\n\n            if ( this.props.mode == PLAY_MODE )\n            {\n                // cahnge mode state\n                this.props.setPlayerMode( PAUSE_MODE );\n\n                console.log( \"play to paused\" );\n            }\n        }\n  }\n\ncomponentDidUpdate = prevProps =>\n{\n    if ( this.props.id != prevProps.id )\n        this.loadVideo();\n\n    if ( this.props.mode != prevProps.mode )\n    {\n        if\n        (\n            (\n                this.props.mode == EDIT_MODE ||\n                this.props.mode == EDIT_NEW_MODE ||\n                this.props.mode == PAUSE_MODE\n            ) &&\n            this.player.getPlayerState() == 1\n        )\n        {\n            console.log( \"pauseVideo\" );\n            this.player.pauseVideo();\n        }\n        else if ( this.props.mode == PLAY_MODE && this.player.getPlayerState() != 1 )\n        {\n            console.log( \"playVideo\" );\n            this.player.playVideo();\n        }\n    }\n}\n\n  render = () => {\n      console.log( \"render vid\", this.props.riffsPlaying );\n    return (\n      <div style={ { position: 'relative' } }>\n        <div id='rifftube-player' />\n            {\n                Object.keys( this.props.riffsPlaying ).filter( i => this.props.riffsPlaying[i] ).map( key =>\n                    (\n                        <div style={ { position: 'absolute', width: '100%', height: '390px', lineHeight: '390px', top: 0, textAlign: 'center', pointerEvents: 'none' } }>\n                            <div style={ { display: 'inline-block', verticalAlign: 'middle', width: '640px', font: '36pt serif', backgroundColor: 'rgba(255,255,255,33%' } }>\n                                {\n                                    this.props.riffs[ key ].type == 'text'\n                                    ?\n                                        this.props.riffs[ key ].payload\n                                    :\n                                        null\n                                }\n                            </div>\n                        </div>\n                    )\n                )\n            }\n        </div>\n    );\n  };\n}\n\nconst mapStateToProps = state => ({\n  id: state.videoID,\n  mode: state.mode,\n  riffs: state.riffs,\n  riffsPlaying: state.riffsPlaying\n});\n\nconst mapDispatchToProps =\n  {\n    setPlayerMode,\n    setRiffPlaying,\n    togglePlayerMode\n  };\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(YouTubeVideo);",
    "import React from 'react';\nimport { connect } from 'react-redux';\nimport { GoogleLogin } from 'react-google-login-component';\nimport { setGoogleUser } from '../actions';\n\nclass Login extends React.Component\n{\n  render() {\n    return (\n      <div>\n        <GoogleLogin\n          socialId=\"941154439836-s6iglcrdckcj6od74kssqsom58j96hd8.apps.googleusercontent.com\"\n          className=\"google-login\"\n          scope=\"profile\"\n          fetchBasicProfile={false}\n          responseHandler={this.props.setGoogleUser}\n          buttonText=\"Login With Google\"\n        />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps =\n  {\n    setGoogleUser\n  };\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Login);\n",
    "import React from 'react';\n\nclass Record extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        this.state =\n        {\n            mediaRecorder: null,\n            recordingState: false\n        };\n    }    \n\n    componentDidMount()\n    {\n        if (navigator.mediaDevices)\n        {\n            navigator.mediaDevices.getUserMedia({ audio: true }).then(\n                stream =>\n                {\n                    const mr = new MediaRecorder(stream);\n\n                    mr.ondataavailable = e =>\n                    {\n                        this.chunks.push( e.data );\n                    };\n\n                    mr.onstop = e =>\n                    {\n                        var blob = new Blob( this.chunks, { 'type' : 'audio/webm' }) ; // was 'audio/webm;codecs=opus'\n                        var audioURL = URL.createObjectURL(blob);\n\n                        this.props.saveTempAudio( audioURL, this.duration );\n                    }\n                \n                    this.setState( { mediaRecorder: mr } );\n                }\n            )\n            .catch( err =>\n                console.log('Error', err)\n            );\n        }\n    }\n  \n    render()\n    {\n        var ret; // var for the value to be returned\n\n        if (navigator.mediaDevices && this.state.mediaRecorder)\n        {\n            if ( !this.state.recordingState )\n            {\n                ret = (\n                    <button\n                        id=\"recordBtn\"\n                        onClick={ () =>\n                            {\n                                this.setState( { recordingState: true } );\n                                this.chunks = [];\n                                this.startTime = Date.now();\n                                this.state.mediaRecorder.start();\n                            } }\n                    >record</button>\n                );\n            }\n            else\n            {\n                ret = (\n                    <button\n                        id=\"recordBtn\"\n                        onClick={ () =>\n                            {\n                                this.setState( { recordingState: false } );\n                                this.duration = (Date.now() - this.startTime) / 1000;\n                                this.state.mediaRecorder.stop();\n                            } }\n                    >stop</button>\n                );\n            }\n        }\n        else if (navigator.mediaDevices && !this.state.mediaRecorder)\n            ret = <span>mediaRecorder failed to initialize</span>;\n        else\n            ret = <span>navigator.mediaDevices not supported. sorry.</span>;\n\n        return ret;\n    }\n}\n\nexport default Record;",
    "import React from 'react';\nimport { connect } from 'react-redux';\nimport { sendGoogleToken } from '../actions';\n\nclass TestButton extends React.Component\n{\n    render() {\n        return (\n            <button\n                id=\"test-post-button\"\n                onClick={ () => { this.props.sendGoogleToken(this.props.googleUser.getAuthResponse().id_token); } }\n            >test verify token</button>\n        );\n    }\n}\n\nconst mapStateToProps = state => (\n  {\n    googleUser: state.googleUser\n  }\n);\n\nconst mapDispatchToProps =\n  {\n    sendGoogleToken\n  };\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(TestButton);  ",
    "import React from 'react';\nimport { connect } from 'react-redux';\nimport\n{\n    editRiff\n}\nfrom '../actions';\n\nfunction RiffDetail(props) {\n  return (\n    <div className=\"riff-detail\">\n        <div style={ { backgroundColor: props.selected ? 'lightpink' : 'white' } }>\n            <button onClick={ () => props.editRiff( props.index ) }>\n                Edit\n            </button>\n            <span>Riff info: {JSON.stringify(props)}</span>\n        </div>\n    </div>\n  );\n}\n\nconst mapDispatchToProps =\n  {\n    editRiff\n  };\n\nexport default connect(\n    null,\n    mapDispatchToProps\n  )(RiffDetail);  \n",
    "import React from 'react';\nimport { connect } from 'react-redux'\nimport RiffDetail from './RiffDetail.js';\n\nfunction RiffList(props) {\n  return (\n    <div>\n        {\n            props.riffs ?\n                props.riffs.map( (riff, index) => (\n                    <RiffDetail {...riff} index={index} selected={ props.riffsPlaying[index] === true } />\n                )) :\n                    null\n        }\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  riffs: state.riffs,\n  riffsPlaying: state.riffsPlaying\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(RiffList);",
    "import React from 'react';\nimport { connect } from 'react-redux';\nimport Record from './Record.js';\nimport\n{\n    saveRiff,\n    setPlayerMode,\n    saveTempAudio,\n    cancelEdit\n}\nfrom '../actions';\n\nclass EditRiff extends React.Component\n{\n    render() {\n        return (\n            <div style={ { border: \"1px solid black\", padding: \"1em\" } }>\n                {\n                    this.props.tempRiff.type == 'audio'\n                    ?\n                        <React.Fragment>\n                            <br />\n                            <Record saveTempAudio={this.props.saveTempAudio} />\n                            {\n                                this.props.tempRiff.payload\n                                ?\n                                    <button\n                                        onClick={ () =>\n                                            {\n                                                var audio = document.createElement('audio');\n                                                audio.controls = false;\n                                                audio.src = this.props.tempRiff.payload;\n                                                audio.play();\n                                            }\n                                        }>Play</button>\n                                :\n                                    null\n                            }\n                            <br />\n                            <button\n                                disabled={ !this.props.tempRiff.payload }\n                                onClick={ () =>\n                                    {\n                                        this.props.saveRiff(\n                                            {\n                                                payload: this.props.tempRiff.payload\n                                            }\n                                        );\n                                    }\n                                }>Save</button>\n                        </React.Fragment>\n                    :\n                        <React.Fragment>\n                            <div>\n                            HTML payload:\n                            </div>\n                            <textarea id=\"riff-edit-field\">{this.props.tempRiff.payload}</textarea>\n                            <div>\n                                Duration: <input id=\"riff-duration-field\" defaultValue={this.props.tempRiff.duration || 2} />\n                            </div>\n                            <button\n                                onClick={ () =>\n                                    {\n                                        this.props.saveRiff(\n                                            {\n                                                payload: document.querySelector( \"#riff-edit-field\" ).value,\n                                                duration: Number( document.querySelector( \"#riff-duration-field\" ).value )\n                                            }\n                                        )\n                                    }\n                                }>Save</button>\n                        </React.Fragment>\n                }\n\n                <button\n                    onClick={ () =>\n                        {\n                            this.props.cancelEdit();\n                        }\n                    }>Cancel</button>\n\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => (\n    {\n        mode: state.mode,\n        tempRiff: state.tempRiff\n    }\n);\n\nconst mapDispatchToProps =\n  {\n    setPlayerMode,\n    saveRiff,\n    saveTempAudio,\n    cancelEdit\n  };\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(EditRiff);  ",
    "import React from 'react';\nimport { connect } from 'react-redux';\nimport { createTempRiff } from '../actions';\n\nclass RiffButton extends React.Component\n{\n    render()\n    {\n        return (\n            <button\n                    onClick={ this.props.createTempRiff.bind( null, this.props.type ) }\n                >{this.props.type}</button>\n        );\n    }\n}\n\nconst mapDispatchToProps =\n    {\n        createTempRiff\n    };\n  \nexport default connect(\n    null,\n    mapDispatchToProps\n)(RiffButton);",
    "import React from 'react';\nimport { connect } from 'react-redux';\nimport Record from './Record.js';\nimport TestButton from './TestButton.js';\nimport RiffList from './RiffList.js';\nimport EditRiff from './EditRiff.js';\nimport RiffButton from './RiffButton.js';\nimport\n{\n    EDIT_MODE,\n    EDIT_NEW_MODE,\n    PLAY_MODE,\n    PAUSE_MODE\n}\nfrom '../actions';\n\nfunction EditControls(props) {\n  return (\n    <div>\n      <div>\n        <RiffButton type=\"audio\" />\n        <RiffButton type=\"text\" />\n        ||\n        <TestButton />\n        {\n          props.mode == EDIT_MODE || props.mode == EDIT_NEW_MODE ?\n          <EditRiff /> :\n          null\n        }\n      </div>\n      <div>\n        <RiffList />\n      </div>\n    </div>\n  );\n}\n\nlet mapStateToProps = state => ({\n  mode: state.mode\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(EditControls);\n",
    "import React from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport YouTubeVideo from './components/YouTubeVideo.js';\nimport Login from './components/Login.js';\nimport EditControls from './components/EditControls.js';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { setVideoID } from './actions';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoIDRef = React.createRef();\n  }\n\n  loggedIn = () => {\n    if (this.props.googleUser) {\n      return this.props.googleUser.isSignedIn();\n    }\n    return false;\n  };\n\n  authCheck = (Component, DefaultComponent) => {\n    return this.loggedIn() ? <Component /> : <DefaultComponent />;\n  };\n\n  render()\n  {\n    return (\n      <Router>\n        <div className=\"App\">\n          <form>\n            <label>\n              Your Youtube Video:\n              <input type=\"text\" defaultValue={ this.props.videoID } ref={ this.videoIDRef } />\n              <button type=\"button\" onClick={ e => { this.props.setVideoID( this.videoIDRef.current.value ); } }>Change Video</button>\n            </label>\n          </form>\n\n          <YouTubeVideo />\n\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              render={ this.authCheck.bind(this, EditControls, Login) }\n            />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = state => (\n  {\n    videoID: state.videoID,\n    googleUser: state.googleUser\n  }\n);\n\nconst mapDispatchToProps =\n  {\n    setVideoID\n  };\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",
    "import\n{\n    SET_VIDEO_ID,\n    GOOGLE_USER_SIGNIN,\n    SAVE_RIFF,\n    CREATE_TEMP_AUDIO_RIFF,\n    CREATE_TEMP_TEXT_RIFF,\n    SET_PLAYER_MODE,\n    SAVE_TEMP_AUDIO,\n    CANCEL_EDIT,\n    EDIT_RIFF,\n    SET_RIFF_NOT_PLAYING,\n    SET_RIFF_PLAYING,\n\n    EDIT_MODE,\n    EDIT_NEW_MODE,\n    PLAY_MODE,\n    PAUSE_MODE,\n    TOGGLE_PLAYER_MODE\n}\nfrom '../actions';\n\nlet initialState =\n    {\n        videoID: \"8N_tupPBtWQ\",\n        googleUser: null,\n        riffs: [],\n        tempRiff: null,\n        mode: PAUSE_MODE,\n        riffsPlaying: {}\n    };\n\nexport default (state = initialState, action) =>\n    {\n        switch (action.type)\n        {\n            case SET_VIDEO_ID:\n                return (\n                    {\n                        videoID: action.payload,\n                        googleUser: state.googleUser,\n                        riffs: [],\n                        tempRiff: null,\n                        mode: PAUSE_MODE,\n                        riffsPlaying: {}\n                    }\n                );\n            case GOOGLE_USER_SIGNIN:\n                return (\n                    {\n                        ...state,\n                        googleUser: action.payload\n                    }\n                );\n            case CREATE_TEMP_AUDIO_RIFF:\n                return (\n                    {\n                        ...state,\n                        tempRiff: { type: 'audio', time: window.rifftubePlayer.getCurrentTime() },\n                        mode: EDIT_NEW_MODE\n                    }\n                );\n            case CREATE_TEMP_TEXT_RIFF:\n                return (\n                    {\n                        ...state,\n                        tempRiff: { type: 'text', time: window.rifftubePlayer.getCurrentTime() },\n                        mode: EDIT_NEW_MODE\n                    }\n                );\n            case EDIT_RIFF:\n                return (\n                    {\n                        ...state,\n                        tempRiff: { ...state.riffs[ action.payload ] }, // copy specified riff to tempRiff\n                        editIndex: action.payload,\n                        mode: EDIT_MODE\n                    }\n                );\n            case SET_PLAYER_MODE:\n                return (\n                    {\n                        ...state,\n                        mode: action.payload\n                    }\n                );\n            case SAVE_TEMP_AUDIO:\n                return (\n                    {\n                        ...state,\n                        tempRiff: { ...state.tempRiff, duration: action.duration, payload: action.payload }\n                    }\n                );\n            case CANCEL_EDIT:\n                return (\n                    {\n                        ...state,\n                        tempRiff: null,\n                        editIndex: null,\n                        mode: PAUSE_MODE\n                    }\n                );\n            case SET_RIFF_PLAYING:\n                return (\n                    {\n                        ...state,\n                        riffsPlaying:\n                        {\n                            ...state.riffsPlaying,\n                            [action.payload]: true\n                        }\n                    }\n                );\n            case SET_RIFF_NOT_PLAYING:\n                return (\n                    {\n                        ...state,\n                        riffsPlaying:\n                        {\n                            ...state.riffsPlaying,\n                            [action.payload]: false\n                        }\n                    }\n                );\n            case TOGGLE_PLAYER_MODE:\n                return (\n                    {\n                        ...state,\n                        mode: state.mode == PLAY_MODE ? PAUSE_MODE : PLAY_MODE\n                    }\n                );\n            case SAVE_RIFF:\n                let riff = { ...state.tempRiff, ...action.payload };\n                let riffs;\n                if ( state.mode == EDIT_NEW_MODE )\n                    riffs = [ ...state.riffs, riff ];\n                else // EDIT_MODE\n                {\n                    riffs = [ ...state.riffs ];\n                    riffs[ state.editIndex ] = riff;\n                }\n\n                return (\n                    {\n                        ...state,\n                        riffs,\n                        tempRiff: null,\n                        mode: PLAY_MODE // should be an option\n                    }\n                );\n            default:\n                console.log( \"uncaught action!\" );\n                return state;\n        }\n    };",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport rootReducer from './reducers';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\n\nimport thunkMiddleware from 'redux-thunk'\n\nconst store = createStore(rootReducer, applyMiddleware( thunkMiddleware ));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
  ],
  "sourceRoot": ""
}
